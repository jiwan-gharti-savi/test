ALTER TABLE "project"."figures_section_history"
ADD COLUMN "deduplication_description" text;

ALTER TABLE "project"."figures_section_history"
-- DROP COLUMN "detailed_descriptions",
ADD COLUMN "detailed_descriptions" jsonb;

DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id"=452 OR "prompt_seq_id"=453 OR "prompt_seq_id"=454;

INSERT INTO "prompt"."prompt_seq"("prompt_seq_id","seq","prompt_id","short_name","role","instructions","fun_def","inputs","outputs","created_at","modified_at","repeat","is_stream","model","multicalls","max_tokens","prompt_actions","claim_nums","decision_step","step_description","revised_step_description","claim_component_entities","claim_component_actions","skip_append","output_format")
VALUES
(452,1,54,E'total_detailed_description',E'system',E'Aim: to eliminate redundancies/duplications in expressing technical features/technical attributes/properties/quantities/alternatives/embodiments/examples. Your aim is not to shorten/truncate/summarize the input ####total description#### but only to eliminate duplicates/redundancies, while re-writing in a logical flow, by doing the following: \n\nStep 1 : a) Please rewrite the ####total description#### to include \'all\' technical features/technical attributes/properties/quantities/alternatives/embodiments/examples etc.  for each entity only once. Ensure all such details are mentioned only once across the flow chart description/block diagram description or any other descriptions of embodiments. While rewriting, ensure there is no change or generalisation in the technical language, quantities, properties, alternatives, embodiments and logical flow. \nb) In the re-write of the ####Total Description####, do not remove any references to step numbers like 100, 200 etc. or references to component numbers that explain a block diagram. Similarly, do not remove any references to entity identifiers like display (10,40) that identify an entity uniquely. \n\nStep 1.1: a) Do not truncate/shorten/summarize the input ####total description#### but ensure\nall the multiple/repetitive mentions of technical features/technical attributes/properties/quantities/alternatives/embodiments/examples etc of all entities are removed in the output of step 1. b) Do not remove any references to step numbers like 100, 200 etc. or references to component numbers that explain a block diagram in the output of step 1. Similarly, do not remove any references to entity identifiers like display (10,40) that identify an entity uniquely in the output of step 1. Do not print output for this step. ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(453,2,54,E'total_detailed_description',E'user',E'total description: {{total_description}}\n\n\n',NULL,E'{"project": ["total_description"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(454,3,54,E'total_detailed_description',E'user',E'Step 1, Step 1.1',NULL,NULL,E'{"project": ["total_description"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text');

DELETE FROM "prompt"."prompt" WHERE "prompt_id"=54;

INSERT INTO "prompt"."prompt"("prompt_id","name","version","is_selected","parent_prompt_id","created_at","modified_at","model")
VALUES
(54,E'total_detailed_description',E'V1',TRUE,NULL,NULL,NULL,NULL);

DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id"=317 OR "prompt_seq_id"=324 OR "prompt_seq_id"=328 OR "prompt_seq_id"=414 OR "prompt_seq_id"=417 OR "prompt_seq_id"=420 OR "prompt_seq_id"=321 OR "prompt_seq_id"=423 OR "prompt_seq_id"=426 OR "prompt_seq_id"=429 OR "prompt_seq_id"=435 OR "prompt_seq_id"=438 OR "prompt_seq_id"=441 OR "prompt_seq_id"=447;

INSERT INTO "prompt"."prompt_seq"("prompt_seq_id","seq","prompt_id","short_name","role","instructions","fun_def","inputs","outputs","created_at","modified_at","repeat","is_stream","model","multicalls","max_tokens","prompt_actions","claim_nums","decision_step","step_description","revised_step_description","claim_component_entities","claim_component_actions","skip_append","output_format")
VALUES
(317,1,44,E'regenerate_claim',E'system',E'I am providing you text ####claims### to perform the following steps.\n\nStep 3: Find all the entities and their associated numerical identifiers for all the claims from text ####Claims#### in the output. entity_numerical_identifier is a number that identifies the entity uniquely. For example Device (10,40), Object (15, 45). Do not consider claim number, acronyms, percentages or any other textual attribute as numerical identifier for entity_numerical_identifier.  Print output in the json format with title ==entity_claims== where every entity is in a separate row. Print the json ==entity_claims== in this format:\n{"entity_claims": [ {"claim_number": .., "entity_claim": ..., "entity_numerical_identifier":..}, ..]}\n\nStep 3.1: Please continue the process of Step 3 to identify all the entities and their associated numerical identifiers for each claim from text ####Claims####. entity_numerical_identifier is a number that identifies the entity uniquely. For example Device (10,40), Object (15, 45). Exclude claim number, acronym, percentage or any other textual attribute as numerical identifier. Ensure all claim numbers from text ####Claims#### are referenced in the output. Do not print output for this step. \n\nStep 4:  Identify all the entity actions from text ####Claims#### for each/every entity from field entity_claim from json ####entity_claims#### for each/every claim where the entity is referenced from field  claim_number from json entity_claims. Group the entities from field entity_claim if the purpose of their entity actions is the same/similar even if the language of their entity actions is different.\nPrint the output in json format with title ==claim_entity_actions==.  Print the json ==claim_entity_actions== in this format:\n{"claim_entity_actions": [ { "id_clm:":..., "entity_action_claim":..., "purpose":..., "entity_claim": [.,.,.], "claim_number":...}, ...]}\n\nStep 4.1: Re-run Step 4 till all the entity actions are identified from text ####Claims#### for each/every entity from field entity_claim from json ####entity_claims####. Ensure to group all entities if the the purpose of their actions is the same. The json Claim_entity_actions should reference all the claim numbers from text ####Claims####. Ensure the response is generated in one go.\n\n\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(324,8,44,E'regenerate_claim',E'system',E'I am providing you text ####Current Invention### to perform the  steps from  step 5 to 6. \n\nStep 5: Identify all the entities from the text ####Current Invention####. Entities are defined as nouns/phrases/parts/components that perform an action to achieve some result. Ensure all the nouns/phrases/parts/components that perform an action or aid any action are captured in the output. Print the output in json format with title ==entity_invention== where each entity is in a separate row. The json ==entity_invention== will contain the following fields: serial_number, entity_inv. Print the json ==entity_invention== in this format:\n{"entity_invention": [ {"serial_number": .., "entity_inv": ...}, ..]}\n\nStep 6: Identify all the entity actions from text ####Current Invention#### for each/every the entity from field entity_inv from json entity_invention and determine the purpose of the entity action. Group the entities from field entity_inv if the purpose of their entity actions is the same/similar even if the language of their entity actions is different. Print output in json format with title ==invention_entity_actions== where every entity action corresponding to an entity is in a separate row.   Ensure all the entities from field entity_inv from json ==entity_invention== are grouped in the output. Print the json ==invention_entity_actions== in this format:\n{"entity_invention": [ { "id_inv":..., "entity action_invention":..., "purpose":..., "entities_inv": [.,.,.]}, ..]}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(414,13,44,E'regenerate_claim',E'system',E'I am providing you the following inputs:\n####Claims####\n####Current Invention\n####claim_entity_actions###  in json format\n####invention_entity_actions#### in json format \n\nStep 7:  Co-relate the entity actions for each claim from field entity_action_claim from json ####claim_entity_actions#### with the corresponding entity actions from field entity_action_invention from json  ####Invention_entity_actions####.  This is basically reverse mapping claim language of the entity actions in claims from text ####Claims#### with the entity actions as given in the text ####Current Invention####. Print the output of this step in json format with title ==entity_actions_rewritten== where every id_clm  from field id_clm is in a separate row. Print the json ==entity_actions_rewritten== in this format:\n{"entity_actions_rewritten": [ {"id_clm":..., "id_inv":...}, ..]}\n\nStep 7.1: Please continue the process of Step 7 for all the claims referenced from field claim_number from json ####claim_entity_actions####. Ensure the response is generated in one go. \n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(417,16,44,E'regenerate_claim',E'system',E'I am providing you the following inputs to compare:\n####invention_entity_actions#### in json format \n####entity_actions_rewritten#### in json format \n\nStep 8: Identify the ids from field id_inv from json ####invention_entity_actions#### that are not correlated with any of the ids from field id_clm from json ####entity_actions_rewritten####. Print output in json format with title ==missing_entity_actions==.  The json ==missing_entity_actions== will contain the following fields: entities_inv, entity_action_invention. Print the json ==missing_entity_actions== in this format:\n{"missing_entity_actions": [ { "id_inv": ..., "purpose":...}, ..]}. Do not print the process in the output.\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(420,19,44,E'regenerate_claim',E'system',E'I am providing you the following inputs to co-relate:\n####claim_entity_actions#### in json format \n####missing_entity_actions#### in json format \n\nStep 9: Co-relate the missing id from field id_inv from  json ####missing_entity_actions#### with the most close entity from field entity_claim from json ####claim_entity_actions#### based on it\'s purpose from field purpose. Print the output in json format with title ==missing_entity_action_rewritten==. The json ==missing_entity_action_rewritten== will contain the following fields: id_clm, id_inv.\nPrint the json ==missing_entity_action_rewritten== in this format:\n{"missing_entity_action_rewritten": [ {"id_clm":....,"id_inv": ...}, ..]}. Do not print the process in the output.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(423,22,44,E'regenerate_claim',E'system',E'I am providing you text ####Current Invention#### and ####grouped_entity_invention####. \n\nStep 7: Identify all the specific numerical attributes, specific properties (including physical properties such as state, texture, etc. and particular examples), specific quantities, every/each alternative and every/each embodiment, every/each use and every applications  from text ####Current invention#### associated with each/every entity from field entities_inv from json ####grouped_entity_invention####. Quote the entire paragraph from text ####Current invention#### that describes the entity actions/attributes/properties/uses. Remember, there maybe multiple paragraphs that describes the entity actions/attributes/properties or uses. Some paragraphs may have the explicit reference to the entity and others may have implicit references to the entity.  While quoting from text ####current invention####, do not change the language and quote as is. Print output in json format with title ==specific_attributes_invention==where each attribute is in a separate row.  Print the json ==specific_attributes_invention== in this format:\n{"specific_attributes_invention": [{ "id_inv":..., "specific_attributes_inv": ..., "entities_inv":...}, ..]}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(426,25,44,E'regenerate_claim',E'system',E'I am providing you the following inputs: \n####Current Invention####  as text\n####specific_attributes_invention#### as json. \n\nStep 8: Identify the details from text ####Current Invention#### that are missing from field specific_attributes_inv in json ####specific_attributes_invention#### and include the details in the output.\nPrint the output of this step in json format with title ==additional_attributes_invention== where each attribute is in a separate row. Print the json ==additional_attributes_invention== in this format:\n{"additional_attributes_invention": [ {"additional_attributes_inv": ...}, ..]}. Do not print the process in the output.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(429,28,44,E'regenerate_claim',E'system',E'I am providing you the following inputs: \n####additional_attributes_invention####  as json\n####grouped_entity_invention#### as json. \n\nStep 9: Co-relate each/every additional entity attributes in field additional_attributes_inv from json ####additional_attributes_invention#### with the most appropriate entity from field entities_inv from json ####grouped_entity_invention#### based on the implied use/benefit of the attribute. Print the output of this step in json format with title ==additional_entity_attributes_invention==. Print the json ==additional_entity_attributes_invention== in this format:\n{"additional_entity_attributes_invention": [ {"id_inv": ..., "additional_attributes_inv":...}, ..]}. Do not print process in the output.\n\nStep 9.1: Re-run step 9 till each/every additional entity attribute from field  additional_attributes_invention from json ####additional_attributes_invention#### is correlated with the most appropriate entity from field entities_inv from json ####grouped_entity_invention#### based on the implied use/benefit of the attribute. Do not print process in the output.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(435,34,44,E'regenerate_claim',E'system',E'I am providing you the following inputs:\n####Claims####\n####Current Invention\n####specific_attributes_claims#### in json format\n####total_attributes_invention#### in json format\nto perform the following steps. \n\nStep 7: Co-relate all the specific attributes for each claim from field specific_attributes_claim from json ####specific_attributes_claims####  with the corresponding related specific attributes from field all_invention_attributes from json  ####total_attributes_invention####.  \n\nPrint the output of this step in json format with title ==entity_attributes_rewritten== where each entity is in a separate row. Print the json ==entity_attributes_rewritten== in this format:\n{"entity_attributes_rewritten": [ {"id_clm": .., "id_inv": ...}, ..]}. Do not print the process in the output.\n\nStep 7.1: Please continue the process of Step 7 for all the claims referenced from field  claim_number from json ####specific_attributes_claims#### in the output. Ensure the response is generated in one go.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt
-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(438,37,44,E'regenerate_claim',E'system',E'I am providing you the following
inputs:
\n####entity_attributes_rewritten#### in json format\n####total_attributes_invention#### in json format\nto perform the following steps. \n\nStep 8: Identify the ids from field id_inv from json ####total_attributes_invention#### that are not correlated
with any of the ids from field id_clm in json ####entity_attributes_rewritten####.\nPrint the output of this step in json format
with title ==additional_entity_attributes_rewritten==.
Print the
json ==additional_entity_attributes_rewritten== in this
format:
\n{"additional_entity_attributes_rewritten": [ { "id_inv": ..., "additional_attributes_invention":...}, ..]}. Do not
print process
in the output.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(441,40,44,E'regenerate_claim',E'system',E'I am providing you the following
inputs:
\n####specific_attributes_claims#### in json format\n####additional_entity_attributes_rewritten#### in json format\nto perform the following steps. \n\n\nStep 9: Co-relate each/every additional entity attributes identified in json ####additional_entity_attributes_rewritten####
with the most appropriate entity from field entities_claim from json ####specific_attributes_claims#### based on the implied
use/benefit of the attribute.
Print the
output of this step in json format
with title ==missing_entity_attributes_rewritten== where each entity from field entities_inv is in a separate row. The json ==missing_entity_attributes_rewritten== will contain the following
fields:
entities_claim, entities_inv,  additional_attributes_invention
Print the
json ==missing_entity_attributes_rewritten== in this
format:
\n{"missing_entity_attributes_rewritten": [ { "id_clm:":..., "id_inv": ..., "additional_attributes_invention":...}, ..]}. Do not
print process
in the output.\n\nStep 9.1: Re-run step 9 till each/every additional entity attribute from field  additional_attributes_invention from json ####additional_entity_attributes_rewritten#### is correlated
with the most appropriate entity from field entities_claim from json ####specific_attributes_claims#### based on the implied
use/benefit of the attribute. Do not
print process in the output.\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(447,46,44,E'regenerate_claim',E'system',E'I am giving you text ####Claims#### to determine type of claims.\n\nStep 1:  Identify all the respective method/system/other claims from the text ####Claims####. All the system claims will be classified as system claims, all the method claims are classified under method claims and all the device/apparatus/product/computer
program product/composition/formulation/machine claims go into others. The output of the claim type should be flagged either as true or as False\nPrint the output in json format with title ==claim_types==. The json ==claim_types== will contain the following field  claim_type (system - True/False, system_claim_numbers, method - True/False, method_claim_numbers, other - True/False), other_claim_numbers. Print the json ==claim_types== in this format:\n{"claim_types": {"method": ..., "method_claim_numbers":[.,.,.], "system": ..., "system_claim_numbers":[.,.,.], "other": ..., "other_claim_numbers":[.,.,.]}}. Do not print the process in the output\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(321,5,44,E'regenerate_claim',E'system',E'I am providing you text ####claims###,  ####entity_claims#### to perform the  steps from  step 5 to 5.1. \n\nStep 5: Identify all the specific numerical attributes, all the specific properties (including physical properties such as state, texture, etc. and particular examples), all the specific quantities/number of the entity/entites, all alternatives and all embodiments/uses/applications from text ####claims#### associated with each/every entity from field entity_claim for all claims from field claim_number from json ####entity_claims#### and quote from text ####Claims#### in the output. When we quote from text ####claims####, do not change the language and quote as is. Print the output in json format with title ==claim_entity_attributes== where every entity attribute is in a separate row. The entity attribute rows may contain multiple entities in field entities_claim and multiple claims in field claim_numbers in the output if they share the same/similar attribute.  The json ==claim_entity_attributes== will contain the following fields:  id_clm, specific_attributes_claim, entities_claim, claim_numbers. Print the json ==claim_entity_attributes== in this format:\n{"claim_entity_attributes": [ {"specific_attributes_claim": .., "entities_claim": ..., "Claim_numbers": }, ..]}\n\nStep 5.1: Please continue the process of Step 5 for all the entities from field entity_claim for all claims from field claim_number from json ####entity_claims####. Ensure the response is generated in one go.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);

DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id"=321;

INSERT INTO "prompt"."prompt_seq"("prompt_seq_id","seq","prompt_id","short_name","role","instructions","fun_def","inputs","outputs","created_at","modified_at","repeat","is_stream","model","multicalls","max_tokens","prompt_actions","claim_nums","decision_step","step_description","revised_step_description","claim_component_entities","claim_component_actions","skip_append","output_format")
VALUES
(321,5,44,E'regenerate_claim',E'system',E'I am providing you text ####claims###,  ####entity_claims#### to perform the  steps from  step 5 to 5.1. \n\nStep 5: Identify all the specific numerical attributes, all the specific properties (including physical properties such as state, texture, etc. and particular examples), all the specific quantities/number of the entity/entites, all alternatives and all embodiments/uses/applications from text ####claims#### associated with each/every entity from field entity_claim for all claims from field claim_number from json ####entity_claims#### and quote from text ####Claims#### in the output. When we quote from text ####claims####, do not change the language and quote as is. Print the output in json format with title ==claim_entity_attributes== where every entity attribute is in a separate row. The entity attribute rows may contain multiple entities in field entities_claim and multiple claims in field claim_numbers in the output if they share the same/similar attribute.  Print the json ==claim_entity_attributes== in this format:\n{"claim_entity_attributes": [ {"id_clm":..., "specific_attributes_claim": .., "entities_claim": ..., "Claim_numbers": }, ..]}\n\nStep 5.1: Please continue the process of Step 5 for all the entities from field entity_claim for all claims from field claim_number from json ####entity_claims####. Ensure the response is generated in one go.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt
-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);

DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id"=317 OR "prompt_seq_id"=318 OR "prompt_seq_id"=319 OR "prompt_seq_id"=320 OR "prompt_seq_id"=321 OR "prompt_seq_id"=322 OR "prompt_seq_id"=323 OR "prompt_seq_id"=324 OR "prompt_seq_id"=325 OR "prompt_seq_id"=326 OR "prompt_seq_id"=327 OR "prompt_seq_id"=351 OR "prompt_seq_id"=352 OR "prompt_seq_id"=353 OR "prompt_seq_id"=354 OR "prompt_seq_id"=355 OR "prompt_seq_id"=356 OR "prompt_seq_id"=357 OR "prompt_seq_id"=358 OR "prompt_seq_id"=359 OR "prompt_seq_id"=360 OR "prompt_seq_id"=361 OR "prompt_seq_id"=362 OR "prompt_seq_id"=363 OR "prompt_seq_id"=364 OR "prompt_seq_id"=365 OR "prompt_seq_id"=366 OR "prompt_seq_id"=367 OR "prompt_seq_id"=368 OR "prompt_seq_id"=369 OR "prompt_seq_id"=370 OR "prompt_seq_id"=373 OR "prompt_seq_id"=374 OR "prompt_seq_id"=375 OR "prompt_seq_id"=376 OR "prompt_seq_id"=377 OR "prompt_seq_id"=378 OR "prompt_seq_id"=379 OR "prompt_seq_id"=380 OR "prompt_seq_id"=381 OR "prompt_seq_id"=382 OR "prompt_seq_id"=383 OR "prompt_seq_id"=384 OR "prompt_seq_id"=385 OR "prompt_seq_id"=386 OR "prompt_seq_id"=387 OR "prompt_seq_id"=388 OR "prompt_seq_id"=389 OR "prompt_seq_id"=390 OR "prompt_seq_id"=391 OR "prompt_seq_id"=392 OR "prompt_seq_id"=395 OR "prompt_seq_id"=396 OR "prompt_seq_id"=397 OR "prompt_seq_id"=398 OR "prompt_seq_id"=399 OR "prompt_seq_id"=400 OR "prompt_seq_id"=401 OR "prompt_seq_id"=402 OR "prompt_seq_id"=403 OR "prompt_seq_id"=404 OR "prompt_seq_id"=405 OR "prompt_seq_id"=406 OR "prompt_seq_id"=407 OR "prompt_seq_id"=408 OR "prompt_seq_id"=409 OR "prompt_seq_id"=410 OR "prompt_seq_id"=411 OR "prompt_seq_id"=414 OR "prompt_seq_id"=415 OR "prompt_seq_id"=416 OR "prompt_seq_id"=417 OR "prompt_seq_id"=418 OR "prompt_seq_id"=419 OR "prompt_seq_id"=420 OR "prompt_seq_id"=421 OR "prompt_seq_id"=422 OR "prompt_seq_id"=423 OR "prompt_seq_id"=424 OR "prompt_seq_id"=425 OR "prompt_seq_id"=426 OR "prompt_seq_id"=427 OR "prompt_seq_id"=428 OR "prompt_seq_id"=429 OR "prompt_seq_id"=430 OR "prompt_seq_id"=431 OR "prompt_seq_id"=435 OR "prompt_seq_id"=436 OR "prompt_seq_id"=437 OR "prompt_seq_id"=438 OR "prompt_seq_id"=439 OR "prompt_seq_id"=440 OR "prompt_seq_id"=441 OR "prompt_seq_id"=442 OR "prompt_seq_id"=443 OR "prompt_seq_id"=447 OR "prompt_seq_id"=448 OR "prompt_seq_id"=449 OR "prompt_seq_id"=450 OR "prompt_seq_id"=451 OR "prompt_seq_id"=452 OR "prompt_seq_id"=453 OR "prompt_seq_id"=454;

INSERT INTO "prompt"."prompt_seq"("prompt_seq_id","seq","prompt_id","short_name","role","instructions","fun_def","inputs","outputs","created_at","modified_at","repeat","is_stream","model","multicalls","max_tokens","prompt_actions","claim_nums","decision_step","step_description","revised_step_description","claim_component_entities","claim_component_actions","skip_append","output_format")
VALUES
(317,1,44,E'regenerate_claim',E'system',E'I am providing you text ####claims### to perform the following steps.\n\nStep 3: Find all the entities and their associated numerical identifiers for all the claims from text ####Claims#### in the output. entity_numerical_identifier is a number that identifies the entity uniquely. For example Device (10,40), Object (15, 45). Do not consider claim number, acronyms, percentages or any other textual attribute as numerical identifier for entity_numerical_identifier.  Print output in the json format with title ==entity_claims== where every entity is in a separate row. Print the json ==entity_claims== in this format:\n{"entity_claims": [ {"claim_number": .., "entity_claim": ..., "entity_numerical_identifier":..}, ..]}\n\nStep 3.1: Please continue the process of Step 3 to identify all the entities and their associated numerical identifiers for each claim from text ####Claims####. entity_numerical_identifier is a number that identifies the entity uniquely. For example Device (10,40), Object (15, 45). Exclude claim number, acronym, percentage or any other textual attribute as numerical identifier. Ensure all claim numbers from text ####Claims#### are referenced in the output. Do not print output for this step. \n\nStep 4:  Identify all the entity actions from text ####Claims#### for each/every entity from field entity_claim from json ####entity_claims#### for each/every claim where the entity is referenced from field  claim_number from json entity_claims. Group the entities from field entity_claim if the purpose of their entity actions is the same/similar even if the language of their entity actions is different.\nPrint the output in json format with title ==claim_entity_actions==.  Print the json ==claim_entity_actions== in this format:\n{"claim_entity_actions": [ { "id_clm:":..., "entity_action_claim":..., "purpose":..., "entity_claim": [.,.,.], "claim_number":...}, ...]}\n\nStep 4.1: Re-run Step 4 till all the entity actions are identified from text ####Claims#### for each/every entity from field entity_claim from json ####entity_claims####. Ensure to group all entities if the the purpose of their actions is the same. The json Claim_entity_actions should reference all the claim numbers from text ####Claims####. Ensure the response is generated in one go.\n\n\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(318,2,44,E'regenerate_claim',E'user',E'Claims:####{{claims}}####',NULL,E'{"project": ["claims"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(319,3,44,E'regenerate_claim',E'user',E'Step 3, Step 3.1',NULL,NULL,E'{"project": ["claim_entities"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(320,4,44,E'regenerate_claim',E'user',E'Step 4, Step 4.1',NULL,NULL,E'{"project": ["claim_entity_actions"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(321,5,44,E'regenerate_claim',E'system',E'I am providing you text ####claims###,  ####entity_claims#### to perform the  steps from  step 5 to 5.1. \n\nStep 5: Identify all the specific numerical attributes, all the specific properties (including physical properties such as state, texture, etc. and particular examples), all the specific quantities/number of the entity/entites, all alternatives and all embodiments/uses/applications from text ####claims#### associated with each/every entity from field entity_claim for all claims from field claim_number from json ####entity_claims#### and quote from text ####Claims#### in the output. When we quote from text ####claims####, do not change the language and quote as is. Print the output in json format with title ==claim_entity_attributes== where every entity attribute is in a separate row. The entity attribute rows may contain multiple entities in field entities_claim and multiple claims in field claim_numbers in the output if they share the same/similar attribute.  Print the json ==claim_entity_attributes== in this format:\n{"claim_entity_attributes": [ {"id_clm":..., "specific_attributes_claim": .., "entities_claim": ..., "Claim_numbers": }, ..]}\n\nStep 5.1: Please continue the process of Step 5 for all the entities from field entity_claim for all claims from field claim_number from json ####entity_claims####. Ensure the response is generated in one go.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt\n-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(322,6,44,E'regenerate_claim',E'user',E'Claims:####{{claims}}####entity_claims: ####{{claim_entities}}####',NULL,E'{"project": ["claims", "claim_entities"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(323,7,44,E'regenerate_claim',E'user',E'Step 5, Step 5.1',NULL,NULL,E'{"project": ["claim_specific_attributes"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(324,8,44,E'regenerate_claim',E'system',E'I am providing you text ####Current Invention### to perform the  steps from  step 5 to 6. \n\nStep 5: Identify all the entities from the text ####Current Invention####. Entities are defined as nouns/phrases/parts/components that perform an action to achieve some result. Ensure all the nouns/phrases/parts/components that perform an action or aid any action are captured in the output. Print the output in json format with title ==entity_invention== where each entity is in a separate row. The json ==entity_invention== will contain the following fields: serial_number, entity_inv. Print the json ==entity_invention== in this format:\n{"entity_invention": [ {"serial_number": .., "entity_inv": ...}, ..]}\n\nStep 6: Identify all the entity actions from text ####Current Invention#### for each/every the entity from field entity_inv from json entity_invention and determine the purpose of the entity action. Group the entities from field entity_inv if the purpose of their entity actions is the same/similar even if the language of their entity actions is different. Print output in json format with title ==invention_entity_actions== where every entity action corresponding to an entity is in a separate row.   Ensure all the entities from field entity_inv from json ==entity_invention== are grouped in the output. Print the json ==invention_entity_actions== in this format:\n{"entity_invention": [ { "id_inv":..., "entity action_invention":..., "purpose":..., "entities_inv": [.,.,.]}, ..]}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(325,9,44,E'regenerate_claim',E'user',E'Current invention:\n####{{invention}}####',NULL,E'{"project": ["invention"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(326,10,44,E'regenerate_claim',E'user',E'Step 5',NULL,NULL,E'{"project": ["entities"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(327,11,44,E'regenerate_claim',E'user',E'Step 6',NULL,NULL,E'{"project": ["invention_entity_actions"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(351,1,46,E'block_diagram_common',E'system',E'I have provided following inputs to perform steps 5 to 11\n####Claims####\n####Current Invention####\n####entity_actions_rewritten####in json format\n\n\nStep 5: An independent claim does not reference any other claim. However, a dependent claim always references another claim on which it depends. Using the above logic do the following: \na) Identify all the system type  independent and dependent claims from the text ####Claims#### based on the preamble of the claims only. If there are no system claims, output no system claims.\n\nb) Map the dependency between the independent claim and/or all the dependent claims that directly or indirectly reference it in the same claim group. Also, map the dependency between the dependent claims in the same claim group. For instance, if claim 1 is independent and claims 2 and 3 are directly dependent on claim 1, they should be grouped in the same claim group. If there are further dependent claims such as claim 4 that depend on dependent claim 3, and dependent claim 5 that depends on dependent claim 4, they should also be included in the group of claim 1, as they indirectly reference it. Even if there is no dependent claim for an independent claim it should be classified into a separate group.\nc) No two independent claims can be grouped in the same claim group. \nd) Only the system type claims(if any) must be referenced in the output. Do not include component/apparatus/product/device/machine claims under system claim category in the output.\nPrint the output in a json format. \nPrint the json ==claim_groups== in this format:\n{"claim_groups": [ { "claims_group_number":..., "system_independent_claim": ...,  "claim_type":..., "system_dependent_claim":....}, ..]}. Ensure no dependent claim is considered as a distinct claim_group. Do not print the process in the output.  \n \nStep 5.1: Rerun the step till each system claim(independent and/or dependent) is referenced in json claim_groups. Do not include component/apparatus/product/device/machine type claims under system claim category in the output. Do not print output for this step.\n\n\nStep 6:  For the claims identified from ==system_Claims==, use the entity actions from field {entity_action_claim} from json ####entity_actions_rewritten#### to identify which dependent claim depends on which entity action of the independent claim or the entity action in other dependent claims in context of text ####Claims####. Provide the mapping between the dependent claims and the claim entity actions of the independent claim or the entity actions of other dependent claims on which it depends. Output format: Dependent claim --> Independent claim --> reason etc. \nPrint the json ==claim_dependency== in this format:\n{"claim_dependency": [{"claims_group_number":..., "dependent_claim": ..., "independent_claim": ..., "reason": ...}, ...]}\n\n\nStep 7: Identify and name the system that encompasses the specific entity actions associated with ####current invention#### from field entity action_invention from json ####entity_actions_rewritten#### and all the claims from ==system_Claims==. Output format: ==System==\nPrint the json ==System== in this format:\n{"system": ...}\n\n\nStep 8: a) Co-relate the identified claims for each claim group from field independent_claim, from field dependent_claim from json claim_groups with the field claim_number from json ####entity_actions_rewritten####.\nb) Identify all the entities from field entity_claim and entities_inv from json ####entity_actions_rewritten#### for the co-related claim numbers for each claim group.\nc) Group all the identified entities for each claim group from field entity_claim and from field entities_inv from json  #### entity_actions_rewritten#### into components and sub-components using overlaps/commonalities in their entity action from either 1) from field entity_action_claim or from 2) field entity_action_invention from json ####entity_actions_rewritten#### and from output of step 6. These components and sub-components should be grouped such that when working together they manifest the invention from text ####Claims#### and text ####Current invention####. \nd) The grouped entities should be referred as component/sub-component only in the field component/sub-component type in the output.\ne) Ensure that entities from both field entity_claim and from field entities_inv are quoted/cited in the output. Ensure all the claims (both independent and dependent claims) identified for each claim group in the output of step 5 are referenced in the output. Number the components using numerals 1, 2 etc. The sub-components of a component with the decimal number of that component such as 1.1, 1.2, 2.1, 2.2 etc,. Follow a unique number series for each claim group. Print the output in json format with title ==component_entities== where every component/ sub-component is in a separate row. The json ==component_entities== will be in this format:\n{"component_entities": [ {"claims_group_number":...., "component/sub-component type":..., "component/sub-component number":..., "component/sub-component name ": ...,  "entity_claim":...., "entity_numerical_identifier":..., "entities_inv":..., "claim numbers":...}, ..]}. Do not repeat the process in the output.\n\nStep 8.1: Rerun step 8 till all the entities from both field entity_claim and from field entities_inv are quoted/cited in the column grouped entities in the output and all the claims from field dependent_claims for each claim group from json ==claim_groups== are referred in the output.\n\nStep 9: Check whether the field entity_numerical_identifier associated with all entities from the field entity_claim from JSON ####component_entities#### has only numerical values. If yes, print "All entities have numerical identifiers". If any of the value in field entity_numerical_identifier is non numerical, print "NO". Output in json format with fields \nflag - All entities have numerical identifiers / No\nOutput json in the below format: {"check": {"flag": ...}} \n\n\nStep 10 : Check the naming of components for each claim group from field claims_group_number from Step 8 to determine which components are named like method components. Re-name only the components and sub-components from output of Step 8 to sound like system components/parts of a system if they sound like method components. When renaming, ensure the names are small/pithy/catchy titles with at most 2-5 words. Ensure the new names are unique and capture the essence of the component and sub-component entity action as mapped in output of Step 8. Do not number the components in this output. Print the output in json format with title ==renamed_component_entities==. The json ==renamed_component_entities==will be in this format:\n{"renamed_component_entities": [ {"claims_group_number":...., "Component/Sub-component":..., "Renaming required(Y/N)": ..., "Renamed Component/Sub-component":...}, ..]}. Do not print process in the output.\n\nStep 11: Number the system, component and sub-component from field  Component/Sub-component for each claim group from json ==renamed_component_entities==, in an unique numbering series with increment of 2 for each component as follows - if the system is numbered 500, the component should be numbered 502 and it\'s sub-component should be numbered 502-a, 502-b etc. The next component will be numbered 504 and it’s sub-component will be numbered 504-a, 504-b etc. Print the output json format with title ==component_sub-component==. The json ==component_sub-component== will be in this format:\n{"component_sub-component": [{"claims_group_number":...., "Component type - system/component/sub-component":..., "system/component/sub-component number": "...", "system/component/sub-component name":..., "explanation":..., "entity_claim":..., "entities_inv":..., "claim numbers":...}, ..]}. Do not print process in the output.\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(352,2,46,E'block_diagram_common',E'user',E'Claims: ####{{claims}}####\nCurrent Invention: ####{{invention}}####\nentity_actions_rewritten: ####{{entity_actions_rewritten}}####',NULL,E'{"project": ["claims", "invention", "entity_actions_rewritten"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(353,3,46,E'block_diagram_common',E'user',E'Step 5, Step 5.1',NULL,NULL,E'{"project": ["block_diagram_claim_nums"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(354,4,46,E'block_diagram_common',E'user',E'Step 6',NULL,NULL,E'{"project": []}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(355,5,46,E'block_diagram_common',E'user',E'Step 7',NULL,NULL,E'{"project": []}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(356,6,46,E'block_diagram_common',E'user',E'Step 8, Step 8.1',NULL,NULL,E'{"project": ["block_diagram_common"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,TRUE,E'json'),
(357,7,46,E'block_diagram_common',E'user',E'Step 9',NULL,NULL,E'{"project": ["block_diagram_check"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(358,8,46,E'block_diagram_common',E'user',E'Step 10',NULL,NULL,E'{"project": []}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(359,9,46,E'block_diagram_common',E'user',E'Step 11',NULL,NULL,E'{"project": ["block_diagram_common"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,TRUE,E'json'),
(360,1,45,E'flowchart_common',E'system',E'I am providing you the following inputs to perform steps 5 to 10. \n####Claims####\n####Current Invention####\n####entity_actions_rewritten####in json format\n\nStep 5: An independent claim does not reference any other claim. However, a dependent claim always references another claim on which it depends. Using the above logic do the following: \na) Identify all the method type independent and dependent claims from the text ####Claims#### based on the preamble of the claims only. If there are no method claims, output no method claims.\nb) Map the dependency between the independent claim and/or all the method dependent claims that directly or indirectly reference it in the same claim group. Also, map the dependency between the dependent claims in the same claim group. For instance, if claim 1 is independent and claims 2 and 3 are directly dependent on claim 1, they should be grouped in the same claim group. If there are further dependent claims such as claim 4 that depend on dependent claim 3, and dependent claim 5 that depends on dependent claim 4, they should also be included in the group of claim 1, as they indirectly reference it. Even if there is no dependent claim for an independent claim it should be classified into a separate group.\nc) No two independent claims can be grouped in the same claim group. \nd) Only the method type claims(if any) must be referenced in the output.\nPrint the output in a json format. \nPrint the json ==claim_groups== in this format:\n{"claim_groups": [ { "claims_group_number":..., "Method_independent_claim": ...,  "Method_dependent_claim":....}, ..]}. Ensure no dependent claim is considered as a distinct claim_group. Do not print the process in the output.\n\nStep 5.1: Rerun the step till each method claim(independent and/or dependent) is referenced in json claim_groups. Do not print output for this step. \n\nStep 6:  For the claims identified from the output of step 5, use the entity actions from field entity_action_claim from json ####entity_actions_rewritten#### to identify which dependent claim depends on which entity action of the independent claim or the entity action in other dependent claims in context of text ####Claims####. Provide the mapping between the dependent claims and the claim entity actions of the independent claim or the entity actions of other dependent claims on which it depends. Output format: Dependent claim --> Independent claim --> reason etc. \nPrint the json ==claim_dependency== in this format:\n{"claim_dependency": [{"claims_group_number":..., "dependent_claim": ..., "independent_claim": ..., "reason": ...}, ...]}\n\nStep 7: a)Identify all the main steps/entity actions for all the claims for each claim group from field claims_group_number from json ==claim_groups==, using the json claim_dependency  that occur in a logical sequence to accomplish the method in context of all the claims from Step 5 and the ####current invention####. b)  Identify all the the sub-steps/parallel steps/entity actions that are optional/additional details for the main steps, if available,  to accomplish the method in context of claims from json ==claim_groups==. c) Ensure all the claims for each claim group from json ==claim_groups== are referred in Step 7 output. Number the step and sub-step, in an even numbering series with increment of 2 for each step, as follows - if step number is 100, it\'s sub-step number will be 100-a, 100-b, for step 102 the sub-step will be 102-a, 102-b etc. Use unique numbering series for each claim group. d) Print the output in a json format with title: ==Steps_sub-steps== where every step/ sub-step is in a separate row. The output json ==Steps_sub-steps== will contain the following fields: claims_group_number, Step/Sub-Step type, Step/Sub-Step number, explanation quote from text ####claims####, claim number, entity_claim(entity_numerical_identifier) and entities_inv.\nPrint the json ==Steps_sub-steps== in this format:\n{"Steps_sub-steps": [ { "claims_group_number":..., "Step/Sub-Step type":..., "Step/Sub-Step number": ..., "explanation quote from text ####claims####":..., "claim number":..., "entity_claim":..., "entity_numerical_identifier":..., "entities_inv":...}, ..]}. Do not print process in the output.\n\nStep 7.1: Rerun step 7 till all the claims from field independent_claim and from field dependent_claims for each claim group from json ==claim_groups== are referred in the output.\n\nStep 8: Rewrite step 7 by doing the following:\na) keep the step and sub-step numbers the same\nb) Re-write the explanation from "explanation quote from text ####Claims####" in a concise form without changing the technical language/vocabulary or alter any of the numerical attributes, specific properties (including physical properties such as state, texture, etc. and particular examples), specific quantities details/parameters/definitions in context of text ####Claims####.\nPrint the output of this step in json format with title ==Steps_sub-steps Rewrite== The json ==Steps_sub-steps Rewrite== will have the following fieds: claims_group_number, Step/Sub-Step number, explanation, claim number. \nPrint the json ==Steps_sub-steps Rewrite== in this format:\n{"Steps_sub-steps Rewrite": [ {"claims_group_number":..., "Step/Sub-Step type":..., "Step/Sub-Step number":..., "explanation": ..., "claim number":...}, ..]}. Do not print process in the output.\n\nStep 9: Identify all the decision making steps using field explanation for each step/sub-step from field  Step/Sub-Step number from json Steps_sub-steps Rewrite. Identify the decision making steps for each claim group from field claims_group_number.  Print the output of this step in json format with title ==decision_steps==. Print the json ==decision_steps== in this format:\n{"decision_steps": [ {"claims_group_number":..., "Decision step":...}, ..]}. Do not print process in the output.\n\nStep 10: Identity and list all the entities from field \'entities_inv\' from json ####entity_actions_rewritten#### that are not directly mentioned in the claims but are related to the broader context of the invention or the application of the claimed method. Quote them from field \'entities_inv\' as is from json ####entity_actions_rewritten####. Print output in json format with title ==additional_entities_to_describe==. The json ==additional_entities_to_describe==will have the field entities_inv_addl. Print the json ==additional_entities_to_describe== in this format:\n{"additional_entities_to_describe": [ { "entities_inv_addl":...}, ..]}. Do not print process in the output.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,596,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(361,2,45,E'flowchart_common',E'user',E'Claims: ####{{claims}}####\nCurrent Invention: ####{{invention}}####\nentity_actions_rewritten: ####{{entity_actions_rewritten}}####',NULL,E'{"project": ["claims", "invention", "entity_actions_rewritten"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(362,3,45,E'flowchart_common',E'user',E'Step 5, Step 5.1',NULL,NULL,E'{"project": ["flowchart_claim_nums"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(363,4,45,E'flowchart_common',E'user',E'Step 6',NULL,NULL,E'{"project": ["claim_dependency"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(364,5,45,E'flowchart_common',E'user',E'Step 7, Step 7.1',NULL,NULL,E'{"project": ["Steps_sub-steps"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(365,6,45,E'flowchart_common',E'user',E'Step 8',NULL,NULL,E'{"project": ["flowchart_common"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4056,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(366,7,45,E'flowchart_common',E'user',E'Step 9',NULL,NULL,E'{"project": ["flowchart_decision_step"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(367,8,45,E'flowchart_common',E'user',E'Step 10',NULL,NULL,E'{"project": ["additional_entities_to_describe"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(368,1,49,E'flowchart_description',E'system',E'I am giving you the following inputs to write a detailed explanation for the Step and sub-steps :\n1. ####Claims####\n2. ####Current invention####\n3. ####steps_sub-steps#### \n4. ####entity_actions_rewritten#### in json format\n5. ####entity_attributes_rewritten#### in json format\n\n\nStep 1: Choose the step {{step_num}} and all its sub-steps (if any) from ####steps_sub-steps#### for the explanation. Define all the entity actions pertaining to all entities for the chosen steps and its sub-steps from json ####steps_sub-steps#### by referencing entity actions from json ####entity_actions_rewritten####. The definitions must include what the entity actions are in the real world. They must further include all details of all the entities involved from field entities_claim and from field entities from json ####entity_attributes_rewritten###. In this explanation, quote/cite all the attributes/details/definitions/parameters/mechanism/structure/working/properties/mathematical construct/metrics/measurements/uses/other embodiments of all the entities involved from field specific_attributes_claims,  from field all invention attributes and from field additional_attributes_invention from json ####entity_attributes_rewritten#### without changing the language. \nInclude implicit entities/steps/working/components/parts/conditions/ranges that will explain all the entity actions of/by/on the entities involved for the chosen step and all its sub-steps only so that a technical expert can understand the entity actions of all entities in the chosen step and sub-step without having to make any assumptions.  Reference chosen step and all its sub-step numbers from ####steps_sub-steps#### in the explanation without using the word step or sub-step. Do not repeat the step in the output. \n\nStep 2: Ensure that the explanation from step 1 is only written for the chosen step and all its sub-steps. For the chosen step and all its sub-steps, ensure the explanation from step 1 details the entity actions from ####entity_action_rewritten#### and include all the the entity attributes from json ####entity_attributes_rewritten#### and json  ####missing_attributes_invention#### without changing the language. Ensure the explanation is written in a paragraph format by referencing the step numbers from ####steps_sub-steps####. Ensure the chosen step and all its sub-steps are numbered from ####steps_sub-steps#### in the explanation. Step 2 is only to ensure the proper running of step 1 and should not print an output. Output with header ==Explanation Step {{step_num}}==',NULL,E'{"project": ["flowchart_main_element_nums"]}',NULL,NULL,NULL,E'Start',NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(369,2,49,E'flowchart_description',E'user',E'Claims: ####{{claims}}####Current invention: ####{{invention}}####Steps_sub-steps: ####{{element_explanations}}####entity_actions_rewritten: ####{{entity_actions_rewritten}}####entity_attributes_rewritten: ####{{entity_attributes_rewritten}}####',NULL,E'{"project": ["claims", "invention", "element_explanations", "entity_actions_rewritten", "entity_attributes_rewritten"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(370,3,49,E'flowchart_description',E'user',E'Step 1, Step 2',NULL,NULL,E'{"project": ["flowchart_description"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,TRUE,E'text'),
(373,6,49,E'flowchart_description',E'system',E'I am giving you the following inputs to write a detailed explanation\n1. ####Current invention####\n2. ####entity_attributes_invention#### in json format\n3.####additional_entities_to_describe#### in json format \n\nStep 1: From the input json ####additional_entities_to_describe####, verify that the field entities_inv_addl has any data. If this condition is satisfied, indicating that the field entities_inv_addl has some data, then proceed to step 2. Output in json format with title: describe_additional_entities with fields \nexp - explain the condition\nflag - true/false based on is the condition. Output in json format as{"entities_inv_addl": {"exp": ..., "flag": ...}}\n\nStep 2: Co-relate the entities from field entities_inv_addl from json ####additional_entities_to_describe#### with the field entities_inv from json ####entity_attributes_invention####.\nThe co-relation should be done by going through field entities from json ####entity_attributes_invention#### across the entire field serial number from json ####entity_attributes_invention####. Print the output in json format with title -==a==. The json ==a== contains following fields  entity, serial_number. Print the json ==a== in this format:\n{"a": [ { "entity":..., "serial_number":...}, ..]}. Do not print process in the output.\n\nStep 3: Quote the entire text from field all_invention_attributes from json ####entity_attributes_invention#### for the entities from field entity from json "a" from step 2 by doing the following:\na) Co-relate the entities from field entities_inv_addl from json ####additional_entities_to_describe#### with the field entities_inv from json ####entity_attributes_invention####.\nThe co-relation should be done by going through field entities from json ####entity_attributes_invention#### across the entire field serial number from json ####entity_attributes_invention####. Do not print output. \nb) after co-relation, identify the text associated with the entity from field entities_inv from field all_invention_attributes from json ####entity_attributes_invention####.Do not print output. c) After the text identification, quote and print the entire text from field all_invention_attributes from json ####entity_attributes_invention#### in a paragraph format in the output. Do not change the technical language and do not use  words like "serial number" in the output. Do not repeat the step in the output.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(374,7,49,E'flowchart_description',E'user',E'Current Invention: ####{{invention}}####additional_entities_to_describe: ####{{additional_entities_to_describe}}####\nentity_attributes_invention: ####{{total_attributes_invention}}####',NULL,E'{"project": ["additional_entities_to_describe", "invention", "total_attributes_invention"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(375,8,49,E'flowchart_description',E'user',E'Step 1',NULL,NULL,E'{"project": ["additional_entities_flag"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(376,9,49,E'flowchart_description',E'user',E'Step 2',NULL,NULL,E'{"project": []}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(377,10,49,E'flowchart_description',E'user',E'Step 3',NULL,NULL,E'{"project": ["flowchart_description"]}',NULL,NULL,E'End',TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(378,1,47,E'flowchart_diagram',E'system',E'Step 15: Provide the mermaid script/syntax for all steps and sub-steps/parallel steps for each claim group from field claims_group_number using json Steps_sub-steps Rewrite by doing the following: For the mermaid script/syntax, understand the output of all steps and sub-steps/parallel steps from ==Steps_sub-steps Rewrite== in context of ==Decision_step==. ==Decision_step== identifies the decision making step. Using all the details of all the steps and sub-steps/parallel steps from ==Steps_sub-steps Rewrite== and decision making step from ==Decision_step==, identify nodes, conditions (if any), and different links/paths for each claim group. Do not print output for this step.\n\nStep 16: Choose the layout for output from Step 15. Use graph TB for a top-down layout or graph LR for a left-right layout. Do not print output for this step.\n\nStep 17: Define the nodes for output from Step 15. Use square brackets for regular nodes e.g., 100["Node A"].  Use curly braces for decision nodes e.g., 102{"Condition B"}. Treat "If" condition nodes as decision nodes. Do not print output for this step.\n\nStep 18: For the Mermaid script/syntax from step 15 define the links/paths between nodes from Step 17 using -->. To add text to the links/paths, use |Link text| for each claim group. For multiple links/paths between nodes, define each link separately. For decision making link/path, use appropriate messages to handle yes/no cases. For example, a decision node should have two separate links/paths with messages as "yes" and "no". Do not print output for this step.\n\nStep 19:Review and adjust the Mermaid script/syntax for each claim group from field claims_group_number from json ==Steps_sub-steps Rewrite==, as needed. Refer the example given below for following the style of the mermaid. Print the output for this step.\n\nmermaid\nCopy code\ngraph TB\n100["Determine an initial eye strain context for a user wearing a VR headset."]\n102{"Recognize a User Interface (UI) adaptation."}\n104["Establish the intensity of the UI adaptation."]\n106["Display modified VR content by applying the identified UI adaptation."]\n108["Assess an updated eye strain context."]\n110{"If the updated eye strain context indicates a decrease in eye strain."}\n112["Modify the priority weight for the UI adaptation."]\n114["Refresh a user\'s profile with the UI adaptation, its intensity, and the modified priority weight."]\n100 --> 102\n102 -- Yes --> 104\n104 --> 106\n106 --> 108\n108 --> 110\n110 -- Yes --> 112\n112 --> 114\n110 -- No --> 102\n\n\nStep 20:  Confirm that the yes and no condition from the decision making step from ==Decision_step== has already been considered in the output of Step 19. If no, then re-generate the output from Step 19. Do not print output for this step.\n\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(379,2,47,E'flowchart_diagram',E'user',E'Steps_sub-steps: ####{{element_explanations}}####Decision_step: ####{{decision_steps}}####',NULL,E'{"project": ["element_explanations", "decision_steps"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(380,3,47,E'flowchart_diagram',E'user',E'Step 15, Step 16, Step 17, Step 18, Step 19, Step 20',NULL,NULL,E'{"project": []}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(381,4,47,E'flowchart_diagram',E'user',E'Step 22: Use the output from step 19 to generate one mermaid for each claim group. For each claim group, the mermaid will contain all the steps without the sub-steps, which together encompass the method in context of ==Steps_sub-steps Rewrite== and ==Decision_step==. Steps can be identified from their whole number whereas sub-steps can be identified by the whole number hyphenated with an alphabet. Each mermaid in a claim group must be numbered as Fig. 1.  For each claim group follow a unique number for the mermaids. Do not print the process in the output. Print the output in json format: \n{"main_mermaids": [{"claims_group_number":..., "main_mermaid_number": ..., "mermaid": "mermaid script/syntax"...}, ....]}\n\nSample Mermaid:\ngraph TB\n100["Determine an initial eye strain context for a user wearing a VR headset."]\n102{"Recognize a User Interface (UI) adaptation."}\n104["Establish the intensity of the UI adaptation."]\n106["Display modified VR content by applying the identified UI adaptation."]\n108["Assess an updated eye strain context."]\n110{"If the updated eye strain context indicates a decrease in eye strain."}\n112["Modify the priority weight for the UI adaptation."]\n114["Refresh a user\'s profile with the UI adaptation, its intensity, and the modified priority weight."]\n100 --> 102\n102 -- Yes --> 104\n104 --> 106\n106 --> 108\n108 --> 110\n110 -- Yes --> 112\n112 --> 114\n110 -- No --> 102',NULL,NULL,E'{"project": ["mermaid"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(382,5,47,E'flowchart_diagram',E'user',E'Step 25: Split the mermaids from Step 19, for each claim group, into multiple mermaids based on the sub-steps grouping where each sub-step group contains a step and it\'s respective sub-step from ==Steps_sub-steps Rewrite==. For any step with sub-step in each claim group from ==Steps_sub-steps Rewrite==, ensure that the mermaid is made only for the step and all it\'s sub-steps. Using ==Steps_sub-steps Rewrite==, avoid mermaids in Step 25 for steps that do not contain sub-steps. Ensure each of the mermaid splits are meaningful in context of ==Steps_sub-steps Rewrite== and ==Decision_step==. Each mermaid in a claim group must be numbered as Fig. 1A, Fig. 1B, etc. For each claim group follow a unique number for the mermaids. Print the output in json format: {"mermaids": [{"claims_group_number":..., "sub_mermaid_number":..., "mermaid" : "mermaid script/syntax ..."}, ....]}. Do not repeat the step in the output. \n\nSample Mermaid:\ngraph TB\n100["Determine an initial eye strain context for a user wearing a VR headset."]\n102{"Recognize a User Interface (UI) adaptation."}\n104["Establish the intensity of the UI adaptation."]\n106["Display modified VR content by applying the identified UI adaptation."]\n108["Assess an updated eye strain context."]\n110{"If the updated eye strain context indicates a decrease in eye strain."}\n112["Modify the priority weight for the UI adaptation."]\n114["Refresh a user\'s profile with the UI adaptation, its intensity, and the modified priority weight."]\n100 --> 102\n102 -- Yes --> 104\n104 --> 106\n106 --> 108\n108 --> 110\n110 -- Yes --> 112\n112 --> 114\n110 -- No --> 102',NULL,NULL,E'{"project": ["mermaids"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(383,6,47,E'flowchart_diagram',E'system',E'Step 23: Using the output of step 22, identify the goal of the steps for each mermaid from field main_mermaid_number for each claim group from field claims_group_number from json main_mermaids in fewer than 20 words. Print the output in json format: {"Goal_claim_group": [{"Claims_group number":..., "main_mermaid_number":..., "goal..."},...]}\n\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(384,7,47,E'flowchart_diagram',E'user',E'mermaid: ####{{mermaid}}####mermaids: ####{{mermaids}}####',NULL,E'{"project": ["mermaid", "mermaids"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(385,8,47,E'flowchart_diagram',E'user',E'Step 23',NULL,NULL,E'{"project": []}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(386,9,47,E'flowchart_diagram',E'user',E'Step 24: Generate a brief description for each mermaid from field main_mermaid_number for each claim group using the goal from field goal from json Goal_claim_group in 1 line without using the word claim group. Print the output in json format: {"main_breif_descriptions": [{"Claims_group_number":..., "main_mermaid_number": "...", "brief_description": ...}]}\nConsider the writing style of sample given below:\n\nFIG. 1 illustrates, in a flowchart, operations for using a user profile in accordance with certain embodiments. \n\nBrief Description;',NULL,NULL,E'{"project": ["breif_description"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(387,10,47,E'flowchart_diagram',E'user',E'Step 26: Identify the goal of the steps for each mermaid from field sub_mermaid_number for each claim group separately from json {mermaids} in fewer than 20 words. Print the output in json format {"Goal_claim_group_mermaids": [{"Claims_group number":..., "sub_mermaid_number":..., "goal..."},...]}',NULL,NULL,E'{"project": []}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(388,11,47,E'flowchart_diagram',E'user',E'Step 27: Generate a brief description using the goal from field goal for each mermaid from field sub_mermaid_number for each claim group from json Goal_claim_group_mermaids in 1 line without using the word claim group. Print the output in json format:\n{"breif_descriptions": [{"Claims_group_number":..., "sub_mermaid_number": "...", "brief_description": ...}]}\n\n\nConsider the writing style of sample given below:\n\nFIG. 1 illustrates, in a flowchart, operations for using a user profile in accordance with certain embodiments. \n\nBrief Description;',NULL,NULL,E'{"project": ["breif_descriptions"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(389,1,48,E'block_diagram_description',E'system',E'I am giving you the following inputs to write a detailed explanation for the component and its sub-components:\n1. ####Claims####\n2. ####Current invention####\n3. ####components_entities#### in json format\n4. ####entity_actions_rewritten#### in json format\n5. ####entity_attributes_rewritten#### in json format\n\nStep 1: Choose the component {{component_num}} and all Sub-components for component {{component_num}} from ####components_entities#### for the explanation. Please provide a detailed explanation of the chosen Component and all of its sub-components from the text ####components_entities####. Reference/Quote the entities and their numbers either from field entity_numerical_identifier from json ####entity_actions_rewritten#### or from field system/component/sub-component number from json ####components_entities#### if available.  For example Device (10,40), Object (15, 45). The explanation should include the following points:\n\na) Introduce chosen component  and its significance\n\nb) Define and explain all the entities that comprise the component and its sub-component from ####components_entities#### in context of text ####Claims#### and ####Current Invention####. Quote/cite all the specific numerical attributes, all the specific properties (including physical properties such as state, texture, etc. and particular examples), all the specific quantities/number of the entity/entites, all alternatives and all embodiments/uses/applications for all the entities from ####components_entities#### by referencing the entity attributes from field specific_attributes_claims,  from field all invention attributes and from field additional_attributes_invention from json ####entity_attributes_rewritten#### and explain how they contribute to the component\'s function. Cite/quote all the entity attributes from field specific_attributes_claims,  from field all invention attributes and from field additional_attributes_invention from json ####entity_attributes_rewritten#### without generalising/changing the language of the entity attributes in the explanation. Avoid use of quotations in the explanation.\n\nc) Use the mapping between entities from the field entity_claim and entities from the invention from the field entity_invention from the json ####entity_actions_rewritten#### to explain all the alternative manifestations of the entities in context of ####current invention#### and ####claims####. Do not include the column names or headers in the explanation. \n\nDo not use the word component or sub-component in the explanation, instead use the component/sub-component name while explaining about it. Do not refer to words like "entity", "entities", "entity action", "crucial", "critical" etc. Just state facts from the inputs provided and avoid use of adjectives in the explanation. Avoid use of quotations in the explanation.\nDo not reference claim numbers from field claim_number from json ####entity_actions_rewritten#### in the explanation. Output format: ==introduction_component {{component_num}}===\n\nStep 2: Re-run step 1 till \na) all the entities are cited with their numbers either from field entity_numerical_identifier from json ####entity_actions_rewritten#### or from field system/component/sub-component number from json ####components_entities#### in the explanation if available - for example Device (10,40), Object (15, 45).\nb) Cite/quote all the entity attributes from field specific_attributes_claims,  from field all invention attributes and from field additional_attributes_invention from json ####entity_attributes_rewritten####.\nc) no claim numbers are referenced from field claim_number from json ####entity_actions_rewritten#### \nd) words like "entity", "entities", "entity action", "crucial", "critical" etc are not used in the explanation',NULL,E'{"project": ["flowchart_main_element_nums"]}',NULL,NULL,NULL,E'Start',NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(390,2,48,E'block_diagram_description',E'user',E'Claims: ####{{claims}}####Current invention: ####{{invention}}####components_entities: ####{{element_explanations}}####entity_actions_rewritten: ####{{entity_actions_rewritten}}####entity_attributes_rewritten: ####{{entity_attributes_rewritten}}####',NULL,E'{"project": ["claims", "invention", "element_explanations", "entity_actions_rewritten", "entity_attributes_rewritten"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(391,3,48,E'block_diagram_description',E'user',E'Step 1, Step 2',NULL,NULL,E'{"project": ["block_diagram_description"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(392,4,48,E'block_diagram_description',E'user',E'Explain the Working of the chosen component and it\'s sub-component above by referencing text ####components_entities#### with the json ####entity_action_rewritten####. Ensure that the working/entity actions of the component and sub-component is structured coherently, with each entity action explanation flowing logically into the next. The language should be technical yet clear, catering to a professional audience with the aim of providing a thorough understanding of the component\'s workings. :\n(a) Reference, define and describe in detail all the entity actions associated with all the entities of the chosen component and its sub-components from text ####components_entities#### by mapping component entities with the corresponding entities from json ####entity_action_rewritten####so that a technical person can understand without making any assumptions.  (do not refer to the entity action explicitly)\n(b) For each entity action, explain its nature (what), purpose (why), context (when and under what conditions), and method (how). \n(c) Use your knowledge base to include any implicit entities, components, actions, or details not explicitly mentioned in field entity_action_claim or in field entity_action_invention in json #### entity_action_rewritten#### but crucial for a complete understanding of all the entity actions and how they flow logically into one another for the working of the system. \n\nMake sure to all the entities are cited with  their numbers either from field entity_numerical_identifier from json ####entity_actions_rewritten#### or from field system/component/sub-component number from json ####components_entities#### associated with each component/sub-component in the explanation if the number is available.- for example Device (10,40), Object (15, 45). Do not number entities in absence of entity_numerical_identifier or refer to words like "entity", "entities", "entity action", "crucial", "critical" etc. Do not repeat anything from the explanation that explains the entities comprising the component and sub-component from above. Output format: ==explanation_component {{component_num}}==',NULL,E'{"project": ["flowchart_main_element_nums"]}',E'{"project": ["block_diagram_description"]}',NULL,NULL,E'End',TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(395,1,51,E'block_diagram',E'system',E'Step 16: Provide the mermaid script/syntax for each claim group from field claims_group_number from json component_sub-component. Do not print output for this step.\n\nStep 17: Choose the layout for output from step 16. Use graph TB for a top-down layout or graph LR for a left-right layout. Do not print output for this step.\n\nStep 18: Define the nodes for each claim group for the output from step 16. Use square brackets for regular nodes (e.g., 200["Host System"]). Do not print output for this step.\n\nStep 19: For the Mermaid script/syntax from step 16, use the word "subgraph" to start a subgraph and the word "end" to close it. Define all nodes that belong to the subgraph. Define the links for  all the nodes at the end. Do not print output for this step.\n\nStep 20: Review and adjust the Mermaid script/syntax for each claim group as needed. Refer the example given below for following the style of the mermaid. This sample is for reference only, do not follow numbering of the sample given below. Keep the numbering same as given in the json component_sub-component and also, do not mention claim numbers in the mermaid codes. \n\nFor example, \ngraph LR\nsubgraph 200["Host System"]\n  210["Host Interface Unit"]\nend\nsubgraph 204["Memory Controller"]\n  212["Memory Interface Unit"]\n  214["Processing Unit"]\nend\nsubgraph 206["Non-Volatile Memory"]\n  202["Memory Devices"]\n  208["Host Memory"]\n  216["Information Units"]\nend\n200 --- 204\n204 --- 206\nPrint the output for this step in json format with title ==mermaids==. Do not print process/step in the output.\n\nStep 22: Ensure that a valid mermaid syntax has been generated for each claim group in step 20.  Do not print the output for this step.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(396,2,51,E'block_diagram',E'user',E'component_sub-component:: ####{{element_explanations}}####',NULL,E'{"project": ["element_explanations"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(397,3,51,E'block_diagram',E'user',E'Step 16, Step 17, Step 18, Step 19, Step 20, Step 22',NULL,NULL,E'{"project": []}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(398,4,51,E'block_diagram',E'user',E'Step 26: Use the output from step 20 to generate one mermaid for each claim group for all the main components, without the sub-components, which together enable/manifest all the entity actions from json component_sub-component. Each mermaid in a claim group must be numbered from Fig. 5. For each claim group follow a unique number for the mermaids. Print the output in json format: \n{"main_mermaids": [{"claims_group_number":..., "main_mermaid_number": ..., "mermaid": "mermaid script/syntax"...}, ....]}\n',NULL,NULL,E'{"project": ["mermaid"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(399,5,51,E'block_diagram',E'user',E'Step 27: Using the output of step 26, identify the goal of the steps for each mermaid from field main_mermaid_number for each claim group from field claims_group_number from json main_mermaids in fewer than 20 words. Print the output in json format: {"Goal_claim_group": [{"Claims_group number":..., "main_mermaid_number":..., "goal..."},...]}\n',NULL,NULL,E'{"project": []}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(400,6,51,E'block_diagram',E'user',E'Step 28: Generate a brief description for each mermaid from field main_mermaid_number for each claim group using the goal from field goal from json Goal_claim_group in 1 line without using the word claim group. Print the output in json format: {"main_breif_descriptions": [{"Claims_group_number":..., "main_mermaid_number": "...", "brief_description": ...}]}\nConsider the writing style of sample given below:\n\nFIG. 5 illustrates, in a block diagram, a computing environment of a VR headset in accordance with certain embodiments.\n\nBrief Description;',NULL,NULL,E'{"project": ["breif_description"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(401,7,51,E'block_diagram',E'user',E'Step 29: Split the mermaid from Step 20 for each claim group  into multiple mermaids based on the main components-sub-components grouping. For any main component with sub-component from json component_sub-component, ensure that the mermaid is made for that main component and all it\'s sub-components. Avoid mermaids in Step 29 that do not contain sub-components. Also, ensure each of the mermaid splits are meaningful in context of json component_sub-component. Each mermaid in a claim group must be numbered as Fig. 5A, Fig. 5B, etc. For each claim group follow a unique number for the mermaids. Print the output in json format: {"mermaids": [{"claims_group_number":..., "sub_mermaid_number":..., "mermaid" : "mermaid script/syntax ..."}, ....]}. Do not repeat the step in the output. ',NULL,NULL,E'{"project": ["mermaids"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(402,8,51,E'block_diagram',E'user',E' Step 30: Identify the goal of the steps for each mermaid from field sub_mermaid_number for each claim group separately from json {mermaids} in fewer than 20 words. Print the output in json format {"Goal_claim_group_mermaids": [{"Claims_group number":..., "sub_mermaid_number":..., "goal..."},...]}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(403,9,51,E'block_diagram',E'user',E'Step 31: Generate a brief description using the goal from field goal for each mermaid from field sub_mermaid_number for each claim group from json Goal_claim_group_mermaids in 1 line without using the word claim group. Print the output in json format:\n{"breif_descriptions": [{"Claims_group_number":..., "sub_mermaid_number": "...", "brief_description": ...}]}\n\n\nConsider the writing style of sample given below:\n\nFIG. 1 illustrates, in a flowchart, operations for using a user profile in accordance with certain embodiments. \n\nBrief Description;',NULL,NULL,E'{"project": ["breif_descriptions"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(404,1,52,E'extra_diagram_common',E'system',E'I have provided following inputs to perform steps 5 to 7\n####Claims####\n####Current Invention####\n####entity_actions_rewritten####in json format\n\n\nStep 5:  Identify all the respective apparatus/device/composition/formulation/product/machine/medium type independent and dependent claims from the text ####Claims#### based on the preamble of the claims only. Do not include system claims under any category in the output. Print the output in json format with title ==apparatus/device/composition/formulation/product/machine/medium_Claims==. The json ==apparatus/device/composition/formulation/product/machine/medium_Claims== will be in this format \n{"claim_numbers":{"apparatus_claims": [ ...],"device_claims": [...],"composition_claims": [ ...],"formulation_claims": [...],"product_claims": [...],"machine_claims": [...], "medium_claims":[....]}}. Do not print the process in the output. \n\nExamples of medium type claims is as below:\nMedium type claims: A non-transitory computer readable medium for storing computer instructions.....\n\nStep 5.1: Rerun the step till all the apparatus/device/composition/formulation/product/machine/medium (both independent and dependent) claims are referenced in json claim_groups. Do not include the system claims under any category in the output. Do not print output for this step.\n\n\nStep 6: a) Co-relate only the identified claims from field claim_numbers from json apparatus/device/composition/formulation/product/machine/medium_Claims with the field claim_number from json #### entity_actions_rewritten####. \nb) After co-relation, only for the co-related claim numbers from field claim_number from json #### entity_actions_rewritten#### identify all the entities from field entity_claim and entities_inv from json #### entity_actions_rewritten####, \nC) Then group all the identified entities from field entity_claim and from field entities_inv from json  #### entity_actions_rewritten#### into logical groups. The logical groups must be made on the basis similarity/commonality in entity actions from either a) field entity_action_claim or from b) field entity_action_invention. These logical groups should be grouped such that when working together they manifest the invention from text ####Claims#### and text ####Current invention####. Ensure the logical groups are such that the entities from entitiy_claim and entities_inv are represented/written/referenced only in one row/sr. no. Ensure that entities from both field entity_claim and from field entities_inv are quoted/cited in the column grouped entities in the output. \nPrint the json ==grouped entities== in this format: {"grouped entities": [ { "Sr.no":...., "grouped entities":[.,.,.,], "entity actions": ...,  "entity actions purpose":..., "Claim number":....}, ..]}\n\n\nStep 7: Re-Group all the entities from field  Grouped Entities from json ==grouped entities== into logical groups such that all redundancies/overlaps in field grouped entities is avoided. The logical groups from json ==grouped entities== must be regrouped either on the basis of (a) similarity/commonality in entity actions from  field Entity Actions  even if the language of entity actions is different OR (b) Similarity/commonality in purpose of entity actions from field entity actions purpose even if the language is different. These logical groups should be re-grouped such that when working together they manifest the invention from text ####Claims#### and text ####Current invention####. Ensure the logical groups are such that all the entities from field Grouped Entities are represented/written/referenced only in one row/sr. no . Ensure that entities from Grouped Entities are quoted/cited in the field Re-grouped Entities in the output. Print the output in a Json format with title of the json ==component_entities==. The json ==component_entities== must be in \nthis format: {"component_entities": [{ "component/sub-component number": ..., "re-grouped entities":[..., ..., ...], "entity actions": ...,  "entity actions purpose": ...}]}\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(405,2,52,E'extra_diagram_common',E'user',E'Claims:####{{claims}}#### Current invention:\n####{{invention}}####entity_actions_rewritten:\n####{{entity_actions_rewritten}}####',NULL,E'{"project": ["claims", "invention", "entity_actions_rewritten"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(406,3,52,E'extra_diagram_common',E'user',E'Step 5, Step 5.1',NULL,NULL,E'{"project": ["extra_diagram_claim_nums"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(407,4,52,E'extra_diagram_common',E'user',E'Step 6',NULL,NULL,E'{"project": ["claim_dependency"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(408,5,52,E'extra_diagram_common',E'user',E'Step 7',NULL,NULL,E'{"project": ["extra_diagram_common"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(409,1,53,E'extra_description',E'system',E'I am giving you the following inputs to write a detailed explanation for the component and its sub-components:\n1. ####Claims####\n2. ####Current invention####\n3. ####components_entities#### in table format\n4. ####entity_attributes_rewritten#### in json format\n\nStep 1: Choose the component number {{component_num}} from table ####components_entities#### for the explanation. \nThe explanation should be written by following the instructions in a, b and c below:\n\na) Define and explain all the entities for the chosen component number from field Re-grouped Entities from table ####components_entities####. For the definition, Co-relate the entities from field Re-grouped Entities from table ####components_entities#### with the entities from field entities_claim and from field entities_inv from json ####entity_attributes_rewritten#### to identify all their cited attributes. After making the co-relation do the following: Quote/cite all the attributes for all the entities without changing the technical details/language from field 1) specific_attributes_claims and 2) from field all invention attributes and 3) from field additional_attributes_invention and explain how they contribute to the invention from text ####Claims#### and text ####Current invention####. Avoid use of quotations in the explanation.\n\nDo not refer to words like "entity", "entities", "entity action", "crucial", "critical" etc. Just quote facts from the inputs provided and avoid use of adjectives in the explanation. Avoid use of quotations in the explanation.\nOutput format: ==introduction component number {{component_num}}===\n\nStep 2: Re-run step 1 till \na) Quote/cite all the attributes for all the entities without changing the technical details/language from field 1) specific_attributes_claims and 2) from field all invention attributes and 3) from field additional_attributes_invention.\nb) no claim numbers are referenced from field claim_number from json ####entity_actions_rewritten#### \nc) words like "entity", "entities", "entity action", "crucial", "critical" etc are not used in the explanation',NULL,E'{"project": ["flowchart_main_element_nums"]}',NULL,NULL,NULL,E'Start',NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(410,2,53,E'extra_description',E'user',E'Claims:####{{claims}}#### Current invention:\n####{{invention}}####components_entities:\n####{{element_explanations}}####entity_attributes_rewritten:\n####{{entity_attributes_rewritten}}####',NULL,E'{"project": ["claims", "invention", "element_explanations", "entity_attributes_rewritten"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(411,3,53,E'extra_description',E'user',E'Step 1, Step 2',NULL,NULL,E'{"project": ["extra_description"]}',NULL,NULL,E'End',NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,TRUE,E'text'),
(414,13,44,E'regenerate_claim',E'system',E'I am providing you the following inputs:\n####Claims####\n####Current Invention\n####claim_entity_actions###  in json format\n####invention_entity_actions#### in json format \n\nStep 7:  Co-relate the entity actions for each claim from field entity_action_claim from json ####claim_entity_actions#### with the corresponding entity actions from field entity_action_invention from json  ####Invention_entity_actions####.  This is basically reverse mapping claim language of the entity actions in claims from text ####Claims#### with the entity actions as given in the text ####Current Invention####. Print the output of this step in json format with title ==entity_actions_rewritten== where every id_clm  from field id_clm is in a separate row. Print the json ==entity_actions_rewritten== in this format:\n{"entity_actions_rewritten": [ {"id_clm":..., "id_inv":...}, ..]}\n\nStep 7.1: Please continue the process of Step 7 for all the claims referenced from field claim_number from json ####claim_entity_actions####. Ensure the response is generated in one go. \n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(415,14,44,E'regenerate_claim',E'user',E'Claims:####{{claims}}####Current Invention:####{{invention}}####claim_entity_actions:####{{claim_entity_actions}}####invention_entity_actions:####{{entity_action}}####',NULL,E'{"project": ["claims", "invention", "claim_entity_actions", "entity_action"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(416,15,44,E'regenerate_claim',E'user',E'Step 7, Step 7.1',NULL,NULL,E'{"project": ["entity_actions_rewritten"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(417,16,44,E'regenerate_claim',E'system',E'I am providing you the following inputs to compare:\n####invention_entity_actions#### in json format \n####entity_actions_rewritten#### in json format \n\nStep 8: Identify the ids from field id_inv from json ####invention_entity_actions#### that are not correlated with any of the ids from field id_clm from json ####entity_actions_rewritten####. Print output in json format with title ==missing_entity_actions==.  The json ==missing_entity_actions== will contain the following fields: entities_inv, entity_action_invention. Print the json ==missing_entity_actions== in this format:\n{"missing_entity_actions": [ { "id_inv": ..., "purpose":...}, ..]}. Do not print the process in the output.\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(418,17,44,E'regenerate_claim',E'user',E'invention_entity_actions:####{{entity_action}}####entity_actions_rewritten: ####{{entity_actions_rewritten}}####',NULL,E'{"project": ["entity_action", "entity_actions_rewritten"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(419,18,44,E'regenerate_claim',E'user',E'Step 8',NULL,NULL,E'{"project": ["missing_entity_actions"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(420,19,44,E'regenerate_claim',E'system',E'I am providing you the following inputs to co-relate:\n####claim_entity_actions#### in json format \n####missing_entity_actions#### in json format \n\nStep 9: Co-relate the missing id from field id_inv from  json ####missing_entity_actions#### with the most close entity from field entity_claim from json ####claim_entity_actions#### based on it\'s purpose from field purpose. Print the output in json format with title ==missing_entity_action_rewritten==. The json ==missing_entity_action_rewritten== will contain the following fields: id_clm, id_inv.\nPrint the json ==missing_entity_action_rewritten== in this format:\n{"missing_entity_action_rewritten": [ {"id_clm":....,"id_inv": ...}, ..]}. Do not print the process in the output.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(421,20,44,E'regenerate_claim',E'user',E'claim_entity_actions: ####{{claim_entity_actions}}####missing_entity_actions: ####{{missing_entity_actions}}####',NULL,E'{"project": ["claim_entity_actions", "missing_entity_actions"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(422,21,44,E'regenerate_claim',E'user',E'Step 9',NULL,NULL,E'{"project": ["missing_entity_action_rewritten"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(423,22,44,E'regenerate_claim',E'system',E'I am providing you text ####Current Invention#### and ####grouped_entity_invention####. \n\nStep 7: Identify all the specific numerical attributes, specific properties (including physical properties such as state, texture, etc. and particular examples), specific quantities, every/each alternative and every/each embodiment, every/each use and every applications  from text ####Current invention#### associated with each/every entity from field entities_inv from json ####grouped_entity_invention####. Quote the entire paragraph from text ####Current invention#### that describes the entity actions/attributes/properties/uses. Remember, there maybe multiple paragraphs that describes the entity actions/attributes/properties or uses. Some paragraphs may have the explicit reference to the entity and others may have implicit references to the entity.  While quoting from text ####current invention####, do not change the language and quote as is. Print output in json format with title ==specific_attributes_invention==where each attribute is in a separate row.  Print the json ==specific_attributes_invention== in this format:\n{"specific_attributes_invention": [{ "id_inv":..., "specific_attributes_inv": ..., "entities_inv":...}, ..]}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(424,23,44,E'regenerate_claim',E'user',E'Current Invention: ####{{invention}}####\ngrouped_entity_invention: ####{{grouped_entity_invention}}####',NULL,E'{"project": ["invention", "grouped_entity_invention"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(425,24,44,E'regenerate_claim',E'user',E'Step 7',NULL,NULL,E'{"project": ["specific_attributes_invention"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(426,25,44,E'regenerate_claim',E'system',E'I am providing you the following inputs: \n####Current Invention####  as text\n####specific_attributes_invention#### as json. \n\nStep 8: Identify the details from text ####Current Invention#### that are missing from field specific_attributes_inv in json ####specific_attributes_invention#### and include the details in the output.\nPrint the output of this step in json format with title ==additional_attributes_invention== where each attribute is in a separate row. Print the json ==additional_attributes_invention== in this format:\n{"additional_attributes_invention": [ {"additional_attributes_inv": ...}, ..]}. Do not print the process in the output.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(427,26,44,E'regenerate_claim',E'user',E'Current Invention: ####{{invention}}####\nspecific_attributes_invention: ####{{specific_attributes_invention}}####',NULL,E'{"project": ["invention", "specific_attributes_invention"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(428,27,44,E'regenerate_claim',E'user',E'Step 8',NULL,NULL,E'{"project": ["additional_attributes_invention"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(429,28,44,E'regenerate_claim',E'system',E'I am providing you the following inputs: \n####additional_attributes_invention####  as json\n####grouped_entity_invention#### as json. \n\nStep 9: Co-relate each/every additional entity attributes in field additional_attributes_inv from json ####additional_attributes_invention#### with the most appropriate entity from field entities_inv from json ####grouped_entity_invention#### based on the implied use/benefit of the attribute. Print the output of this step in json format with title ==additional_entity_attributes_invention==. Print the json ==additional_entity_attributes_invention== in this format:\n{"additional_entity_attributes_invention": [ {"id_inv": ..., "additional_attributes_inv":...}, ..]}. Do not print process in the output.\n\nStep 9.1: Re-run step 9 till each/every additional entity attribute from field  additional_attributes_invention from json ####additional_attributes_invention#### is correlated with the most appropriate entity from field entities_inv from json ####grouped_entity_invention#### based on the implied use/benefit of the attribute. Do not print process in the output.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(430,29,44,E'regenerate_claim',E'user',E'additional_attributes_invention: ####{{additional_attributes_invention}}####\ngrouped_entity_invention: ####{{grouped_entity_invention}}####',NULL,E'{"project": ["additional_attributes_invention", "grouped_entity_invention"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(431,30,44,E'regenerate_claim',E'user',E'Step 9, Step 9.1',NULL,NULL,E'{"project": ["additional_entity_attributes_invention"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(435,34,44,E'regenerate_claim',E'system',E'I am providing you the following inputs:\n####Claims####\n####Current Invention\n####specific_attributes_claims#### in json format\n####total_attributes_invention#### in json format\nto perform the following steps. \n\nStep 7: Co-relate all the specific attributes for each claim from field specific_attributes_claim from json ####specific_attributes_claims####  with the corresponding related specific attributes from field all_invention_attributes from json  ####total_attributes_invention####.  \n\nPrint the output of this step in json format with title ==entity_attributes_rewritten== where each entity is in a separate row. Print the json ==entity_attributes_rewritten== in this format:\n{"entity_attributes_rewritten": [ {"id_clm": .., "id_inv": ...}, ..]}. Do not print the process in the output.\n\nStep 7.1: Please continue the process of Step 7 for all the claims referenced from field  claim_number from json ####specific_attributes_claims#### in the output. Ensure the response is generated in one go.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt\n-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(436,35,44,E'regenerate_claim',E'user',E'Claims: ####{{claims}}####\nCurrent Invention: ####{{invention}}####\nspecific_attributes_claims: ####{{claim_specific_attributes}}####\ntotal_attributes_invention: ####{{specific_attributes}}####',NULL,E'{"project": ["claims", "invention", "claim_specific_attributes", "specific_attributes"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(437,36,44,E'regenerate_claim',E'user',E'Step 7, Step 7.1',NULL,NULL,E'{"project": ["entity_attributes_rewritten"]}',NULL,NULL,NULL,NULL,NULL,NULL,8192,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'jsonb'),
(438,37,44,E'regenerate_claim',E'system',E'I am providing you the following\ninputs:\n\n####entity_attributes_rewritten#### in json format\n####total_attributes_invention#### in json format\nto perform the following steps. \n\nStep 8: Identify the ids from field id_inv from json ####total_attributes_invention#### that are not correlated\nwith any of the ids from field id_clm in json ####entity_attributes_rewritten####.\nPrint the output of this step in json format\nwith title ==additional_entity_attributes_rewritten==.\nPrint the\njson ==additional_entity_attributes_rewritten== in this\nformat:\n\n{"additional_entity_attributes_rewritten": [ { "id_inv": ..., "additional_attributes_invention":...}, ..]}. Do not\nprint process\nin the output.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(439,38,44,E'regenerate_claim',E'user',E'entity_attributes_rewritten: ####{{entity_attributes_rewritten}}####\ntotal_attributes_invention: ####{{total_attributes_invention}}####',NULL,E'{"project": ["entity_attributes_rewritten", "total_attributes_invention"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(440,39,44,E'regenerate_claim',E'user',E'Step 8',NULL,NULL,E'{"project": ["additional_entity_attributes_rewritten"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(441,40,44,E'regenerate_claim',E'system',E'I am providing you the following\ninputs:\n\n####specific_attributes_claims#### in json format\n####additional_entity_attributes_rewritten#### in json format\nto perform the following steps. \n\n\nStep 9: Co-relate each/every additional entity attributes identified in json ####additional_entity_attributes_rewritten####\nwith the most appropriate entity from field entities_claim from json ####specific_attributes_claims#### based on the implied\nuse/benefit of the attribute.\nPrint the\noutput of this step in json format\nwith title ==missing_entity_attributes_rewritten== where each entity from field entities_inv is in a separate row. The json ==missing_entity_attributes_rewritten== will contain the following\nfields:\nentities_claim, entities_inv,  additional_attributes_invention\nPrint the\njson ==missing_entity_attributes_rewritten== in this\nformat:\n\n{"missing_entity_attributes_rewritten": [ { "id_clm:":..., "id_inv": ..., "additional_attributes_invention":...}, ..]}. Do not\nprint process\nin the output.\n\nStep 9.1: Re-run step 9 till each/every additional entity attribute from field  additional_attributes_invention from json ####additional_entity_attributes_rewritten#### is correlated\nwith the most appropriate entity from field entities_claim from json ####specific_attributes_claims#### based on the implied\nuse/benefit of the attribute. Do not\nprint process in the output.\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(442,41,44,E'regenerate_claim',E'user',E'specific_attributes_claims: ####{{claim_specific_attributes}}####\nadditional_entity_attributes_rewritten: ####{{additional_entity_attributes_rewritten}}####',NULL,E'{"project": ["claim_specific_attributes", "additional_entity_attributes_rewritten"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(443,42,44,E'regenerate_claim',E'user',E'Step 9, Step 9.1',NULL,NULL,E'{"project": ["missing_entity_attributes_rewritten"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(447,46,44,E'regenerate_claim',E'system',E'I am giving you text ####Claims#### to determine type of claims.\n\nStep 1:  Identify all the respective method/system/other claims from the text ####Claims####. All the system claims will be classified as system claims, all the method claims are classified under method claims and all the device/apparatus/product/computer\nprogram product/composition/formulation/machine claims go into others. The output of the claim type should be flagged either as true or as False\nPrint the output in json format with title ==claim_types==. The json ==claim_types== will contain the following field  claim_type (system - True/False, system_claim_numbers, method - True/False, method_claim_numbers, other - True/False), other_claim_numbers. Print the json ==claim_types== in this format:\n{"claim_types": {"method": ..., "method_claim_numbers":[.,.,.], "system": ..., "system_claim_numbers":[.,.,.], "other": ..., "other_claim_numbers":[.,.,.]}}. Do not print the process in the output\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(448,47,44,E'regenerate_claim',E'user',E'Claims: {{claims}}',NULL,E'{"project": ["claims"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(449,48,44,E'regenerate_claim',E'user',E'Step 1',NULL,NULL,E'{"project": ["claim_types"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(450,1,50,E'claim_invention',E'system',E'I have provided you a set of patent claims in text ####claims####. \n\nStep 1: Please write an invention input that covers all the details from all the claims from text ####claims#### explicitly in a paragraph format. It\'s recommended to start with the  independent claim and a detailed summary of it. Independent claim summary must be followed by a detailed explanation of each dependent claim that depends on that independent claim. This process should be repeated till all the embodiments from all the independent and all the dependent claims are covered in the invention input. It is critical to ensure that the invention input covers all the embodiments from all the claims from text ####claims#### in the output. Do not repeat or include claim numbers in the output.Output format: current invention:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(451,2,50,E'claim_invention',E'user',E'Claims:\n####{{claims}}####',NULL,E'{"project": ["claims"]}',E'{"project": ["claims"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(452,1,54,E'total_detailed_description',E'system',E'Aim: to eliminate redundancies/duplications in expressing technical features/technical attributes/properties/quantities/alternatives/embodiments/examples. Your aim is not to shorten/truncate/summarize the input ####total description#### but only to eliminate duplicates/redundancies, while re-writing in a logical flow, by doing the following: \n\nStep 1 : a) Please rewrite the ####total description#### to include \'all\' technical features/technical attributes/properties/quantities/alternatives/embodiments/examples etc.  for each entity only once. Ensure all such details are mentioned only once across the flow chart description/block diagram description or any other descriptions of embodiments. While rewriting, ensure there is no change or generalisation in the technical language, quantities, properties, alternatives, embodiments and logical flow. \nb) In the re-write of the ####Total Description####, do not remove any references to step numbers like 100, 200 etc. or references to component numbers that explain a block diagram. Similarly, do not remove any references to entity identifiers like display (10,40) that identify an entity uniquely. \n\nStep 1.1: a) Do not truncate/shorten/summarize the input ####total description#### but ensure\nall the multiple/repetitive mentions of technical features/technical attributes/properties/quantities/alternatives/embodiments/examples etc of all entities are removed in the output of step 1. b) Do not remove any references to step numbers like 100, 200 etc. or references to component numbers that explain a block diagram in the output of step 1. Similarly, do not remove any references to entity identifiers like display (10,40) that identify an entity uniquely in the output of step 1. Do not print output for this step. ',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(453,2,54,E'total_detailed_description',E'user',E'total description: {{total_description}}\n\n\n',NULL,E'{"project": ["total_description"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(454,3,54,E'total_detailed_description',E'user',E'Step 1, Step 1.1',NULL,NULL,E'{"project": ["total_description"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text');

DELETE FROM prompt.prompt_seq where prompt_seq_id in (317, 321, 324, 423, 441, 447, 360, 361, 351, 352, 404, 455, 456, 457);

INSERT INTO "prompt"."prompt_seq" ("prompt_seq_id", "seq", "prompt_id", "short_name", "role", "instructions", "fun_def", "inputs", "outputs", "created_at", "modified_at", "repeat", "is_stream", "model", "multicalls", "max_tokens", "prompt_actions", "skip_append", "claim_nums", "decision_step", "step_description", "revised_step_description", "claim_component_entities", "claim_component_actions", "output_format") VALUES
(317, 1, 44, 'regenerate_claim', 'system', 'I am providing you text ####claims### to perform the following steps.

Step 3: Find all the entities and their associated numerical identifiers for all the claims from text ####Claims#### in the output. entity_numerical_identifier is a number that identifies the entity uniquely. For example Device (10,40), Object (15, 45). Do not consider claim number, acronyms, percentages or any other textual attribute as numerical identifier for entity_numerical_identifier.  Print output in the json format with title ==entity_claims== where every entity is in a separate row. Print the json ==entity_claims== in this format:
{"entity_claims": [ {"claim_number": .., "entity_claim": ..., "entity_numerical_identifier":..}, ..]}

Step 3.1: Please continue the process of Step 3 to identify all the entities and their associated numerical identifiers for each claim from text ####Claims####. entity_numerical_identifier is a number that identifies the entity uniquely. For example Device (10,40), Object (15, 45). Exclude claim number, acronym, percentage or any other textual attribute as numerical identifier. Ensure all claim numbers from text ####Claims#### are referenced in the output. Do not print output for this step. 

Step 4:  Identify all the entity actions from text ####Claims#### for each/every entity from field entity_claim from json ####entity_claims#### for each/every claim where the entity is referenced from field  claim_number from json entity_claims. Group the entities from field entity_claim if the purpose of their entity actions is the same/similar even if the language of their entity actions is different. id_clm should be numbered as 1,2,3,...etc.
Print the output in json format with title ==claim_entity_actions==.  Print the json ==claim_entity_actions== in this format:
{"claim_entity_actions": [ { "id_clm:":..., "entity_action_claim":..., "purpose":..., "entity_claim": [.,.,.], "entity_numerical_identifier":..., "claim_number":...}, ...]}

Step 4.1: Re-run Step 4 till all the entity actions are identified from text ####Claims#### for each/every entity from field entity_claim from json ####entity_claims####. Ensure to group all entities if the the purpose of their actions is the same. The json Claim_entity_actions should reference all the claim numbers from text ####Claims####. Ensure the response is generated in one go.', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

INSERT INTO "prompt"."prompt_seq" ("prompt_seq_id", "seq", "prompt_id", "short_name", "role", "instructions", "fun_def", "inputs", "outputs", "created_at", "modified_at", "repeat", "is_stream", "model", "multicalls", "max_tokens", "prompt_actions", "skip_append", "claim_nums", "decision_step", "step_description", "revised_step_description", "claim_component_entities", "claim_component_actions", "output_format") VALUES
(321, 5, 44, 'regenerate_claim', 'system', 'I am providing you text ####claims###,  ####entity_claims#### to perform the  steps from  step 5 to 5.1. 

Step 5: Identify all the specific numerical attributes, all the specific properties (including physical properties such as state, texture, etc. and particular examples), all the specific quantities/number of the entity/entites, all alternatives and all embodiments/uses/applications from text ####claims#### associated with each/every entity from field entity_claim for all claims from field claim_number from json ####entity_claims#### and quote from text ####Claims#### in the output. When we quote from text ####claims####, do not change the language and quote as is. id_clm should be numbered as 1,2,3,...etc. Print the output in json format with title ==claim_entity_attributes== where every entity attribute is in a separate row. The entity attribute rows may contain multiple entities in field entities_claim and multiple claims in field claim_numbers in the output if they share the same/similar attribute.  Print the json ==claim_entity_attributes== in this format:
{"claim_entity_attributes": [ {"id_clm":..., "specific_attributes_claim": .., "entities_claim": ..., "Claim_numbers": }, ..]}

Step 5.1: Please continue the process of Step 5 for all the entities from field entity_claim for all claims from field claim_number from json ####entity_claims####. Ensure the response is generated in one go.', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

INSERT INTO "prompt"."prompt_seq" ("prompt_seq_id", "seq", "prompt_id", "short_name", "role", "instructions", "fun_def", "inputs", "outputs", "created_at", "modified_at", "repeat", "is_stream", "model", "multicalls", "max_tokens", "prompt_actions", "skip_append", "claim_nums", "decision_step", "step_description", "revised_step_description", "claim_component_entities", "claim_component_actions", "output_format") VALUES
(324, 8, 44, 'regenerate_claim', 'system', 'I am providing you text ####Current Invention### to perform the  steps from  step 5 to 6. 

Step 5: Identify all the entities from the text ####Current Invention####. Entities are defined as nouns/phrases/parts/components that perform an action to achieve some result. Ensure all the nouns/phrases/parts/components that perform an action or aid any action are captured in the output. Print the output in json format with title ==entity_invention== where each entity is in a separate row. The json ==entity_invention== will contain the following fields: serial_number, entity_inv. Print the json ==entity_invention== in this format:
{"entity_invention": [ {"serial_number": .., "entity_inv": ...}, ..]}

Step 6: Identify all the entity actions from text ####Current Invention#### for each/every the entity from field entity_inv from json entity_invention and determine the purpose of the entity action. Group the entities from field entity_inv if the purpose of their entity actions is the same/similar even if the language of their entity actions is different. id_inv should be numbered as 1,2,3,...etc. Print output in json format with title ==invention_entity_actions== where every entity action corresponding to an entity is in a separate row.   Ensure all the entities from field entity_inv from json ==entity_invention== are grouped in the output. Print the json ==invention_entity_actions== in this format:
{"entity_invention": [ { "id_inv":..., "entity action_invention":..., "purpose":..., "entities_inv": [.,.,.]}, ..]}', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

INSERT INTO "prompt"."prompt_seq" ("prompt_seq_id", "seq", "prompt_id", "short_name", "role", "instructions", "fun_def", "inputs", "outputs", "created_at", "modified_at", "repeat", "is_stream", "model", "multicalls", "max_tokens", "prompt_actions", "skip_append", "claim_nums", "decision_step", "step_description", "revised_step_description", "claim_component_entities", "claim_component_actions", "output_format") VALUES
(423, 22, 44, 'regenerate_claim', 'system', 'I am providing you text ####Current Invention#### and ####grouped_entity_invention####. 

Step 7: Identify all the specific numerical attributes, specific properties (including physical properties such as state, texture, etc. and particular examples), specific quantities, every/each alternative and every/each embodiment, every/each use and every applications  from text ####Current invention#### associated with each/every entity from field entities_inv from json ####grouped_entity_invention####. Quote the entire paragraph from text ####Current invention#### that describes the entity actions/attributes/properties/uses. Remember, there maybe multiple paragraphs that describes the entity actions/attributes/properties or uses. Some paragraphs may have the explicit reference to the entity and others may have implicit references to the entity.  While quoting from text ####current invention####, do not change the language and quote as is. id_inv should be numbered as 1,2,3,...etc. Print output in json format with title ==specific_attributes_invention==where each attribute is in a separate row.  Print the json ==specific_attributes_invention== in this format:
{"specific_attributes_invention": [{ "id_inv":..., "specific_attributes_inv": ..., "entities_inv":...}, ..]}', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

INSERT INTO "prompt"."prompt_seq" ("prompt_seq_id", "seq", "prompt_id", "short_name", "role", "instructions", "fun_def", "inputs", "outputs", "created_at", "modified_at", "repeat", "is_stream", "model", "multicalls", "max_tokens", "prompt_actions", "skip_append", "claim_nums", "decision_step", "step_description", "revised_step_description", "claim_component_entities", "claim_component_actions", "output_format") VALUES
(441, 40, 44, 'regenerate_claim', 'system', 'I am providing you the following inputs:
####specific_attributes_claims#### in json format
####additional_entity_attributes_rewritten#### in json format
to perform the following steps. 


Step 9: Co-relate each/every additional entity attributes identified in json ####additional_entity_attributes_rewritten#### with the most appropriate entity from field entities_claim from json ####specific_attributes_claims#### based on the implied use/benefit of the attribute. Print the output of this step in json format with title ==missing_entity_attributes_rewritten==. Print the json ==missing_entity_attributes_rewritten== in this format:
{"missing_entity_attributes_rewritten": [ { "id_clm:":..., "id_inv": ..., "additional_attributes_invention":...}, ..]}. Do not print process in the output.

Step 9.1: Re-run step 9 till each/every additional entity attribute from field  additional_attributes_invention from json ####additional_entity_attributes_rewritten#### is correlated with the most appropriate entity from field entities_claim from json ####specific_attributes_claims#### based on the implied use/benefit of the attribute. Do not print process in the output.
', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);


INSERT INTO "prompt"."prompt_seq" ("prompt_seq_id", "seq", "prompt_id", "short_name", "role", "instructions", "fun_def", "inputs", "outputs", "created_at", "modified_at", "repeat", "is_stream", "model", "multicalls", "max_tokens", "prompt_actions", "skip_append", "claim_nums", "decision_step", "step_description", "revised_step_description", "claim_component_entities", "claim_component_actions", "output_format") VALUES
(447, 46, 44, 'regenerate_claim', 'system', 'I am giving you text ####Claims#### to determine type of claims.

Step 1:  Identify all the respective method/system/other claims from the text ####Claims####. All the system claims will be classified as system claims, all the method claims are classified under method claims and all the device/apparatus/product/computer program product/composition/formulation/machine claims go into others. The output of the claim type should be flagged either as true or as False
Print the output in json format with title ==claim_types==. The json ==claim_types== will contain the following field  claim_type (system - True/False, system_claim_numbers, method - True/False, method_claim_numbers, other - True/False), other_claim_numbers. Print the json ==claim_types== in this format:
{"claim_types": {"method": ..., "method_claim_numbers":[.,.,.], "system": ..., "system_claim_numbers":[.,.,.], "other": ..., "other_claim_numbers":[.,.,.]}}. Do not print the process in the output', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

INSERT INTO "prompt"."prompt_seq" ("prompt_seq_id", "seq", "prompt_id", "short_name", "role", "instructions", "fun_def", "inputs", "outputs", "created_at", "modified_at", "repeat", "is_stream", "model", "multicalls", "max_tokens", "prompt_actions", "skip_append", "claim_nums", "decision_step", "step_description", "revised_step_description", "claim_component_entities", "claim_component_actions", "output_format") VALUES
(360, 1, 45, 'flowchart_common', 'system', 'I am providing you the following inputs to perform steps 5 to 10. 
####Claims####
####Current Invention####
####entity_actions_rewritten####in json format
####claim_type#### in json format

Step 5: An independent claim does not reference any other claim. However, a dependent claim always references another claim on which it depends. Using the above logic do the following: 
a) Group only the method claims from field method_claim_numbers from json claim_types. 
b) No two independent claims can be grouped in the same claim group. 
Print the output in a json format. 
Print the json ==claim_groups== in this format:
{"claim_groups": [ { "claims_group_number":..., "Method_independent_claim": ...,  "Method_dependent_claim":....}, ..]}. Ensure no dependent claim is considered as a distinct claim_group. Do not print the process in the output.

Step 5.1: Rerun the step till each method claims from field method_claim_numbers 
(independent and/or dependent) is referenced in json claim_groups. Do not print output for this step. 

Step 6:  For the claims identified from the output of step 5, use the entity actions from field entity_action_claim from json ####entity_actions_rewritten#### to identify which dependent claim depends on which entity action of the independent claim or the entity action in other dependent claims in context of text ####Claims####. Provide the mapping between the dependent claims and the claim entity actions of the independent claim or the entity actions of other dependent claims on which it depends. Output format: Dependent claim --> Independent claim --> reason etc. 
Print the json ==claim_dependency== in this format:
{"claim_dependency": [{"claims_group_number":..., "dependent_claim": ..., "independent_claim": ..., "reason": ...}, ...]}

Step 7: a) Identify all the main steps/entity actions for all the claims for each claim group from field claims_group_number from json ==claim_groups==, using the json claim_dependency  that occur in a logical sequence to accomplish the method in context of all the claims from Step 5 and the ####current invention####. b)  Identify all the the sub-steps/parallel steps/entity actions that are optional/additional details for the main steps, if available,  to accomplish the method in context of claims from json ==claim_groups==. c) Ensure all the claims for each claim group from json ==claim_groups== are referred in Step 7 output. Follow a unique numbering series for each claim group while numbering the step and sub-step. For example if claim group 1 is starting with 100, claim group 2 should start from 200. Use an even numbering series with increment of 2 for each step, as follows - if step number is 100, it''s sub-step number will be 100-a, 100-b, for step 102 the sub-step will be 102-a, 102-b etc. d) Print the output in a json format with title: ==Steps_sub-steps== where every step/ sub-step is in a separate row. 
Print the json ==Steps_sub-steps== in this format:
{"Steps_sub-steps": [ { "claims_group_number":..., "Step/Sub-Step type":..., "Step/Sub-Step number": ..., "explanation quote from text ####claims####":..., "claim number":..., "entity_claim":..., "entity_numerical_identifier":..., "entities_inv":...}, ..]}. Do not print process in the output.

Step 7.1: Rerun step 7 till each claim from field Method_independent_claim and from field Method_dependent_claims for each claim group from json ==claim_groups== are referenced in the output.

Step 8: Rewrite step 7 by doing the following:
a) keep the step and sub-step numbers the same
b) Re-write the explanation from "explanation quote from text ####Claims####" in a concise form without changing the technical language/vocabulary or alter any of the numerical attributes, specific properties (including physical properties such as state, texture, etc. and particular examples), specific quantities details/parameters/definitions in context of text ####Claims####.
Print the output of this step in json format with title ==Steps_sub-steps Rewrite== The json ==Steps_sub-steps Rewrite== will have the following fieds: claims_group_number, Step/Sub-Step number, explanation, claim number. 
Print the json ==Steps_sub-steps Rewrite== in this format:
{"Steps_sub-steps Rewrite": [ {"claims_group_number":..., "Step/Sub-Step type":..., "Step/Sub-Step number":..., "explanation": ..., "claim number":...}, ..]}. Do not print process in the output.

Step 9: A decision step is defined as a point within a step or sub-step where a determination is made, which can influence the subsequent steps or the flow of the method. Using this definition of a decision step, identify all the decision making steps from field explanation for each step/sub-step from field  Step/Sub-Step number from json Steps_sub-steps Rewrite. Identify the decision making steps for each claim group from field claims_group_number.  Print the output of this step in json format with title ==decision_steps==. Print the json ==decision_steps== in this format:
{"decision_steps": [ {"claims_group_number":..., "Decision step":...}, ..]}. Do not print process in the output.

Step 10: Identity and list all the entities from field ''entities_inv'' from json ####entity_actions_rewritten#### that are not directly mentioned in the claims but are related to the broader context of the invention or the application of the claimed method. Quote them from field ''entities_inv'' as is from json ####entity_actions_rewritten####. Print output in json format with title ==additional_entities_to_describe==. The json ==additional_entities_to_describe==will have the field entities_inv_addl. Print the json ==additional_entities_to_describe== in this format:
{"additional_entities_to_describe": [ { "entities_inv_addl":...}, ..]}. Do not print process in the output.', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 596, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(361, 2, 45, 'flowchart_common', 'user', 'Claims: ####{{claims}}####
Current Invention: ####{{invention}}####
entity_actions_rewritten: ####{{entity_actions_rewritten}}####claim_type: ####{{claim_type}}####', NULL, '{"project": ["claims", "invention", "entity_actions_rewritten", "claim_type"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

INSERT INTO "prompt"."prompt_seq" ("prompt_seq_id", "seq", "prompt_id", "short_name", "role", "instructions", "fun_def", "inputs", "outputs", "created_at", "modified_at", "repeat", "is_stream", "model", "multicalls", "max_tokens", "prompt_actions", "skip_append", "claim_nums", "decision_step", "step_description", "revised_step_description", "claim_component_entities", "claim_component_actions", "output_format") VALUES
(351, 1, 46, 'block_diagram_common', 'system', 'I have provided following inputs to perform steps 5 to 11
####Claims####
####Current Invention####
####entity_actions_rewritten####in json format
####claim_types#### in json format

Step 5: An independent claim does not reference any other claim. However, a dependent claim always references another claim on which it depends. Using the above logic do the following: 
a) Group only the system claims from field system_claim_numbers from json claim_types. 
b) No two independent claims can be grouped in the same claim group. 
Print the output in a json format with title==claim_groups==. 
Print the json ==claim_groups== in this format:
{"claim_groups": [ { "claims_group_number":..., "system_independent_claim": ..., "system_dependent_claim":....}, ..]}. Ensure no dependent claim is considered as a distinct claim_group. Do not print the process in the output.  
 
Step 5.1: Rerun the step till each system claim from from field system_claim_numbers from json claim_types (independent and/or dependent) is referenced in json claim_groups. Do not include component/apparatus/product/device/machine type claims under system claim category in the output. Do not print output for this step.


Step 6:  For the claims identified from ==system_Claims==, use the entity actions from field {entity_action_claim} from json ####entity_actions_rewritten#### to identify which dependent claim depends on which entity action of the independent claim or the entity action in other dependent claims in context of text ####Claims####. Provide the mapping between the dependent claims and the claim entity actions of the independent claim or the entity actions of other dependent claims on which it depends. Output format: Dependent claim --> Independent claim --> reason etc. 
Print the json ==claim_dependency== in this format:
{"claim_dependency": [{"claims_group_number":..., "dependent_claim": ..., "independent_claim": ..., "reason": ...}, ...]}

Step 7: Identify and name the system that encompasses the specific entity actions associated with ####current invention#### from field entity action_invention from json ####entity_actions_rewritten#### and all the claims from ==system_Claims==. Output format: ==System==
Print the json ==System== in this format:
{"system": ...}


Step 8: a) Co-relate the identified claims for each claim group from field independent_claim, from field dependent_claim from json claim_groups with the field claim_number from json ####entity_actions_rewritten####.
b) Identify all the entities from field entity_claim and entities_inv from json ####entity_actions_rewritten#### for the co-related claim numbers for each claim group.
c) Group all the identified entities for each claim group from field entity_claim and from field entities_inv from json  #### entity_actions_rewritten#### into components and sub-components using overlaps/commonalities in their entity action from either 1) from field entity_action_claim or from 2) field entity_action_invention from json ####entity_actions_rewritten#### and using the output of step 6. These components and sub-components should be grouped such that when working together they manifest the invention from text ####Claims#### and text ####Current invention####. 
d) The grouped entities should be referred as component/sub-component only in the field component/sub-component type in the output.
e) Ensure that entities from both field entity_claim and from field entities_inv are quoted/cited in the output. Ensure all the claims (both independent and dependent claims) identified for each claim group in the output of step 5 are referenced in the output. 
f) Number the system, components and sub-components in a unique numbering series with increment of 2 for each component as follows - if the system is numbered 500, the component should be numbered 502 and it''s sub-component should be numbered 502-a, 502-b etc. The next component will be numbered 504 and it’s sub-component will be numbered 504-a, 504-b etc. Follow a unique number series for each claim group. For example if claim group 1 is starting with 500, claim group 2 should start from 600. Print the output in json format with title ==component_entities== where every component/ sub-component is in a separate row. The json ==component_entities== will be in this format:
{"component_entities": [ {"claims_group_number":...., "component/sub-component type":..., "component/sub-component number":..., "component/sub-component name ": ...,  "entity_claim":...., "entity_numerical_identifier":..., "entities_inv":..., "claim numbers":...}, ..]}. Do not repeat the process in the output.

Step 8.1: Rerun step 8 till all the entities from both field entity_claim and from field entities_inv are referenced in the output and all the claims from field independent claims and from field dependent_claims for each claim group from json ==claim_groups== are referred in the output.

Step 9: Number the system, component and sub-component from field  Component/Sub-component for each claim group from json ==component_entities==, in an unique numbering series with increment of 2 for each component as follows - if the system is numbered 500, the component should be numbered 502 and it''s sub-component should be numbered 502-a, 502-b etc. The next component will be numbered 504 and it’s sub-component will be numbered 504-a, 504-b etc. Print the output json format with title ==component_sub-component==. The json ==component_sub-component== will be in this format:
{"component_sub-component": [{"claims_group_number":...., "Component type - system/component/sub-component":..., "system/component/sub-component number": "...", "system/component/sub-component name":..., "explanation":..., "entity_claim":..., "entities_inv":..., "claim numbers":...}, ..]}. Do not print process in the output.


', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(352, 2, 46, 'block_diagram_common', 'user', 'Claims: ####{{claims}}####
Current Invention: ####{{invention}}####
entity_actions_rewritten: ####{{entity_actions_rewritten}}####claim_types: ####{{claim_types}}####', NULL, '{"project": ["claims", "invention", "entity_actions_rewritten", "claim_types"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

DELETE FROM prompt.prompt_seq where prompt_seq_id in (404, 405);

INSERT INTO "prompt"."prompt_seq" ("prompt_seq_id", "seq", "prompt_id", "short_name", "role", "instructions", "fun_def", "inputs", "outputs", "created_at", "modified_at", "repeat", "is_stream", "model", "multicalls", "max_tokens", "prompt_actions", "skip_append", "claim_nums", "decision_step", "step_description", "revised_step_description", "claim_component_entities", "claim_component_actions", "output_format") VALUES
(404, 1, 52, 'extra_diagram_common', 'system', 'I have provided following inputs to perform steps 5 to 7
####Claims####
####Current Invention####
####entity_actions_rewritten####in json format####claim_type#### in json format

Step 5:  Identify only other claims from field other_claim_numbers from json claim_types. Print the output in json format with title ==other_claims==. The json ==other_claims== will be in this format 
{"other_claims":{"claim_numbers": [ ...]}}. Do not print the process in the output. 

Step 5.1: Rerun the step till all the other claims from field other_claim_numbers from json claim_types  (both independent and dependent) are referenced in json other_claims. Do not print output for this step.

Step 6: a) Co-relate only the Other claims from field other_claim_numbers from json claim_types with the field claim_number from json #### entity_actions_rewritten####. 
b) After co-relation, only for the co-related claim numbers from field claim_number from json #### entity_actions_rewritten#### identify all the entities from field entity_claim and entities_inv from json #### entity_actions_rewritten####, 
C) Then group all the identified entities from field entity_claim and from field entities_inv from json  #### entity_actions_rewritten#### into logical groups. The logical groups must be made on the basis similarity/commonality in entity actions from either a) field entity_action_claim or from b) field entity_action_invention. These logical groups should be grouped such that when working together they manifest the invention from text ####Claims#### and text ####Current invention####. Ensure the logical groups are such that the entities from entitiy_claim and entities_inv are represented/written/referenced only in one row/sr. no. Ensure that entities from both field entity_claim and from field entities_inv are quoted/cited in the column grouped entities in the output. 
Print the output of this step in json format. The output json should be printed with title ==grouped entities==  in this format: {"grouped entities": [ { "Sr.no":...., "grouped entities":[.,.,.,], "entity actions": ...,  "entity actions purpose":..., "Claim number":....}, ..]}. Do not print the step in the output.


Step 7: Re-Group all the entities from field  Grouped Entities from json ==grouped entities== into logical groups such that all redundancies/overlaps in field grouped entities is avoided. The logical groups from json ==grouped entities== must be regrouped either on the basis of (a) similarity/commonality in entity actions from  field Entity Actions  even if the language of entity actions is different OR (b) Similarity/commonality in purpose of entity actions from field entity actions purpose even if the language is different. These logical groups should be re-grouped such that when working together they manifest the invention from text ####Claims#### and text ####Current invention####. Ensure the logical groups are such that all the entities from field Grouped Entities are represented/written/referenced only in one row/sr. no . Ensure that entities from Grouped Entities are quoted/cited in the field Re-grouped Entities in the output. Print the output in a Json format with title of the json ==component_entities==. The json ==component_entities== must be in 
this format: {"component_entities": [{ "component/sub-component number": ..., "re-grouped entities":[..., ..., ...], "entity actions": ...,  "entity actions purpose": ...}]}', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(405, 2, 52, 'extra_diagram_common', 'user', 'Claims:####{{claims}}#### Current invention:
####{{invention}}####entity_actions_rewritten:
####{{entity_actions_rewritten}}####claim_types: ####{{claim_types}}####', NULL, '{"project": ["claims", "invention", "entity_actions_rewritten", "claim_types"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

INSERT INTO "prompt"."prompt_seq" ("prompt_seq_id", "seq", "prompt_id", "short_name", "role", "instructions", "fun_def", "inputs", "outputs", "created_at", "modified_at", "repeat", "is_stream", "model", "multicalls", "max_tokens", "prompt_actions", "skip_append", "claim_nums", "decision_step", "step_description", "revised_step_description", "claim_component_entities", "claim_component_actions", "output_format") VALUES
(455, 4, 54, 'total_detailed_description', 'system', 'Step 1: Revise the text ####Deduplicated_Description#### by using the following guidelines:
a) Do not change the technical language/vocabulary or alter any of the numerical attributes, specific properties (including physical properties such as state, texture, etc. and particular examples), specific quantities details/parameters/definitions 
(b) Remove any adjectives or superlatives that describe the entities and their actions.
(c) Avoid explicit references to any specific claims associated with the component or sub-components.
(d) Exclude patent profanity terms such as "step", "sub-step", "claim_step_actions", "current Invention", "patent", "entity", "action", "entities", "alternative of each entity", "implicit component", "specific_attributes", "attributes_rewritten", "missing attributes" "technical write-up" and "entity action", "real-world", "Entity_claims", "Claims", "Claim number", "Entity_claim", "Entity number from claims", etc. and avoid using superlatives like "critical", "most important", "crucial", "important", "essential", "necessary", "non-critical", "non-essential", "Superior".
(e) Do not include the headers i.e "==Introduction_Component 1==", ==explanation_component==, ==attributes_rewritten== in the explanation
f) Reference/Quote all the entities for example Device (10,40), Object (15, 45) in the revised explanation.', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(456, 5, 54, 'total_detailed_description', 'user', 'total description: {{total_description}}


', NULL, '{"project": ["deduplication_total_description"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(457, 6, 54, 'total_detailed_description', 'user', 'Step 1', NULL, NULL, '{"project": ["total_description"]}', NULL, NULL, NULL, 't', 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'text');

UPDATE "prompt"."prompt_seq" SET "max_tokens" = 4096 WHERE "prompt_seq_id" = 365;

UPDATE "prompt"."prompt_seq" SET "model" = 'gpt-4-1106-preview', "max_tokens" = 4096 WHERE "prompt_seq_id" = 437;

UPDATE "prompt"."prompt_seq" SET "max_tokens" = 4096 WHERE "prompt_seq_id" = 360;

DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id" = 438;

INSERT INTO "prompt"."prompt_seq" ("prompt_seq_id", "seq", "prompt_id", "short_name", "role", "instructions", "fun_def", "inputs", "outputs", "created_at", "modified_at", "repeat", "is_stream", "model", "multicalls", "max_tokens", "prompt_actions", "skip_append", "claim_nums", "decision_step", "step_description", "revised_step_description", "claim_component_entities", "claim_component_actions", "output_format") VALUES
(438, 37, 44, 'regenerate_claim', 'system', 'I am providing you the following inputs:

####entity_attributes_rewritten#### in json format
####total_attributes_invention#### in json format
to perform the following steps. 

Step 8: Identify the ids from field id_inv from json ####total_attributes_invention#### that are not correlated
with any of the ids from field id_clm in json ####entity_attributes_rewritten####.
Print the output of this step in JSON format as follow:
{"additional_entity_attributes_rewritten": [ { "id_inv": ..., "additional_attributes_invention":...}, ..]}. Do not
print process in the output.', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

UPDATE "prompt"."prompt_seq" SET "instructions" = 'Claims: ####{{claims}}####
Current Invention: ####{{invention}}####
entity_actions_rewritten: ####{{entity_actions_rewritten}}####claim_types: ####{{claim_stats}}####', "inputs" = '{"project": ["claims", "invention", "entity_actions_rewritten", "claim_stats"]}' WHERE "prompt_seq_id" = 352;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'Claims: ####{{claims}}####
Current Invention: ####{{invention}}####
entity_actions_rewritten: ####{{entity_actions_rewritten}}####claim_type: ####{{claim_stats}}####', "inputs" = '{"project": ["claims", "invention", "entity_actions_rewritten", "claim_stats"]}' WHERE "prompt_seq_id" = 361;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'Claims:####{{claims}}#### Current invention:
####{{invention}}####entity_actions_rewritten:
####{{entity_actions_rewritten}}####claim_types: ####{{claim_stats}}####', "inputs" = '{"project": ["claims", "invention", "entity_actions_rewritten", "claim_stats"]}' WHERE "prompt_seq_id" = 405;

DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id" = 371 OR "prompt_seq_id" = 372;
UPDATE "prompt"."prompt_seq" SET "repeat" = 'End' WHERE "prompt_seq_id" = 370;

UPDATE "prompt"."prompt_seq" SET "repeat" = NULL, "is_stream" = NULL WHERE "prompt_seq_id" = 377;
UPDATE "prompt"."prompt_seq" SET "skip_append" = NULL WHERE "prompt_seq_id" = 370;

DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id" = 393 OR "prompt_seq_id" = 394;
DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id" = 412 OR "prompt_seq_id" = 413;

UPDATE "prompt"."prompt_seq" SET "outputs" = '{"project": ["deduplication_description"]}', "is_stream" = NULL WHERE "prompt_seq_id" = 454;


DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id" in (452, 453, 454, 455, 456, 457);

INSERT INTO "prompt"."prompt_seq" ("prompt_seq_id", "seq", "prompt_id", "short_name", "role", "instructions", "fun_def", "inputs", "outputs", "created_at", "modified_at", "repeat", "is_stream", "model", "multicalls", "max_tokens", "skip_append", "prompt_actions", "output_format", "claim_nums", "decision_step", "step_description", "revised_step_description", "claim_component_entities", "claim_component_actions") VALUES
(452, 1, 54, 'total_detailed_description', 'system', 'Your aim is to eliminate redundancies/duplications in expressing technical features/technical attributes/properties/quantities/alternatives/embodiments/examples in input ####total description####. Your aim is not to shorten/truncate/summarize the input ####total description#### but only to eliminate duplicates/redundancies, while re-writing in a logical flow, by doing the following: 

Step 1 : a) Please rewrite the ####total description#### to include ''all'' technical features/technical attributes/properties/quantities/alternatives/embodiments/examples etc.  for each entity only once. Please ensure there is no change or generalisation in the technical language, quantities, properties, alternatives, embodiments and logical flow in the rewrite of ####total description####. 

b) In the re-write of the ####Total Description####, ensure that all references to step numbers like 100,
200 etc. or references to component numbers that explain a block diagram are kept/maintained. Similarly, the rewrite must keep/maintain all  the references to entity identifiers like display (10,
40) that identify an entity uniquely. 

Step 1.1: a) Do not truncate/shorten/summarize the input ####total description####. Ensure
all the multiple/repetitive mentions of technical features/technical attributes/properties/quantities/alternatives/embodiments/examples etc of all entities are removed in the output of step 1. 
b) In the re-write from Step 1 of the ####Total Description####, ensure that all references to step numbers like 100,
200 etc. or references to component numbers that explain a block diagram are kept/maintained. Similarly, the rewrite must keep/maintain all  the references to entity identifiers like display (10,
40) that identify an entity uniquely. Do not print output for this step. ', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(453, 2, 54, 'total_detailed_description', 'user', 'total description: {{total_description}}


', NULL, '{"project": ["total_description"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(454, 3, 54, 'total_detailed_description', 'user', 'Step 1, Step 1.1', NULL, NULL, '{"project": ["deduplication_description"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, 'text', NULL, NULL, NULL, NULL, NULL, NULL),
(455, 4, 54, 'total_detailed_description', 'system', 'Step 1: Revise the text ####Deduplicated_Description#### by using the following guidelines:
a) Do not change the technical language/vocabulary or alter any of the numerical attributes, specific properties (including physical properties such as state, texture, etc. and particular examples), specific quantities details/parameters/definitions 
(b) Remove any adjectives or superlatives that describe the entities and their actions.
(c) Avoid explicit references to any specific claims associated with the component or sub-components.
(d) Exclude patent profanity terms such as "step", "sub-step", "claim_step_actions", "current Invention", "patent", "entity", "action", "entities", "alternative of each entity", "implicit component", "specific_attributes", "attributes_rewritten", "missing attributes" "technical write-up" and "entity action", "real-world", "Entity_claims", "Claims", "Claim number", "Entity_claim", "Entity number from claims", etc. and avoid using superlatives like "critical", "most important", "crucial", "important", "essential", "necessary", "non-critical", "non-essential", "Superior".
(e) Do not include the headers i.e "==Introduction_Component 1==", ==explanation_component==, ==attributes_rewritten== in the explanation
f) Reference/Quote all the entities for example Device (10,40), Object (15, 45) in the revised explanation.', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(456, 5, 54, 'total_detailed_description', 'user', 'total description: {{deduplication_description}}


', NULL, '{"project": ["deduplication_description"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(457, 6, 54, 'total_detailed_description', 'user', 'Step 1', NULL, NULL, '{"project": ["total_description"]}', NULL, NULL, NULL, 't', 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, 'text', NULL, NULL, NULL, NULL, NULL, NULL);

UPDATE "prompt"."prompt_seq" SET "skip_append" = NULL WHERE "prompt_seq_id" = 411;

UPDATE "prompt"."prompt_seq" SET "outputs" = '{"project": ["flowchart_common_desc"]}' WHERE "prompt_seq_id" = 364;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'Claims: ####{{claims}}####\n   Current invention: ####{{invention}}####\n   Steps_sub-steps: ####{{element_explanations_desc}}####\n   entity_actions_rewritten: ####{{entity_actions_rewritten}}####\n  entity_attributes_rewritten: ####{{entity_attributes_rewritten}}####', "inputs" = '{"project": ["claims", "invention", "element_explanations_desc", "entity_actions_rewritten", "entity_attributes_rewritten"]}' WHERE "prompt_seq_id" = 369;

ALTER TABLE "project"."figures_section_history"
ADD COLUMN "element_explanations_desc" text;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'I am giving you the following inputs to write a detailed explanation for the component and its sub-components:
1. ####Claims####
2. ####Current invention####
3. ####components_entities#### in table format
4. ####entity_attributes_rewritten#### in json format

Step 1: Choose the component number {{component_num}} from table ####components_entities#### for the explanation. 
The explanation should be written by following the instructions in a, b and c below:

a) Define and explain all the entities for the chosen component number from field Re-grouped Entities from table ####components_entities####. For the definition, Co-relate the entities from field Re-grouped Entities from table ####components_entities#### with the entities from field entities_claim and from field entities_inv from json ####entity_attributes_rewritten#### to identify all their cited attributes. After making the co-relation do the following: Quote/cite all the attributes for all the entities without changing the technical details/language from field 1) specific_attributes_claims and 2) from field all invention attributes and 3) from field additional_attributes_invention and explain how they contribute to the invention from text ####Claims#### and text ####Current invention####. Avoid use of quotations in the explanation.

Do not refer to words like "entity", "entities", "entity action", "crucial", "critical" etc. Just quote facts from the inputs provided and avoid use of adjectives in the explanation. Avoid use of quotations in the explanation.
Output format: ==entities explanation {{component_num}}===

Step 2: Re-run step 1 till 
a) Quote/cite all the attributes for all the entities without changing the technical details/language from field 1) specific_attributes_claims and 2) from field all invention attributes and 3) from field additional_attributes_invention.
b) no claim numbers are referenced from field claim_number from json ####entity_actions_rewritten#### 
c) words like "entity", "entities", "entity action", "crucial", "critical" etc are not used in the explanation' WHERE "prompt_seq_id" = 409;