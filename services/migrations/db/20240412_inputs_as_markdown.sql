-- ALTER TABLE "project"."figures_section_history" ADD COLUMN "detailed_descriptions" text;

ALTER TABLE "project"."figures_section_history" ADD COLUMN "missing_attributes_desc" text;

UPDATE "prompt"."prompt_seq" SET "outputs" = '{"project": []}' WHERE "prompt_seq_id" = 356;

UPDATE "prompt"."prompt_seq" SET "outputs" = '{"project": ["block_diagram_common"]}' WHERE "prompt_seq_id" = 357;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'Claims:####{{claims}}####\n \n entity_claims: ####{{claim_entities}}####' WHERE "prompt_seq_id" = 322;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'Claims: ####{{claims}}####   \n Current invention: ####{{invention}}####\n Steps_sub-steps: ####{{element_explanations_desc}}####   entity_actions_rewritten: ####{{entity_actions_rewritten}}####  entity_attributes_rewritten: ####{{entity_attributes_rewritten}}####' WHERE "prompt_seq_id" = 369;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'Current Invention: ####{{invention}}####\n additional_entities_to_describe: ####{{additional_entities_to_describe}}####
entity_attributes_invention: ####{{total_attributes_invention}}####' WHERE "prompt_seq_id" = 374;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'Steps_sub-steps: ####{{element_explanations}}####\n Decision_step: ####{{decision_steps}}####' WHERE "prompt_seq_id" = 379;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'main_mermaids: ####{{mermaid}}####\n mermaids: ####{{mermaids}}####' WHERE "prompt_seq_id" = 384;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'Claims: ####{{claims}}####\n Current invention: ####{{invention}}####\n components_entities: ####{{element_explanations}#####\n entity_actions_rewritten: ####{{entity_actions_rewritten}}####\n entity_attributes_rewritten: ####{{entity_attributes_rewritten}}####' WHERE "prompt_seq_id" = 390;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'Claims:####{{claims}}#### \n Current invention: ####{{invention}}####\n entity_actions_rewritten: ####{{entity_actions_rewritten}}####\n claim_types: ####{{claim_stats}}####' WHERE "prompt_seq_id" = 405;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'Claims:####{{claims}}#### \n Current invention: ####{{invention}}####\n components_entities: ####{{element_explanations}}####\n entity_attributes_rewritten:####{{entity_attributes_rewritten}}####' WHERE "prompt_seq_id" = 410;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'Claims:####{{claims}}####\n Current Invention:####{{invention}}####\n claim_entity_actions:####{{claim_entity_actions}}####\n invention_entity_actions:####{{entity_action}}####' WHERE "prompt_seq_id" = 415;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'invention_entity_actions:####{{entity_action}}####\n entity_actions_rewritten: ####{{entity_actions_rewritten}}####' WHERE "prompt_seq_id" = 418;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'claim_entity_actions: ####{{claim_entity_actions}}####\n missing_entity_actions: ####{{missing_entity_actions}}####' WHERE "prompt_seq_id" = 421;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'Claims: ####{{claims}}####' WHERE "prompt_seq_id" = 451;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'claims: ####{{claims}}####  \n invention: ####{{invention}}#### \n prompt instructions: ####{{prompt_instructions}}####' WHERE "prompt_seq_id" = 459;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'Claims:####{{claims}}####\n entity_claims: ####{{claim_entities}}####' WHERE "prompt_seq_id" = 322;

DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id" = 358 OR "prompt_seq_id" = 359;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'I am providing you text ####claims### and markdown table of ####entity_claims#### to perform the  steps from  step 5 to 5.1. 

Step 5: Identify all the specific numerical attributes, all the specific properties (including physical properties such as state, texture, etc. and particular examples), all the specific quantities/number of the entity/entites, all alternatives and all embodiments/uses/applications from text ####claims#### associated with each/every entity from field entity_claim for all claims from field claim_number from markdown table ####entity_claims#### and quote from text ####Claims#### in the output. When we quote from text ####claims####, do not change the language and quote as is. Field id_clm should be numbered as 1,2,3,...etc. Print the output in json format with title ==claim_entity_attributes== where every entity attribute is in a separate row. The entity attribute rows may contain multiple entities in field entities_claim and multiple claims in field claim_numbers in the output if they share the same/similar attribute.  Print the json ==claim_entity_attributes== in this format:
{"claim_entity_attributes": [ {"id_clm":..., "specific_attributes_claim": .., "entities_claim": ..., "Claim_numbers": }, ..]}

Step 5.1: Please continue the process of Step 5 for all the entities from field entity_claim for all claims from field claim_number from json ####entity_claims####. Ensure the response is generated in one go.' WHERE "prompt_seq_id" = 321;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'I have provided following inputs to perform steps 5 to 9
####Claims####
####Current Invention####
####entity_actions_rewritten####in markdown table format
####claim_types#### in json format

Step 5: An independent claim does not reference any other claim. However, a dependent claim always references another claim on which it depends. Using the above logic do the following: 
a) Group only the system claims from field system_claim_numbers from json claim_types. 
b) No two independent claims can be grouped in the same claim group. 
Print the output in a json format with title==claim_groups==. 
Print the json ==claim_groups== in this format:
{"claim_groups": [ { "claims_group_number":..., "system_independent_claim": ..., "system_dependent_claim":....}, ..]}. Ensure no dependent claim is considered as a distinct claim_group. Do not print the process in the output.  
 
Step 5.1: Rerun the step till each system claim from from field system_claim_numbers from json claim_types (independent and/or dependent) is referenced in json claim_groups. Do not include component/apparatus/product/device/machine type claims under system claim category in the output. Do not print output for this step.


Step 6:  For the claims identified from fields system_independent_claim and from field system_dependent_claim from json ####claim_groups####, use the entity actions from field {entity_action_claim} from markdown table ####entity_actions_rewritten#### to identify which dependent claim depends on which entity action of the independent claim or the entity action in other dependent claims in context of text ####Claims####. Provide the mapping between the dependent claims and the claim entity actions of the independent claim or the entity actions of other dependent claims on which it depends. Output format: Dependent claim --> Independent claim --> reason etc. 
Print the json ==claim_dependency== in this format:
{"claim_dependency": [{"claims_group_number":..., "dependent_claim": ..., "independent_claim": ..., "reason": ...}, ...]}

Step 7: Identify and name the system that encompasses the specific entity actions associated with text ####current invention#### from field entity action_invention from markdown table ####entity_actions_rewritten#### and all the claims from ==system_Claims==. Output format: ==System==
Print the json ==System== in this format:
{"system": ...}


Step 8: a) Co-relate the identified claims for each claim group from field independent_claim, from field dependent_claim from json claim_groups with the field claim_number from markdown table ####entity_actions_rewritten####.
b) Identify all the entities from field entity_claim and entities_inv from markdown table ####entity_actions_rewritten#### for the co-related claim numbers for each claim group.
c) Group all the identified entities for each claim group from field entity_claim and from field entities_inv from markdown table  ####entity_actions_rewritten#### into components and sub-components using overlaps/commonalities in their entity action from either 1) from field entity_action_claim or from 2) field entity_action_invention from markdown table ####entity_actions_rewritten#### and using the output of step 6. These components and sub-components should be grouped such that when working together they manifest the invention from text ####Claims#### and text ####Current invention####. 
d) The grouped entities should be referred as component/sub-component only in the field component/sub-component type in the output.
e) Ensure that entities from both field entity_claim and from field entities_inv are quoted/cited in the output. Ensure all the claims (both independent and dependent claims) identified for each claim group in the output of step 5 are referenced in the output. 
f) Number the system, components and sub-components in a unique numbering series with increment of 2 for each component as follows - if the system is numbered 500, the component should be numbered 502 and it''s sub-component should be numbered 502-a, 502-b etc. The next component will be numbered 504 and it’s sub-component will be numbered 504-a, 504-b etc. Follow a unique number series for each claim group. For example if claim group 1 is starting with 500, claim group 2 should start from 600. Print the output in json format with title ==component_entities== where every component/ sub-component is in a separate row. The json ==component_entities== will be in this format:
{"component_entities": [ {"claims_group_number":...., "component/sub-component type":..., "component/sub-component number":..., "component/sub-component name ": ...,  "entity_claim":...., "entity_numerical_identifier":..., "entities_inv":..., "claim numbers":...}, ..]}. Do not repeat the process in the output.

Step 8.1: Rerun step 8 till all the entities from both field entity_claim and from field entities_inv are referenced in the output and all the claims from field independent claims and from field dependent_claims for each claim group from json ==claim_groups== are referred in the output.

Step 9: Number the system, component and sub-component from field  Component/Sub-component for each claim group from json ==component_entities==, in an unique numbering series with increment of 2 for each component as follows - if the system is numbered 500, the component should be numbered 502 and it''s sub-component should be numbered 502-a, 502-b etc. The next component will be numbered 504 and it’s sub-component will be numbered 504-a, 504-b etc. Print the output json format with title ==component_sub-component==. The json ==component_sub-component== will be in this format:
{"component_sub-component": [{"claims_group_number":...., "Component type - system/component/sub-component":..., "system/component/sub-component number": "...", "system/component/sub-component name":..., "explanation":..., "entity_claim":..., "entity_numerical_identifier":..., "entities_inv":..., "claim numbers":...}, ..]}. Do not print process in the output.' WHERE "prompt_seq_id" = 351;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'I am providing you the following inputs to perform steps 5 to 10. 
####Claims####
####Current Invention####
####entity_actions_rewritten####in markdown table format
####claim_type#### in json format

Step 5: An independent claim does not reference any other claim. However, a dependent claim always references another claim on which it depends. Using the above logic do the following: 
a) Group only the method claims from field method_claim_numbers from json ####claim_type####. 
b) No two independent claims can be grouped in the same claim group. 
Print the output in a json format. 
Print the json ==claim_groups== in this format:
{"claim_groups": [ { "claims_group_number":..., "Method_independent_claim": ...,  "Method_dependent_claim":....}, ..]}. Ensure no dependent claim is considered as a distinct claim_group. Do not print the process in the output.

Step 5.1: Rerun the step till each method claims from field method_claim_numbers 
(independent and/or dependent) is referenced in json claim_groups. Do not print output for this step. 

Step 6:  For the claims identified from the output of step 5, use the entity actions from field entity_action_claim from markdown table ####entity_actions_rewritten#### to identify which dependent claim depends on which entity action of the independent claim or the entity action in other dependent claims in context of text ####Claims####. Provide the mapping between the dependent claims and the claim entity actions of the independent claim or the entity actions of other dependent claims on which it depends. Output format: Dependent claim --> Independent claim --> reason etc. 
Print the json ==claim_dependency== in this format:
{"claim_dependency": [{"claims_group_number":..., "dependent_claim": ..., "independent_claim": ..., "reason": ...}, ...]}

Step 7: a) Identify all the main steps/entity actions for all the claims for each claim group from field claims_group_number from json ==claim_groups==, using the json claim_dependency  that occur in a logical sequence to accomplish the method in context of all the claims from Step 5 and the ####current invention####. b)  Identify all the the sub-steps/parallel steps/entity actions that are optional/additional details for the main steps, if available,  to accomplish the method in context of claims from json ==claim_groups==. c) Ensure all the claims for each claim group from json ==claim_groups== are referred in Step 7 output. Follow a unique numbering series for each claim group while numbering the step and sub-step. For example if claim group 1 is starting with 100, claim group 2 should start from 200. Use an even numbering series with increment of 2 for each step, as follows - if step number is 100, it''s sub-step number will be 100-a, 100-b, for step 102 the sub-step will be 102-a, 102-b etc. d) Print the output in a json format with title: ==Steps_sub-steps== where every step/ sub-step is in a separate row. 
Print the json ==Steps_sub-steps== in this format:
{"Steps_sub-steps": [ { "claims_group_number":..., "Step/Sub-Step type":..., "Step/Sub-Step number": ..., "explanation quote from text ####claims####":..., "claim number":..., "entity_claim":..., "entity_numerical_identifier":..., "entities_inv":...}, ..]}. Do not print process in the output.

Step 7.1: Rerun step 7 till each claim from field Method_independent_claim and from field Method_dependent_claims for each claim group from json ==claim_groups== are referenced in the output.

Step 8: Rewrite step 7 by doing the following:
a) keep the step and sub-step numbers the same
b) Re-write the explanation from "explanation quote from text ####Claims####" in a concise form without changing the technical language/vocabulary or alter any of the numerical attributes, specific properties (including physical properties such as state, texture, etc. and particular examples), specific quantities details/parameters/definitions in context of text ####Claims####.
Print the output of this step in json format with title ==Steps_sub-steps Rewrite== The json ==Steps_sub-steps Rewrite== will have the following fieds: claims_group_number, Step/Sub-Step number, explanation, claim number. 
Print the json ==Steps_sub-steps Rewrite== in this format:
{"Steps_sub-steps Rewrite": [ {"claims_group_number":..., "Step/Sub-Step type":..., "Step/Sub-Step number":..., "explanation": ..., "claim number":...}, ..]}. Do not print process in the output.

Step 9: A decision step is defined as a point within a step or sub-step where a determination is made, which can influence the subsequent steps or the flow of the method. Using this definition of a decision step, identify all the decision making steps from field explanation for each step/sub-step from field  Step/Sub-Step number from json Steps_sub-steps Rewrite. Identify the decision making steps for each claim group from field claims_group_number.  Print the output of this step in json format with title ==decision_steps==. Print the json ==decision_steps== in this format:
{"decision_steps": [ {"claims_group_number":..., "Decision step":...}, ..]}. Do not print process in the output.

Step 10: Identity and list all the entities from field ''entities_inv'' from markdown table ####entity_actions_rewritten#### that are not directly mentioned in the claims but are related to the broader context of the invention or the application of the claimed method. Quote them from field ''entities_inv'' as is from markdown table ####entity_actions_rewritten####. Print output in json format with title ==additional_entities_to_describe==. The json ==additional_entities_to_describe==will have the field entities_inv_addl. Print the json ==additional_entities_to_describe== in this format:
{"additional_entities_to_describe": [ { "entities_inv_addl":...}, ..]}. Do not print process in the output.' WHERE "prompt_seq_id" = 360;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'I am giving you the following inputs to write a detailed explanation for the Step and sub-steps :
1. ####Claims####
2. ####Current invention####
3. ####steps_sub-steps#### in markdown table format
4. ####entity_actions_rewritten#### in markdown table format
5. ####entity_attributes_rewritten#### in markdown table format


Step 1: Choose the step {{step_num}} and all its sub-steps (if any) from markdown table ####steps_sub-steps#### for the explanation. Define all the entity actions pertaining to all entities for the chosen steps and its sub-steps from markdown table ####steps_sub-steps#### by referencing entity actions from markdown table ####entity_actions_rewritten####. The definitions must include what the entity actions are in the real world. They must further include all details of all the entities involved from field entities_claim and from field entities from markdown table ####entity_attributes_rewritten###. In this explanation, quote/cite all the attributes/details/definitions/parameters/mechanism/structure/working/properties/mathematical construct/metrics/measurements/uses/other embodiments of all the entities involved from field specific_attributes_claims,  from field all invention attributes and from field additional_attributes_invention from markdown table ####entity_attributes_rewritten#### without changing the language. 
Include implicit entities/steps/working/components/parts/conditions/ranges that will explain all the entity actions of/by/on the entities involved for the chosen step and all its sub-steps only so that a technical expert can understand the entity actions of all entities in the chosen step and sub-step without having to make any assumptions.  Reference chosen step and all its sub-step numbers from markdown table ####steps_sub-steps#### in the explanation without using the word step or sub-step. Do not repeat the step in the output. 

Step 2: Ensure that the explanation from step 1 is only written for the chosen step and all its sub-steps. For the chosen step and all its sub-steps, ensure the explanation from step 1 details the entity actions from markdown table ####entity_action_rewritten#### and include all the the entity attributes from markdown table ####entity_attributes_rewritten#### without changing the language. Ensure the explanation is written in a paragraph format by referencing the step numbers from markdown table ####steps_sub-steps####. Ensure the chosen step and all its sub-steps are numbered from markdown table ####steps_sub-steps#### in the explanation. Step 2 is only to ensure the proper running of step 1 and should not print an output. Output with header ==Explanation Step {{step_num}}==' WHERE "prompt_seq_id" = 368;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'I am giving you the following inputs to write a detailed explanation
1. ####Current invention####
2. ####entity_attributes_invention#### in markdown table format
3.####additional_entities_to_describe#### in markdown table format 

Step 1: From the input markdown table ####additional_entities_to_describe####, verify that the field entities_inv_addl has any data. If this condition is satisfied, indicating that the field entities_inv_addl has some data, then proceed to step 2. Output in json format with title: describe_additional_entities with fields 
exp - explain the condition
flag - true/false based on is the condition. Output in json format as{"entities_inv_addl": {"exp": ..., "flag": ...}}

Step 2: Co-relate the entities from field entities_inv_addl from markdown table ####additional_entities_to_describe#### with the field entities_inv from markdown table ####entity_attributes_invention####.
The co-relation should be done by going through field entities from markdown table ####entity_attributes_invention#### across the entire field serial number from markdown table ####entity_attributes_invention####. Print the output in json format with title -==a==. The json ==a== contains following fields  entity, serial_number. Print the json ==a== in this format:
{"a": [ { "entity":..., "serial_number":...}, ..]}. Do not print process in the output.

Step 3: Quote the entire text from field all_invention_attributes from markdown table ####entity_attributes_invention#### for the entities from field entity from json "a" from step 2 by doing the following:
a) Co-relate the entities from field entities_inv_addl from markdown table ####additional_entities_to_describe#### with the field entities_inv from markdown table ####entity_attributes_invention####.
The co-relation should be done by going through field entities from markdown table ####entity_attributes_invention#### across the entire field serial number from markdown table ####entity_attributes_invention####. Do not print output. 
b) after co-relation, identify the text associated with the entity from field entities_inv from field all_invention_attributes from markdown table ####entity_attributes_invention####.Do not print output. c) After the text identification, quote and print the entire text from field all_invention_attributes from markdown table ####entity_attributes_invention#### in a paragraph format in the output. Do not change the technical language and do not use  words like "serial number" in the output. Do not repeat the step in the output.' WHERE "prompt_seq_id" = 373;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'Step 15: Provide the mermaid script/syntax for all steps and sub-steps/parallel steps for each claim group from field claims_group_number using markdown table ####Steps_sub-steps Rewrite#### by doing the following: For the mermaid script/syntax, understand the output of all steps and sub-steps/parallel steps from markdown table ####Steps_sub-steps Rewrite#### in context of markdown table ####Decision_step####. Json ####Decision_step#### identifies the decision making step. Using all the details of all the steps and sub-steps/parallel steps from markdown table ####Steps_sub-steps Rewrite#### and decision making step from json ####Decision_step####, identify nodes, conditions (if any), and different links/paths for each claim group. Do not print output for this step.

Step 16: Choose the layout for output from Step 15. Use graph TB for a top-down layout or graph LR for a left-right layout. Do not print output for this step.

Step 17: Define the nodes for output from Step 15. Use square brackets for regular nodes e.g., 100["Node A"].  Use curly braces for decision nodes e.g., 102{"Condition B"}. Treat "If" condition nodes as decision nodes. Do not print output for this step.

Step 18: For the Mermaid script/syntax from step 15 define the links/paths between nodes from Step 17 using -->. To add text to the links/paths, use |Link text| for each claim group. For multiple links/paths between nodes, define each link separately. For decision making link/path, use appropriate messages to handle yes/no cases. For example, a decision node should have two separate links/paths with messages as "yes" and "no". Do not print output for this step.

Step 19:Review and adjust the Mermaid script/syntax for each claim group from field claims_group_number from markdown table ####Steps_sub-steps Rewrite####, as needed. Refer the example given below for following the style of the mermaid. Print the output for this step.

mermaid
Copy code
graph TB
100["Determine an initial eye strain context for a user wearing a VR headset."]
102{"Recognize a User Interface (UI) adaptation."}
104["Establish the intensity of the UI adaptation."]
106["Display modified VR content by applying the identified UI adaptation."]
108["Assess an updated eye strain context."]
110{"If the updated eye strain context indicates a decrease in eye strain."}
112["Modify the priority weight for the UI adaptation."]
114["Refresh a user''s profile with the UI adaptation, its intensity, and the modified priority weight."]
100 --> 102
102 -- Yes --> 104
104 --> 106
106 --> 108
108 --> 110
110 -- Yes --> 112
112 --> 114
110 -- No --> 102

33
Step 20:  Confirm that the yes and no condition from the decision making step from json ####Decision_step#### has already been considered in the output of Step 19. If no, then re-generate the output from Step 19. Do not print output for this step.' WHERE "prompt_seq_id" = 378;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'Step 22: Use the output from step 19 to generate one mermaid for each claim group. For each claim group, the mermaid will contain all the steps without the sub-steps, which together encompass the method in context of markdown table #### Steps_sub-steps Rewrite####  and json ####Decision_step####. Steps can be identified from their whole number whereas sub-steps can be identified by the whole number hyphenated with an alphabet. Each mermaid in a claim group must be numbered as Fig. 1.  For each claim group follow a unique number for the mermaids. Do not print the process in the output. Print the output in json format: 
{"main_mermaids": [{"claims_group_number":..., "main_mermaid_number": ..., "mermaid": "mermaid script/syntax"...}, ....]}

Sample Mermaid:
graph TB
100["Determine an initial eye strain context for a user wearing a VR headset."]
102{"Recognize a User Interface (UI) adaptation."}
104["Establish the intensity of the UI adaptation."]
106["Display modified VR content by applying the identified UI adaptation."]
108["Assess an updated eye strain context."]
110{"If the updated eye strain context indicates a decrease in eye strain."}
112["Modify the priority weight for the UI adaptation."]
114["Refresh a user''s profile with the UI adaptation, its intensity, and the modified priority weight."]
100 --> 102
102 -- Yes --> 104
104 --> 106
106 --> 108
108 --> 110
110 -- Yes --> 112
112 --> 114
110 -- No --> 102' WHERE "prompt_seq_id" = 381;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'Step 25: Split the mermaids from Step 19, for each claim group, into multiple mermaids based on the sub-steps grouping where each sub-step group contains a step and it''s respective sub-step from markdown table #### Steps_sub-steps Rewrite#### . For any step with sub-step in each claim group from markdown table #### Steps_sub-steps Rewrite#### , ensure that the mermaid is made only for the step and all it''s sub-steps. Using markdown table #### Steps_sub-steps Rewrite####, avoid mermaids in Step 25 for steps that do not contain sub-steps. Ensure each of the mermaid splits are meaningful in context of markdown table #### Steps_sub-steps Rewrite####  and json ==Decision_step==. Each mermaid in a claim group must be numbered as Fig. 1A, Fig. 1B, etc. For each claim group follow a unique number for the mermaids. Print the output in json format: {"mermaids": [{"claims_group_number":..., "sub_mermaid_number":..., "mermaid" : "mermaid script/syntax ..."}, ....]}. Do not repeat the step in the output. 

Sample Mermaid:
graph TB
100["Determine an initial eye strain context for a user wearing a VR headset."]
102{"Recognize a User Interface (UI) adaptation."}
104["Establish the intensity of the UI adaptation."]
106["Display modified VR content by applying the identified UI adaptation."]
108["Assess an updated eye strain context."]
110{"If the updated eye strain context indicates a decrease in eye strain."}
112["Modify the priority weight for the UI adaptation."]
114["Refresh a user''s profile with the UI adaptation, its intensity, and the modified priority weight."]
100 --> 102
102 -- Yes --> 104
104 --> 106
106 --> 108
108 --> 110
110 -- Yes --> 112
112 --> 114
110 -- No --> 102' WHERE "prompt_seq_id" = 382;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'Step 23: Using the output of step 22, identify the goal of the steps for each mermaid from field main_mermaid_number for each claim group from field claims_group_number from markdown table main_mermaids in fewer than 20 words. Print the output in json format: {"Goal_claim_group": [{"Claims_group number":..., "main_mermaid_number":..., "goal..."},...]}

' WHERE "prompt_seq_id" = 383;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'main_mermaids: ####{{mermaid}}\n ####mermaids: ####{{mermaids}}####' WHERE "prompt_seq_id" = 384;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'Step 26: Identify the goal of the steps for each mermaid from field sub_mermaid_number for each claim group separately from markdown table {mermaids} in fewer than 20 words. Print the output in json format {"Goal_claim_group_mermaids": [{"Claims_group number":..., "sub_mermaid_number":..., "goal..."},...]}' WHERE "prompt_seq_id" = 387;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'I am giving you the following inputs to write a detailed explanation for the component and its sub-components:
1. ####Claims####
2. ####Current invention####
3. ####components_entities#### in markdown table  format
4. ####entity_actions_rewritten#### in markdown table format
5. ####entity_attributes_rewritten#### in markdown table format

Step 1: Choose the component {{component_num}} and all Sub-components for component {{component_num}} from markdown table ####components_entities#### for the explanation. Please provide a detailed explanation of the chosen Component and all of its sub-components from the markdown table ####components_entities####. Reference/Quote the entities and their numbers either from field entity_numerical_identifier from markdown table ####entity_actions_rewritten#### or from field system/component/sub-component number from markdown table ####components_entities#### if available.  For example Device (10,40), Object (15, 45). The explanation should include the following points:

a) Introduce chosen component  and its significance

b) Define and explain all the entities that comprise the component and its sub-component from markdown table ####components_entities#### in context of text ####Claims#### and ####Current Invention####. Quote/cite all the specific numerical attributes, all the specific properties (including physical properties such as state, texture, etc. and particular examples), all the specific quantities/number of the entity/entites, all alternatives and all embodiments/uses/applications for all the entities from markdown table ####components_entities#### by referencing the entity attributes from field specific_attributes_claims,  from field all invention attributes and from field additional_attributes_invention from markdown table ####entity_attributes_rewritten#### and explain how they contribute to the component''s function. Cite/quote all the entity attributes from field specific_attributes_claims,  from field all invention attributes and from field additional_attributes_invention from markdown table ####entity_attributes_rewritten#### without generalising/changing the language of the entity attributes in the explanation. Avoid use of quotations in the explanation.

c) Use the mapping between entities from the field entity_claim and entities from the invention from the field entity_invention from the markdown table ####entity_actions_rewritten#### to explain all the alternative manifestations of the entities in context of ####current invention#### and ####claims####. Do not include the column names or headers in the explanation. 

Do not use the word component or sub-component in the explanation, instead use the component/sub-component name while explaining about it. Do not refer to words like "entity", "entities", "entity action", "crucial", "critical" etc. Just state facts from the inputs provided and avoid use of adjectives in the explanation. Avoid use of quotations in the explanation.
Do not reference claim numbers from field claim_number from json ####entity_actions_rewritten#### in the explanation. Output format: ==introduction_component {{component_num}}===

Step 2: Re-run step 1 till 
a) all the entities are cited with their numbers either from field entity_numerical_identifier from json ####entity_actions_rewritten#### or from field system/component/sub-component number from json ####components_entities#### in the explanation if available - for example Device (10,40), Object (15, 45).
b) Cite/quote all the entity attributes from field specific_attributes_claims,  from field all invention attributes and from field additional_attributes_invention from json ####entity_attributes_rewritten####.
c) no claim numbers are referenced from field claim_number from json ####entity_actions_rewritten#### 
d) words like "entity", "entities", "entity action", "crucial", "critical" etc are not used in the explanation' WHERE "prompt_seq_id" = 389;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'Explain the Working of the chosen component and it''s sub-component above by referencing markdown table ####components_entities#### with the markdown table ####entity_action_rewritten####. Ensure that the working/entity actions of the component and sub-component is structured coherently, with each entity action explanation flowing logically into the next. The language should be technical yet clear, catering to a professional audience with the aim of providing a thorough understanding of the component''s workings. :
(a) Reference, define and describe in detail all the entity actions associated with all the entities of the chosen component and its sub-components from markdown table ####components_entities#### by mapping component entities with the corresponding entities from markdown table ####entity_action_rewritten####so that a technical person can understand without making any assumptions.  (do not refer to the entity action explicitly)
(b) For each entity action, explain its nature (what), purpose (why), context (when and under what conditions), and method (how). 
(c) Use your knowledge base to include any implicit entities, components, actions, or details not explicitly mentioned in field entity_action_claim or in field entity_action_invention in markdown table #### entity_action_rewritten#### but crucial for a complete understanding of all the entity actions and how they flow logically into one another for the working of the system. 

Make sure to all the entities are cited with  their numbers either from field entity_numerical_identifier from markdown table ####entity_actions_rewritten#### or from field system/component/sub-component number from markdown table ####components_entities#### associated with each component/sub-component in the explanation if the number is available.- for example Device (10,40), Object (15, 45). Do not number entities in absence of entity_numerical_identifier or refer to words like "entity", "entities", "entity action", "crucial", "critical" etc. Do not repeat anything from the explanation that explains the entities comprising the component and sub-component from above. Output format: ==explanation_component {{component_num}}==' WHERE "prompt_seq_id" = 392;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'Step 16: Provide the mermaid script/syntax for each claim group from field claims_group_number from markdown table ####component_sub-component####. Do not print output for this step.

Step 17: Choose the layout for output from step 16. Use graph TB for a top-down layout or graph LR for a left-right layout. Do not print output for this step.

Step 18: Define the nodes for each claim group for the output from step 16. Use square brackets for regular nodes (e.g., 200["Host System"]). Do not print output for this step.

Step 19: For the Mermaid script/syntax from step 16, use the word "subgraph" to start a subgraph and the word "end" to close it. Define all nodes that belong to the subgraph. Define the links for  all the nodes at the end. Do not print output for this step.

Step 20: Review and adjust the Mermaid script/syntax for each claim group as needed. Refer the example given below for following the style of the mermaid. This sample is for reference only, do not follow numbering of the sample given below. Keep the numbering same as given in the json component_sub-component and also, do not mention claim numbers in the mermaid codes. 

For example, 
graph LR
subgraph 200["Host System"]
  210["Host Interface Unit"]
end
subgraph 204["Memory Controller"]
  212["Memory Interface Unit"]
  214["Processing Unit"]
end
subgraph 206["Non-Volatile Memory"]
  202["Memory Devices"]
  208["Host Memory"]
  216["Information Units"]
end
200 --- 204
204 --- 206
Print the output for this step in json format with title ==mermaids==. Do not print process/step in the output.

Step 22: Ensure that a valid mermaid syntax has been generated for each claim group in step 20.  Do not print the output for this step.' WHERE "prompt_seq_id" = 395;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'Step 29: Split the mermaid from Step 20 for each claim group  into multiple mermaids based on the main components-sub-components grouping. For any main component with sub-component from json component_sub-component, ensure that the mermaid is made for that main component and all it''s sub-components. Avoid mermaids in Step 29 that do not contain sub-components. Also, ensure each of the mermaid splits are meaningful in context of markdown table ####component_sub-component####. Each mermaid in a claim group must be numbered as Fig. 5A, Fig. 5B, etc. For each claim group follow a unique number for the mermaids. Print the output in json format: {"mermaids": [{"claims_group_number":..., "sub_mermaid_number":..., "mermaid" : "mermaid script/syntax ..."}, ....]}. Do not repeat the step in the output. ' WHERE "prompt_seq_id" = 401;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'I have provided following inputs to perform steps 5 to 7
####Claims####
####Current Invention####
####entity_actions_rewritten####in markdown table format
####claim_type#### in json format

Step 5:  Identify only other claims from field other_claim_numbers from json claim_types. Print the output in json format with title ==other_claims==. The json ==other_claims== will be in this format 
{"other_claims":{"claim_numbers": [ ...]}}. Do not print the process in the output. 

Step 5.1: Rerun the step till all the other claims from field other_claim_numbers from json claim_types  (both independent and dependent) are referenced in json other_claims. Do not print output for this step.

Step 6: a) Co-relate only the Other claims from field other_claim_numbers from json claim_types with the field claim_number from markdown table ####entity_actions_rewritten####. 
b) After co-relation, only for the co-related claim numbers from field claim_number from markdown table ####entity_actions_rewritten#### identify all the entities from field entity_claim and entities_inv from markdown table ####entity_actions_rewritten####, 
C) Then group all the identified entities from field entity_claim and from field entities_inv from markdown table  ####entity_actions_rewritten#### into logical groups. The logical groups must be made on the basis similarity/commonality in entity actions from either a) field entity_action_claim or from b) field entity_action_invention. These logical groups should be grouped such that when working together they manifest the invention from text ####Claims#### and text ####Current invention####. Ensure the logical groups are such that the entities from entitiy_claim and entities_inv are represented/written/referenced only in one row/sr. no. Ensure that entities from both field entity_claim and from field entities_inv are quoted/cited in the column grouped entities in the output. 
Print the output of this step in json format. The output json should be printed with title ==grouped entities==  in this format: {"grouped entities": [ { "Sr.no":...., "grouped entities":[.,.,.,], "entity actions": ...,  "entity actions purpose":..., "Claim number":....}, ..]}. Do not print the step in the output.


Step 7: Re-Group all the entities from field  Grouped Entities from json ==grouped entities== into logical groups such that all redundancies/overlaps in field grouped entities is avoided. The logical groups from json ==grouped entities== must be regrouped either on the basis of (a) similarity/commonality in entity actions from  field Entity Actions  even if the language of entity actions is different OR (b) Similarity/commonality in purpose of entity actions from field entity actions purpose even if the language is different. These logical groups should be re-grouped such that when working together they manifest the invention from text ####Claims#### and text ####Current invention####. Ensure the logical groups are such that all the entities from field Grouped Entities are represented/written/referenced only in one row/sr. no . Ensure that entities from Grouped Entities are quoted/cited in the field Re-grouped Entities in the output. Print the output in a Json format with title of the json ==component_entities==. The json ==component_entities== must be in 
this format: {"component_entities": [{ "component/sub-component number": ..., "re-grouped entities":[..., ..., ...], "entity actions": ...,  "entity actions purpose": ...}]}' WHERE "prompt_seq_id" = 404;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'I am giving you the following inputs to write a detailed explanation for the component and its sub-components:
1. ####Claims####
2. ####Current invention####
3. ####components_entities#### in markdown table format
4. ####entity_attributes_rewritten##### in markdown table format

Step 1: Choose the component number {{component_num}} from markdown table ####components_entities#### for the explanation. 
The explanation should be written by following the instructions in a, b and c below:

a) Define and explain all the entities for the chosen component number from field Re-grouped Entities from markdown table ####components_entities####. For the definition, Co-relate the entities from field Re-grouped Entities from json components_entities with the entities from field entities_claim and from field entities_inv from markdown table ####entity_attributes_rewritten##### to identify all their cited attributes. After making the co-relation do the following: Quote/cite all the attributes for all the co-related entities, without changing the technical details/language, from json  entity_attributes_rewritten from field 1) specific_attributes_claims and 2) from field all invention attributes and 3) from field additional_attributes_invention. Once the attributed are cited and quoted,  explain how they contribute to the invention from text ####Claims#### and text ####Current invention####. Avoid use of quotations in the explanation.

Do not refer to words like "entity", "entities", "entity action", "crucial", "critical" etc. Just quote facts from the inputs provided and avoid use of adjectives in the explanation. Avoid use of quotations in the explanation.
Output format: ==entities explanation {{component_num}}===

Step 2: Re-run step 1 till 
a) Quote/cite all the attributes for all the entities, without changing the technical details/language, from markdown table #####entity_attributes_rewritten#### from field 1) specific_attributes_claims and 2) from field all invention attributes and 3) from field additional_attributes_invention.
b) No claim numbers should be referenced from field claim_number from markdown table ####entity_actions_rewritten#### in the explanation
c) Do not use words like "entity", "entities", "entity action", "crucial", "critical" etc in the explanation' WHERE "prompt_seq_id" = 409;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'I am providing you the following inputs:
####Claims####
####Current Invention
####claim_entity_actions####  in markdown table format
####invention_entity_actions#### in markdown table format 

Step 7:  Co-relate the entity actions for each claim from field entity_action_claim from markdown table ####claim_entity_actions#### with the corresponding entity actions from field entity_action_invention from markdown table  ####Invention_entity_actions####.  This is basically reverse mapping claim language of the entity actions in claims from text ####Claims#### with the entity actions as given in the text ####Current Invention####. Print the output of this step in json format with title ==entity_actions_rewritten== where every id_clm  from field id_clm is in a separate row. Print the json ==entity_actions_rewritten== in this format:
{"entity_actions_rewritten": [ {"id_clm":..., "id_inv":...}, ..]}

Step 7.1: Please continue the process of Step 7 for all the claims referenced from field claim_number from markdown table ####claim_entity_actions####. Ensure the response is generated in one go.' WHERE "prompt_seq_id" = 414;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'I am providing you the following inputs to compare:
####invention_entity_actions#### in markdown table format 
####entity_actions_rewritten#### in markdown table format 

Step 8: Identify the ids from field id_inv from markdown table ####invention_entity_actions#### that are not correlated with any of the ids from field id_clm from markdown table ####entity_actions_rewritten####. Print output in json format with title ==missing_entity_actions==.  The json ==missing_entity_actions== will contain the following fields: entities_inv, entity_action_invention. Print the json ==missing_entity_actions== in this format:
{"missing_entity_actions": [ { "id_inv": ..., "purpose":...}, ..]}. Do not print the process in the output.' WHERE "prompt_seq_id" = 417;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'I am providing you the following inputs to co-relate:
####claim_entity_actions#### in markdown table format 
####missing_entity_actions#### in markdown table format 

Step 9: Co-relate the missing id from field id_inv from markdown table ####missing_entity_actions#### with the most close entity from field entity_claim from markdown table ####claim_entity_actions#### based on it''s purpose from field purpose. Print the output in json format with title ==missing_entity_action_rewritten==. The json ==missing_entity_action_rewritten== will contain the following fields: id_clm, id_inv.
Print the json ==missing_entity_action_rewritten== in this format:
{"missing_entity_action_rewritten": [ {"id_clm":....,"id_inv": ...}, ..]}. Do not print the process in the output.' WHERE "prompt_seq_id" = 420;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'I am providing you text ####Current Invention#### and ####grouped_entity_invention#### in markdown table format. 

Step 7: Identify all the specific numerical attributes, specific properties (including physical properties such as state, texture, etc. and particular examples), specific quantities, every/each alternative and every/each embodiment, every/each use and every applications  from text ####Current invention#### associated with each/every entity from field entities_inv from markdown table ####grouped_entity_invention####. Quote the entire paragraph from text ####Current invention#### that describes the entity actions/attributes/properties/uses. Remember, there maybe multiple paragraphs that describes the entity actions/attributes/properties or uses. Some paragraphs may have the explicit reference to the entity and others may have implicit references to the entity.  While quoting from text ####Current invention####, do not change the language and quote as is. id_inv should be numbered as 1,2,3,...etc. Print output in json format with title ==specific_attributes_invention==where each attribute is in a separate row.  Print the json ==specific_attributes_invention== in this format:
{"specific_attributes_invention": [{ "id_inv":..., "specific_attributes_inv": ..., "entities_inv":...}, ..]}' WHERE "prompt_seq_id" = 423;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'I am providing you the following inputs: 
####Current Invention####  as text
####specific_attributes_invention#### as markdown table. 

Step 8: Identify the details from text ####Current Invention#### that are missing from field specific_attributes_inv in markdown table ####specific_attributes_invention#### and include the details in the output.
Print the output of this step in json format with title ==additional_attributes_invention== where each attribute is in a separate row. Print the json ==additional_attributes_invention== in this format:
{"additional_attributes_invention": [ {"additional_attributes_inv": ...}, ..]}. Do not print the process in the output.' WHERE "prompt_seq_id" = 426;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'I am providing you the following inputs: 
####additional_attributes_invention####  as markdown table
####grouped_entity_invention#### as markdown table. 

Step 9: Co-relate each/every additional entity attributes in field additional_attributes_inv from markdown table ####additional_attributes_invention#### with the most appropriate entity from field entities_inv from markdown table ####grouped_entity_invention#### based on the implied use/benefit of the attribute. Print the output of this step in json format with title ==additional_entity_attributes_invention==. Print the json ==additional_entity_attributes_invention== in this format:
{"additional_entity_attributes_invention": [ {"id_inv": ..., "additional_attributes_inv":...}, ..]}. Do not print process in the output.

Step 9.1: Re-run step 9 till each/every additional entity attribute from field  additional_attributes_invention from markdown table ####additional_attributes_invention#### is correlated with the most appropriate entity from field entities_inv from markdown table ####grouped_entity_invention#### based on the implied use/benefit of the attribute. Do not print process in the output.' WHERE "prompt_seq_id" = 429;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'I am providing you the following inputs:
####Claims####
####Current Invention
####specific_attributes_claims#### in markdown table format
####total_attributes_invention#### in markdown table format
to perform the following steps. 

Step 7: Co-relate all the specific attributes for each claim from field specific_attributes_claim from markdown table ####specific_attributes_claims####  with the corresponding related specific attributes from field all_invention_attributes from markdown table  ####total_attributes_invention####.  

Print the output of this step in json format with title ==entity_attributes_rewritten== where each entity is in a separate row. Print the json ==entity_attributes_rewritten== in this format:
{"entity_attributes_rewritten": [ {"id_clm": .., "id_inv": ...}, ..]}. Do not print the process in the output.

Step 7.1: Please continue the process of Step 7 for all the claims referenced from field  claim_number from json ####specific_attributes_claims#### in the output. Ensure the response is generated in one go.' WHERE "prompt_seq_id" = 435;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'I am providing you the following inputs:

####entity_attributes_rewritten#### in markdown table format
####total_attributes_invention#### in markdown table format
to perform the following steps. 

Step 8: Identify the ids from field id_inv from markdown table ####total_attributes_invention#### that are not correlated
with any of the ids from field id_clm in markdown table ####entity_attributes_rewritten####.
Print the output of this step in JSON format as follow:
{"additional_entity_attributes_rewritten": [ { "id_inv": ..., "additional_attributes_invention":...}, ..]}. Do not
print process in the output.' WHERE "prompt_seq_id" = 438;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'I am providing you the following inputs:
####specific_attributes_claims#### in markdown table format
####additional_entity_attributes_rewritten#### in markdown table format
to perform the following steps. 


Step 9: Co-relate each/every additional entity attributes identified in markdown table ####additional_entity_attributes_rewritten#### with the most appropriate entity from field entities_claim from markdown table ####specific_attributes_claims#### based on the implied use/benefit of the attribute. Print the output of this step in json format with title ==missing_entity_attributes_rewritten==. Print the json ==missing_entity_attributes_rewritten== in this format:
{"missing_entity_attributes_rewritten": [ { "id_clm:":..., "id_inv": ..., "additional_attributes_invention":...}, ..]}. Do not print process in the output.

Step 9.1: Re-run step 9 till each/every additional entity attribute from field  additional_attributes_invention from markdown table ####additional_entity_attributes_rewritten#### is correlated with the most appropriate entity from field entities_claim from markdown table ####specific_attributes_claims#### based on the implied use/benefit of the attribute. Do not print process in the output.' WHERE "prompt_seq_id" = 441;

DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id"=389 OR "prompt_seq_id"=392;

INSERT INTO "prompt"."prompt_seq"("prompt_seq_id","seq","prompt_id","short_name","role","instructions","fun_def","inputs","outputs","created_at","modified_at","repeat","is_stream","model","multicalls","max_tokens","prompt_actions","claim_nums","decision_step","step_description","revised_step_description","claim_component_entities","claim_component_actions","skip_append","output_format")
VALUES
(389,1,48,E'block_diagram_description',E'system',E'I am giving you the following inputs to write a detailed explanation for the component and its sub-components:\n1. ####Claims####\n2. ####Current invention####\n3. ####components_entities#### in json format\n4. ####entity_actions_rewritten#### in json format\n5. ####entity_attributes_rewritten#### in json format\n\nStep 1: Choose the component {{component_num}} and all Sub-components for component {{component_num}} from ####components_entities#### for the explanation. Please provide a detailed explanation of the chosen Component and all of its sub-components from the text ####components_entities####. Reference/Quote the entities and their numbers either from field entity_numerical_identifier from json ####entity_actions_rewritten#### or from field system/component/sub-component number from json ####components_entities#### if available.  For example Device (10,40), Object (15, 45). The explanation should include the following points:\n\na) Introduce chosen component  and its significance\n\nb) Define and explain all the entities that comprise the component and its sub-component from ####components_entities#### in context of text ####Claims#### and ####Current Invention####. Quote/cite all the specific numerical attributes, all the specific properties (including physical properties such as state, texture, etc. and particular examples), all the specific quantities/number of the entity/entites, all alternatives and all embodiments/uses/applications for all the entities from ####components_entities#### by referencing the entity attributes from field specific_attributes_claims,  from field all invention attributes and from field additional_attributes_invention from json ####entity_attributes_rewritten#### and explain how they contribute to the component\'s function. Cite/quote all the entity attributes from field specific_attributes_claims,  from field all invention attributes and from field additional_attributes_invention from json ####entity_attributes_rewritten#### without generalising/changing the language of the entity attributes in the explanation. Avoid use of quotations in the explanation.\n\nc) Use the mapping between entities from the field entity_claim and entities from the invention from the field entity_invention from the json ####entity_actions_rewritten#### to explain all the alternative manifestations of the entities in context of ####current invention#### and ####claims####. Do not include the column names or headers in the explanation. \n\nDo not use the word component or sub-component in the explanation, instead use the component/sub-component name while explaining about it. Do not refer to words like "entity", "entities", "entity action", "crucial", "critical" etc. Just state facts from the inputs provided and avoid use of adjectives in the explanation. Avoid use of quotations in the explanation.\nDo not reference claim numbers from field claim_number from json ####entity_actions_rewritten#### in the explanation. Print the output with title ==introduction_component== followed by chosen component number. Output format: ==introduction_component {{component_num}}===\n\nStep 2: Re-run step 1 till \na) all the entities are cited with their numbers either from field entity_numerical_identifier from json ####entity_actions_rewritten#### or from field system/component/sub-component number from json ####components_entities#### in the explanation if available - for example Device (10,40), Object (15, 45).\nb) Cite/quote all the entity attributes from field specific_attributes_claims,  from field all invention attributes and from field additional_attributes_invention from json ####entity_attributes_rewritten####.\nc) no claim numbers are referenced from field claim_number from json ####entity_actions_rewritten#### \nd) words like "entity", "entities", "entity action", "crucial", "critical" etc are not used in the explanation',NULL,E'{"project": ["flowchart_main_element_nums"]}',NULL,NULL,NULL,E'Start',NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(392,4,48,E'block_diagram_description',E'user',E'Explain the Working of the chosen component and it\'s sub-component above by referencing text ####components_entities#### with the json ####entity_action_rewritten####. Ensure that the working/entity actions of the component and sub-component is structured coherently, with each entity action explanation flowing logically into the next. The language should be technical yet clear, catering to a professional audience with the aim of providing a thorough understanding of the component\'s workings. :\n(a) Reference, define and describe in detail all the entity actions associated with all the entities of the chosen component and its sub-components from text ####components_entities#### by mapping component entities with the corresponding entities from json ####entity_action_rewritten####so that a technical person can understand without making any assumptions.  (do not refer to the entity action explicitly)\n(b) For each entity action, explain its nature (what), purpose (why), context (when and under what conditions), and method (how). \n(c) Use your knowledge base to include any implicit entities, components, actions, or details not explicitly mentioned in field entity_action_claim or in field entity_action_invention in json #### entity_action_rewritten#### but crucial for a complete understanding of all the entity actions and how they flow logically into one another for the working of the system. \n\nMake sure to all the entities are cited with  their numbers either from field entity_numerical_identifier from json ####entity_actions_rewritten#### or from field system/component/sub-component number from json ####components_entities#### associated with each component/sub-component in the explanation if the number is available.- for example Device (10,40), Object (15, 45). Do not number entities in absence of entity_numerical_identifier or refer to words like "entity", "entities", "entity action", "crucial", "critical" etc. Do not repeat anything from the explanation that explains the entities comprising the component and sub-component from above. Print the output with title ==explanation_component== followed by chosen component number. Output format: ==explanation_component {{component_num}}==',NULL,E'{"project": ["flowchart_main_element_nums"]}',E'{"project": ["block_diagram_description"]}',NULL,NULL,E'End',TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text');

UPDATE "prompt"."prompt_seq" SET "instructions" = 'I am providing you the following inputs:
####specific_attributes_claims#### in markdown table format
####additional_entity_attributes_rewritten#### in markdown table format
to perform the following steps. 


Step 9: Co-relate each/every additional entity attributes identified in markdown table ####additional_entity_attributes_rewritten#### with the most appropriate entity from field entities_claim from markdown table ####specific_attributes_claims#### based on the implied use/benefit of the attribute. Print the output of this step in json format with title ==missing_entity_attributes_rewritten==. Print the json ==missing_entity_attributes_rewritten== in this format:
{"missing_entity_attributes_rewritten": [ { "id_clm:":..., "id_inv": ...}, ...]}. Do not print process in the output.

Step 9.1: Re-run step 9 till each/every additional entity attribute from field  additional_attributes_invention from markdown table ####additional_entity_attributes_rewritten#### is correlated with the most appropriate entity from field entities_claim from markdown table ####specific_attributes_claims#### based on the implied use/benefit of the attribute. Do not print process in the output.' WHERE "prompt_seq_id" = 441;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'I am giving you the following inputs to write a detailed explanation
1. ####Current invention####
2. ####entity_attributes_invention#### in markdown table format
3.####additional_entities_to_describe#### in markdown table format 

Step 1: From the input markdown table ####additional_entities_to_describe####, verify that the field entities_inv_addl has any data. If this condition is satisfied, indicating that the field entities_inv_addl has some data, then proceed to step 2. Output in json format with title: describe_additional_entities with fields 
exp - explain the condition
flag - true/false based on is the condition. Output in json format as{"entities_inv_addl": {"exp": ..., "flag": ...}}

Step 2: Co-relate the entities from field entities_inv_addl from markdown table ####additional_entities_to_describe#### with the field entities_inv from markdown table ####entity_attributes_invention####.
The co-relation should be done by going through field entities from markdown table ####entity_attributes_invention#### across the entire field serial number from markdown table ####entity_attributes_invention####. Print the output in json format with title -==a==. The json ==a== contains following fields  entity, serial_number. Print the json ==a== in this format:
{"a": [ { "entity":..., "serial_number":...}, ..]}. Do not print process in the output.

Step 3: Quote the entire text from field all_invention_attributes from markdown table ####entity_attributes_invention#### for the entities from field entity from json "a" from step 2 by doing the following:
a) Co-relate the entities from field entities_inv_addl from markdown table ####additional_entities_to_describe#### with the field entities_inv from markdown table ####entity_attributes_invention####.
The co-relation should be done by going through field entities from markdown table ####entity_attributes_invention#### across the entire field serial number from markdown table ####entity_attributes_invention####. Do not print output. 
b) after co-relation, identify the text associated with the entity from field entities_inv from field all_invention_attributes from markdown table ####entity_attributes_invention####.Do not print output. c) After the text identification, quote and print the entire text from field all_invention_attributes from markdown table ####entity_attributes_invention#### in a paragraph format in the output. Do not change the technical language and do not use  words like "serial number" in the output. Do not repeat the step in the output. Output with header ==Explanation Step Missing==' WHERE "prompt_seq_id" = 373;

UPDATE "prompt"."prompt_seq" SET "multicalls" = 'f' WHERE "prompt_seq_id" = 455;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'I am giving you the following inputs to write a detailed explanation for the component and its sub-components:
1. ####Claims####
2. ####Current invention####
3. ####components_entities#### in markdown table format
4. ####entity_actions_rewritten#### in markdown table format
5. ####entity_attributes_rewritten#### in markdown table format

Step 1: Choose the component {{component_num}} and all Sub-components for component {{component_num}} from field system/component/sub-component number from the markdown table #### components_entities####. Please provide a detailed explanation of the chosen Component and all of its sub-components from the markdown table  ####components_entities#### by doing the following:

a) Introduce chosen component  and its significance.

b) Define and explain all the entities for the chosen component and its sub-components from field entity_claim and from field entities_inv from markdown table ####components_entities####. For the definition, co-relate the entities from field entity_claim and from field entities_inv from markdown table ####components_entities#### with the entities from field entities_claim and from field entities_inv from markdown table ####entity_attributes_rewritten##### to identify all their cited attributes. After making the co-relation do the following: Quote/cite all the attributes including all the specific numerical attributes, all the specific properties (including physical properties such as state, texture, etc. and particular examples), all the specific quantities/number of the entity/entites, all alternatives and all embodiments/uses/applications for all the co-related entities, without changing/generalising  the technical details/language from the markdown table ####entity_attributes_rewritten#### from field 1) specific_attributes_claims and 2) from field all invention attributes and 3) from field additional_attributes_invention. Once the attributes are cited and quoted,  explain how they contribute to the invention from text ####Claims#### and text ####Current invention####. Avoid use of quotations in the explanation. Avoid use of quotations in the explanation.

Do not use the word component or sub-component in the explanation, instead use the component/sub-component name while explaining about it. Do not refer to words like "entity", "entities", "entity action", "crucial", "critical" etc. Just state facts from the inputs provided and avoid use of adjectives in the explanation. Avoid use of quotations in the explanation. Print the output with title ==introduction_component== followed by chosen component number. Output format: ==introduction_component {{component_num}}===

Step 2: Re-run step 1 till 
a) all the entities are cited with their numerical identifiers either from field entity_numerical_identifier or from field system/component/sub-component number from markdown table  ####components_entities#### in the explanation if available - for example Device (10,40), Object (15, 45).
b) Cite/quote all the entity attributes from field specific_attributes_claims,  from field all invention attributes and from field additional_attributes_invention from markdown table ####entity_attributes_rewritten####.
c) words like "entity", "entities", "entity action", "crucial", "critical" etc are not used in the explanation' WHERE "prompt_seq_id" = 389;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'Explain the Working of the chosen component and all it''s sub-components above by referencing the markdown table ####components_entities#### with the markdown table  ####entity_actions_rewritten####. Ensure that the working/entity actions of the component and sub-component is structured coherently, with each entity action explanation flowing logically into the next. The language should be technical yet clear, catering to a professional audience with the aim of providing a thorough understanding of the component''s workings by doing the following:
(a) Reference, define and describe in detail all the entity actions associated with all the entities of the chosen component and all its sub-components from markdown table  ####components_entities####. For the definition, co-relate the entities from field entity_claim and from field entities_inv from markdown table ####components_entities#### with the entities from field entities_claim and from field entities_inv from markdown table ####entity_actions_rewritten####.  After the co-relation, Quote/cite all the entity actions for all the co-related entities, without changing/generalising  the technical details/language from the markdown table ####entity_actions_rewritten#### from field 1)entity_action_claim and field 2)entity_action invention.  For each entity action, explain its nature (what), purpose (why), context (when and under what conditions), and method (how). 
(b) Use your knowledge base to include any implicit entities, components, actions, or details not explicitly mentioned in field entity_action_claim or in field entity_action_invention in markdown table#### entity_actions_rewritten#### but crucial for a complete understanding of all the entity actions and how they flow logically into one another for the working of the system. 

Make sure to all the entities are cited with  their numbers either from field entity_numerical_identifier from or from field system/component/sub-component number from markdown table ####components_entities#### associated with each component/sub-component in the explanation if the number is available.- for example Device (10,40), Object (15, 45). Do not number entities in absence of entity_numerical_identifier or refer to words like "entity", "entities", "entity action", "crucial", "critical" etc. Do not repeat anything from the explanation that explains the entities comprising the component and sub-component from above. Write the explanation in a paragraph format. Print the output with title ==explanation_component== followed by chosen component number. Output format: ==explanation_component {{component_num}}== ' WHERE "prompt_seq_id" = 392;


DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id" = 368 OR "prompt_seq_id" = 369 or "prompt_seq_id" = 389 OR "prompt_seq_id" = 390 OR "prompt_seq_id" = 392 or "prompt_seq_id" = 409 OR "prompt_seq_id" = 410 OR "prompt_seq_id" = 360 OR "prompt_seq_id" = 351 OR "prompt_seq_id" = 404 OR "prompt_seq_id" = 409;

INSERT INTO "prompt"."prompt_seq"("prompt_seq_id","seq","prompt_id","short_name","role","instructions","fun_def","inputs","outputs","created_at","modified_at","repeat","is_stream","model","multicalls","max_tokens","prompt_actions","claim_nums","decision_step","step_description","revised_step_description","claim_component_entities","claim_component_actions","skip_append","output_format")
VALUES
(368,1,49,E'flowchart_description',E'system',E'I am giving you the following inputs to write a detailed explanation for the Step and sub-steps :\n1. ####Claims####\n2. ####Current invention####\n3. ####steps_sub-steps#### in markdown table format.\n4. ####entity_actions_rewritten#### in markdown table format.\n5. ####entity_attributes_rewritten#### in markdown table format\n\n\nStep 1: Choose the step {{step_num}} and all its sub-steps (if any) from field Step/Sub-Step number from the markdown table ####steps_sub-steps####. Please provide a detailed explanation of the chosen Step and all of its sub-steps from the markdown table#### steps_sub-steps#### by doing the following:\na)Define all the entity actions pertaining to all entities from field entity_claims and from field entities_inv . For the definition co-relate the entities from field entity_claim and from field entities_inv from markdown table ####steps_sub-steps#### with the entities from field entities_claim and from field entities_inv from markdown table ####entity_actions_rewritten#### to identify all their entity actions. After making the co-relation do the following: Quote/cite all the entity actions for all the co-related entities, without changing/generalising  the technical details/language from the markdown table ####entity_actions_rewritten#### from field 1)entity_action_claim and field 2)entity_action invention. \nb) Use your knowledge base to include any implicit entities, steps, actions, or details not explicitly mentioned in field entity_action_claim or in field entity_action_invention in markdown table ####entity_actions_rewritten#### but crucial for a complete understanding of all the entity actions and how they flow logically into one another for the working of the system.\nc)The explanation  must further include all details of all the entities involved from field entities_claim and from field entities from markdown table ####entity_attributes_rewritten####. For the explanation, co-relate the entities from field entity_claim and from field entities_inv from markdown table ####steps_sub-steps#### with the entities from field entities_claim and from field entities_inv from markdown table ####entity_attributes_rewritten##### to identify all their cited attributes. After making the co-relation do the following: Quote/cite all the attributes including all the specific numerical attributes, all the specific properties (including physical properties such as state, texture, etc. and particular examples), all the specific quantities/number of the entity/entites, all alternatives and all embodiments/uses/applications for all the co-related entities, without changing/generalising  the technical details/language from the markdown table ####entity_attributes_rewritten#### from field i) specific_attributes_claims and ii) from field all_invention_attributes and iii) from field additional_attributes_invention. Once the attributes are cited and quoted,  explain how they contribute to the invention from text ####Claims#### and text ####Current invention####. Avoid use of quotations in the explanation. \nInclude implicit entities/steps/working/components/parts/conditions/ranges that will explain all the entity actions of/by/on the entities involved for the chosen step and all its sub-steps only so that a technical expert can understand the entity actions of all entities in the chosen step and sub-step without having to make any assumptions.  Reference chosen step and all its sub-step numbers from field Step/Sub-Step number from the  markdown table ####steps_sub-steps#### in the explanation without using the word step or sub-step. Write the explanation in a paragraph format. Do not repeat the step in the output. Output with header ==Explanation Step {{step_num}}==\n\nStep 2: Ensure that the explanation from step 1 is only written for the chosen step and all its sub-steps. For the chosen step and all its sub-steps, ensure the explanation from step 1 details the entity actions from field 1)entity_action_claim and field 2)entity_action invention from the markdown table ####entity_actions_rewritten#### and includes all the entity attributes from field i) specific_attributes_claims and ii) from field all_invention_attributes and iii) from field additional_attributes_invention from markdown table ####entity_attributes_rewritten#### without changing the language. Ensure the explanation is written in a paragraph format by referencing the step numbers from field Step/Sub-Step number from markdown table ####steps_sub-steps####. Ensure the chosen step and all its sub-steps are numbered from field Step/Sub-Step number from the markdown table ####steps_sub-steps#### in the explanation. Step 2 is only to ensure the proper running of step 1 and should not print an output. Output with header ==Explanation Step {{step_num}}==\n',NULL,E'{"project": ["flowchart_main_element_nums"]}',NULL,NULL,NULL,E'Start',NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(369,2,49,E'flowchart_description',E'user',E'Claims: ####{{claims}}####   \\n Current invention: ####{{invention}}####\\n Steps_sub-steps: ####{{element_explanations_desc}}####\\n   entity_actions_rewritten: ####{{entity_actions_rewritten}}####\\n  entity_attributes_rewritten: ####{{total_entity_attributes_rewritten}}####',NULL,E'{"project": ["claims", "invention", "element_explanations_desc", "entity_actions_rewritten", "total_entity_attributes_rewritten"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(389,1,48,E'block_diagram_description',E'system',E'I am giving you the following inputs to write a detailed explanation for the component and its sub-components:\n1. ####Claims####\n2. ####Current invention####\n3. ####components_entities#### in markdown table format\n4. ####entity_actions_rewritten#### in markdown table format\n5. ####entity_attributes_rewritten#### in markdown table format\n\nStep 1: Choose the component {{component_num}} and all Sub-components for component {{component_num}} from field system/component/sub-component number from the markdown table #### components_entities####. Please provide a detailed explanation of the chosen Component and all of its sub-components from the markdown table  ####components_entities#### by doing the following:\n\na) Introduce chosen component  and its significance.\n\nb) Define and explain all the entities for the chosen component and its sub-components from field entity_claim and from field entities_inv from markdown table ####components_entities####. For the definition, co-relate the entities from field entity_claim and from field entities_inv from markdown table ####components_entities#### with the entities from field entities_claim and from field entities_inv from markdown table ####entity_attributes_rewritten##### to identify all their cited attributes. After making the co-relation do the following: Quote/cite all the attributes including all the specific numerical attributes, all the specific properties (including physical properties such as state, texture, etc. and particular examples), all the specific quantities/number of the entity/entites, all alternatives and all embodiments/uses/applications for all the co-related entities, without changing/generalising  the technical details/language from the markdown table ####entity_attributes_rewritten#### from field 1) specific_attributes_claims and 2) from field all_invention_attributes and 3) from field additional_attributes_invention. Once the attributes are cited and quoted,  explain how they contribute to the invention from text ####Claims#### and text ####Current invention####. Avoid use of quotations in the explanation. Avoid use of quotations in the explanation.\n\nDo not use the word component or sub-component in the explanation, instead use the component/sub-component name while explaining about it. Do not refer to words like "entity", "entities", "entity action", "crucial", "critical" etc. Just state facts from the inputs provided and avoid use of adjectives in the explanation. Avoid use of quotations in the explanation. Print the output with title ==introduction_component== followed by chosen component number. Output format: ==introduction_component {{component_num}}===\n\nStep 2: Re-run step 1 till \na) all the entities are cited with their numerical identifiers either from field entity_numerical_identifier or from field system/component/sub-component number from markdown table  ####components_entities#### in the explanation if available - for example Device (10,40), Object (15, 45).\nb) Cite/quote all the entity attributes from field specific_attributes_claims,  from field all_invention_attributes and from field additional_attributes_invention from markdown table ####entity_attributes_rewritten####.\nc) words like "entity", "entities", "entity action", "crucial", "critical" etc are not used in the explanation\n',NULL,E'{"project": ["flowchart_main_element_nums"]}',NULL,NULL,NULL,E'Start',NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(390,2,48,E'block_diagram_description',E'user',E'Claims: ####{{claims}}####\\n Current invention: ####{{invention}}####\\n components_entities: ####{{element_explanations}}#####\\n entity_actions_rewritten: ####{{entity_actions_rewritten}}####\\n entity_attributes_rewritten: ####{{total_entity_attributes_rewritten}}####',NULL,E'{"project": ["claims", "invention", "element_explanations", "entity_actions_rewritten", "total_entity_attributes_rewritten"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(392,4,48,E'block_diagram_description',E'user',E'Explain the Working of the chosen component and all it\'s sub-components above by referencing the markdown table ####components_entities#### with the markdown table  ####entity_actions_rewritten####. Ensure that the working/entity actions of the component and sub-component is structured coherently, with each entity action explanation flowing logically into the next. The language should be technical yet clear, catering to a professional audience with the aim of providing a thorough understanding of the component\'s workings by doing the following:\n(a) Reference, define and describe in detail all the entity actions associated with all the entities of the chosen component and all its sub-components from markdown table  ####components_entities####. For the definition, co-relate the entities from field entity_claim and from field entities_inv from markdown table ####components_entities#### with the entities from field entities_claim and from field entities_inv from markdown table ####entity_actions_rewritten####.  After the co-relation, Quote/cite all the entity actions for all the co-related entities, without changing/generalising  the technical details/language from the markdown table ####entity_actions_rewritten#### from field 1)entity_action_claim and field 2)entity_action invention.  For each entity action, explain its nature (what), purpose (why), context (when and under what conditions), and method (how). \n(b) Use your knowledge base to include any implicit entities, components, actions, or details not explicitly mentioned in field entity_action_claim or in field entity_action_invention in markdown table#### entity_actions_rewritten#### but crucial for a complete understanding of all the entity actions and how they flow logically into one another for the working of the system. \n\nMake sure to all the entities are cited with  their numbers either from field entity_numerical_identifier from or from field system/component/sub-component number from markdown table ####components_entities#### associated with each component/sub-component in the explanation if the number is available.- for example Device (10,40), Object (15, 45). Do not number entities in absence of entity_numerical_identifier or refer to words like "entity", "entities", "entity action", "crucial", "critical" etc. Do not repeat anything from the explanation that explains the entities comprising the component and sub-component from above. Write the explanation in a paragraph format. Print the output with title ==explanation_component== followed by chosen component number. Output format: ==explanation_component {{component_num}}==',NULL,E'{"project": ["flowchart_main_element_nums"]}',E'{"project": ["block_diagram_description"]}',NULL,NULL,E'End',TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(410,2,53,E'extra_description',E'user',E'Claims:####{{claims}}#### \\n Current invention: ####{{invention}}####\\n components_entities: ####{{element_explanations}}####\\n entity_actions_rewritten: ####{{entity_actions_rewritten}}\\n entity_attributes_rewritten:####{{total_entity_attributes_rewritten}}####',NULL,E'{"project": ["claims", "invention", "element_explanations", "entity_actions_rewritten", "total_entity_attributes_rewritten"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(351,1,46,E'block_diagram_common',E'system',E'I have provided following inputs to perform steps 5 to 9\n####Claims####\n####Current Invention####\n####entity_actions_rewritten####in markdown table format\n####claim_types#### in json format\n\nStep 5: An independent claim does not reference any other claim. However, a dependent claim always references another claim on which it depends. Using the above logic do the following: \na) Group only the system claims from field system_claim_numbers from json claim_types. \nb) No two independent claims can be grouped in the same claim group. \nPrint the output in a json format with title==claim_groups==. \nPrint the json ==claim_groups== in this format:\n{"claim_groups": [ { "claims_group_number":..., "system_independent_claim": ..., "system_dependent_claim":....}, ..]}. Ensure no dependent claim is considered as a distinct claim_group. Do not print the process in the output.  \n \nStep 5.1: Rerun the step till each system claim from from field system_claim_numbers from json claim_types (independent and/or dependent) is referenced in json claim_groups. Do not include component/apparatus/product/device/machine type claims under system claim category in the output. Do not print output for this step.\n\n\nStep 6:  For the claims identified from fields system_independent_claim and from field system_dependent_claim from json ####claim_groups####, use the entity actions from field {entity_action_claim} from markdown table ####entity_actions_rewritten#### to identify which dependent claim depends on which entity action of the independent claim or the entity action in other dependent claims in context of text ####Claims####. Provide the mapping between the dependent claims and the claim entity actions of the independent claim or the entity actions of other dependent claims on which it depends. Output format: Dependent claim --> Independent claim --> reason etc. \nPrint the json ==claim_dependency== in this format:\n{"claim_dependency": [{"claims_group_number":..., "dependent_claim": ..., "independent_claim": ..., "reason": ...}, ...]}\n\nStep 7: Identify and name the system that encompasses the specific entity actions associated with text ####current invention#### from field entity action_invention from markdown table ####entity_actions_rewritten#### and all the claims from ==system_Claims==. Output format: ==System==\nPrint the json ==System== in this format:\n{"system": ...}\n\n\nStep 8: a) Co-relate the identified claims for each claim group from field independent_claim, from field dependent_claim from json claim_groups with the field claim_number from markdown table ####entity_actions_rewritten####.\nb) Identify all the entities from field entity_claim and entities_inv from markdown table ####entity_actions_rewritten#### for the co-related claim numbers for each claim group.\nc) Group all the identified entities for each claim group from field entity_claim and from field entities_inv from markdown table  ####entity_actions_rewritten#### into components and sub-components using overlaps/commonalities in their entity action from either 1) from field entity_action_claim or from 2) field entity_action_invention from markdown table ####entity_actions_rewritten#### and using the output of step 6. These components and sub-components should be grouped such that when working together they manifest the invention from text ####Claims#### and text ####Current invention####. \nd) The grouped entities should be referred as component/sub-component only in the field component/sub-component type in the output.\ne) Ensure that entities from both field entity_claim and from field entities_inv are quoted/cited in the output. Ensure all the claims (both independent and dependent claims) identified for each claim group in the output of step 5 are referenced in the output. \nf) Number the system, components and sub-components in a unique numbering series with increment of 2 for each component as follows - if the system is numbered 500, the component should be numbered 502 and it\'s sub-component should be numbered 502-a, 502-b etc. The next component will be numbered 504 and it’s sub-component will be numbered 504-a, 504-b etc. Follow a unique number series for each claim group. For example if claim group 1 is starting with 500, claim group 2 should start from 600. Print the output in json format with title ==component_entities== where every component/ sub-component is in a separate row. The json ==component_entities== will be in this format:\n{"component_entities": [ {"claims_group_number":...., "component/sub-component type":..., "component/sub-component number":..., "component/sub-component name ": ...,  "entity_claim":...., "entity_numerical_identifier":..., "entities_inv":..., "claim numbers":...}, ..]}. Do not repeat the process in the output.\n\nStep 8.1: Rerun step 8 till all the entities from both field entity_claim and from field entities_inv are referenced in the output and all the claims from field independent claims and from field dependent_claims for each claim group from json ==claim_groups== are referred in the output.\n\nStep 9: Number the system, component and sub-component from field  Component/Sub-component for each claim group from json ==component_entities==, in an unique numbering series with increment of 2 for each component as follows - if the system is numbered 500, the component should be numbered 502 and it\'s sub-component should be numbered 502-a, 502-b etc. The next component will be numbered 504 and it’s sub-component will be numbered 504-a, 504-b etc. The value in the field Component type - system/component/sub-component will only be either "system" or "component" or "sub-component". and any other value is not permitted in this field. Print the output json format with title ==component_sub-component==. The json ==component_sub-component== will be in this format:\n{"component_sub-component": [{"claims_group_number":...., "Component type - system/component/sub-component": "system/component/sub-component", "system/component/sub-component number": "...", "system/component/sub-component name":..., "explanation":..., "entity_claim":..., "entity_numerical_identifier":..., "entities_inv":..., "claim numbers":...}, ..]}. Do not print process in the output.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(360,1,45,E'flowchart_common',E'system',E'I am providing you the following inputs to perform steps 5 to 10. \n####Claims####\n####Current Invention####\n####entity_actions_rewritten####in markdown table format\n####claim_type#### in json format\n\nStep 5: An independent claim does not reference any other claim. However, a dependent claim always references another claim on which it depends. Using the above logic do the following: \na) Group only the method claims from field method_claim_numbers from json ####claim_type####. \nb) No two independent claims can be grouped in the same claim group. \nPrint the output in a json format. \nPrint the json ==claim_groups== in this format:\n{"claim_groups": [ { "claims_group_number":..., "Method_independent_claim": ...,  "Method_dependent_claim":....}, ..]}. Ensure no dependent claim is considered as a distinct claim_group. Do not print the process in the output.\n\nStep 5.1: Rerun the step till each method claims from field method_claim_numbers \n(independent and/or dependent) is referenced in json claim_groups. Do not print output for this step. \n\nStep 6:  For the claims identified from the output of step 5, use the entity actions from field entity_action_claim from markdown table ####entity_actions_rewritten#### to identify which dependent claim depends on which entity action of the independent claim or the entity action in other dependent claims in context of text ####Claims####. Provide the mapping between the dependent claims and the claim entity actions of the independent claim or the entity actions of other dependent claims on which it depends. Output format: Dependent claim --> Independent claim --> reason etc. \nPrint the json ==claim_dependency== in this format:\n{"claim_dependency": [{"claims_group_number":..., "dependent_claim": ..., "independent_claim": ..., "reason": ...}, ...]}\n\nStep 7: a) Identify all the main steps/entity actions for all the claims for each claim group from field claims_group_number from json ==claim_groups==, using the json claim_dependency  that occur in a logical sequence to accomplish the method in context of all the claims from Step 5 and the ####current invention####. b)  Identify all the the sub-steps/parallel steps/entity actions that are optional/additional details for the main steps, if available,  to accomplish the method in context of claims from json ==claim_groups==. c) Ensure all the claims for each claim group from json ==claim_groups== are referred in Step 7 output. Follow a unique numbering series for each claim group while numbering the step and sub-step. For example if claim group 1 is starting with 100, claim group 2 should start from 200. Use an even numbering series with increment of 2 for each step, as follows - if step number is 100, it\'s sub-step number will be 100-a, 100-b, for step 102 the sub-step will be 102-a, 102-b etc. d) The value in the field Step/Sub-Step type will only be either "step" or "sub-step" and any other value is not permitted in this field. Print the output in a json format with title: ==Steps_sub-steps== where every step/ sub-step is in a separate row. \nPrint the json ==Steps_sub-steps== in this format:\n{"Steps_sub-steps": [ { "claims_group_number":..., "Step/Sub-Step type":"step/sub-step", "Step/Sub-Step number": ..., "explanation quote from text ####claims####":..., "claim number":..., "entity_claim":..., "entity_numerical_identifier":..., "entities_inv":...}, ..]}. Do not print process in the output.\n\nStep 7.1: Rerun step 7 till each claim from field Method_independent_claim and from field Method_dependent_claims for each claim group from json ==claim_groups== are referenced in the output.\n\nStep 8: Rewrite step 7 by doing the following:\na) keep the step and sub-step numbers the same\nb) Re-write the explanation from "explanation quote from text ####Claims####" in a concise form without changing the technical language/vocabulary or alter any of the numerical attributes, specific properties (including physical properties such as state, texture, etc. and particular examples), specific quantities details/parameters/definitions in context of text ####Claims####.\nPrint the output of this step in json format with title ==Steps_sub-steps Rewrite== The json ==Steps_sub-steps Rewrite== will have the following fieds: claims_group_number, Step/Sub-Step number, explanation, claim number. \nPrint the json ==Steps_sub-steps Rewrite== in this format:\n{"Steps_sub-steps Rewrite": [ {"claims_group_number":..., "Step/Sub-Step type":"step/sub-step", "Step/Sub-Step number":..., "explanation": ..., "claim number":...}, ..]}. Do not print process in the output.\n\nStep 9: A decision step is defined as a point within a step or sub-step where a determination is made, which can influence the subsequent steps or the flow of the method. Using this definition of a decision step, identify all the decision making steps from field explanation for each step/sub-step from field  Step/Sub-Step number from json Steps_sub-steps Rewrite. Identify the decision making steps for each claim group from field claims_group_number.  Print the output of this step in json format with title ==decision_steps==. Print the json ==decision_steps== in this format:\n{"decision_steps": [ {"claims_group_number":..., "Decision step":...}, ..]}. Do not print process in the output.\n\nStep 10: Identity and list all the entities from field \'entities_inv\' from markdown table ####entity_actions_rewritten#### that are not directly mentioned in the claims but are related to the broader context of the invention or the application of the claimed method. Quote them from field \'entities_inv\' as is from markdown table ####entity_actions_rewritten####. Print output in json format with title ==additional_entities_to_describe==. The json ==additional_entities_to_describe==will have the field entities_inv_addl. Print the json ==additional_entities_to_describe== in this format:\n{"additional_entities_to_describe": [ { "entities_inv_addl":...}, ..]}. Do not print process in the output.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(404,1,52,E'extra_diagram_common',E'system',E'I have provided following inputs to perform steps 5 to 7\n####Claims####\n####Current Invention####\n####entity_actions_rewritten####in markdown table format\n####claim_type#### in json format\n\nStep 5:  Identify only other claims from field other_claim_numbers from json claim_types. Print the output in json format with title ==other_claims==. The json ==other_claims== will be in this format \n{"other_claims":{"claim_numbers": [ ...]}}. Do not print the process in the output. \n\nStep 5.1: Rerun the step till all the other claims from field other_claim_numbers from json claim_types  (both independent and dependent) are referenced in json other_claims. Do not print output for this step.\n\nStep 6: a) Co-relate only the Other claims from field other_claim_numbers from json claim_types with the field claim_number from markdown table ####entity_actions_rewritten####. \nb) After co-relation, only for the co-related claim numbers from field claim_number from markdown table ####entity_actions_rewritten#### identify all the entities from field entity_claim and entities_inv from markdown table ####entity_actions_rewritten####, \nC) Then group all the identified entities from field entity_claim and from field entities_inv from markdown table  ####entity_actions_rewritten#### into logical groups. The logical groups must be made on the basis similarity/commonality in entity actions from either a) field entity_action_claim or from b) field entity_action_invention. These logical groups should be grouped such that when working together they manifest the invention from text ####Claims#### and text ####Current invention####. Ensure the logical groups are such that the entities from entitiy_claim and entities_inv are represented/written/referenced only in one row/sr. no. Ensure that entities from both field entity_claim and from field entities_inv are quoted/cited in the column grouped entities in the output. \nPrint the output of this step in json format. The output json should be printed with title ==grouped entities==  in this format: {"grouped entities": [ { "Sr.no":...., "grouped entities":[.,.,.,], "entity actions": ...,  "entity actions purpose":..., "Claim number":....}, ..]}. Do not print the step in the output.\n\n\nStep 7: Re-Group all the entities from field  Grouped Entities from json ==grouped entities== into logical groups such that all redundancies/overlaps in field grouped entities is avoided. The logical groups from json ==grouped entities== must be regrouped either on the basis of (a) similarity/commonality in entity actions from  field Entity Actions  even if the language of entity actions is different OR (b) Similarity/commonality in purpose of entity actions from field entity actions purpose even if the language is different. These logical groups should be re-grouped such that when working together they manifest the invention from text ####Claims#### and text ####Current invention####. Ensure the logical groups are such that all the entities from field Grouped Entities are represented/written/referenced only in one row/sr. no . Ensure that entities from Grouped Entities are quoted/cited in the field Re-grouped Entities in the output. Print the output in a Json format with title of the json ==component_entities==. The json ==component_entities== must be in \nthis format: {"component_entities": [{ "component number": ..., "re-grouped entities":[..., ..., ...], "entity actions": ...,  "entity actions purpose": ...}]}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(409,1,53,E'extra_description',E'system',E'I am giving you the following inputs to write a detailed explanation for the component and its sub-components:\n1. ####Claims####\n2. ####Current invention####\n3. ####components_entities#### in markdown table format\n4. ####entity_actions_rewritten#### in markdown table format\n5. ####entity_attributes_rewritten##### in markdown table format\n\nStep 1: Choose the component number {{component_num}} from field component number from the markdown table ####components_entities#### for explaining the working and explaining the attributes of all the entities from field Re-grouped Entities. \nThe explanation should be written by following the instructions in a, b and c below:\n\na)Reference, define and describe in detail all the entity actions associated with all the entities of the chosen component and all its sub-components from field Re-grouped Entities from markdown table  ####components_entities####. For the definition, co-relate the entities from Re-grouped Entities from markdown table ####components_entities#### with the entities from field entities_claim and from field entities_inv from markdown table ####entity_actions_rewritten####.  After the co-relation, Quote/cite all the entity actions for all the co-related entities, without changing/generalising  the technical details/language from the markdown table ####entity_actions_rewritten#### from field 1)entity_action_claim and field 2)entity_action invention.  For each entity action, explain its nature (what), purpose (why), context (when and under what conditions), and method (how). \n(b) Use your knowledge base to include any implicit entities, components, actions, or details not explicitly mentioned in field entity_action_claim or in field entity_action_invention in markdown table#### entity_actions_rewritten#### but crucial for a complete understanding of all the entity actions and how they flow logically into one another for the working of the system.\nc) Define and explain all the entities for the chosen component number from field Re-grouped Entities from markdown table ####components_entities####. For the definition, Co-relate the entities from field Re-grouped Entities from json components_entities with the entities from field entities_claim and from field entities_inv from markdown table ####entity_attributes_rewritten##### to identify all their cited attributes. After making the co-relation do the following: Quote/cite all the attributes for all the co-related entities, without changing the technical details/language, from markdown table ####entity_attributes_rewritten#### from field 1) specific_attributes_claims and 2) from field all_invention_attributes and 3) from field additional_attributes_invention. Once the attributed are cited and quoted,  explain how they contribute to the invention from text ####Claims#### and text ####Current invention####. Avoid use of quotations in the explanation.\n\nMake sure to all the entities from field Re-grouped Entities are cited with  their numbers from field entity_numerical_identifier from markdown table ####components_entities#### in the explanation if the number is available.- for example Device (10,40), Object (15, 45).\nDo not refer to words like "entity", "entities", "entity action", "crucial", "critical" etc. Just quote facts from the inputs provided and avoid use of adjectives in the explanation. Avoid use of quotations in the explanation. Write the explanation in a paragraph format. Print the output with title ==entities explanation== followed by chosen component number. \nOutput format: ==entities explanation {{component_num}}===\n\nStep 2: Re-run step 1 till \na) Quote/cite all the actions for all the entities, without changing the technical details/language, from markdown table #####entity_actions_rewritten#### from field 1) entity_action_claim and 2) from field entity_action_invention. \nb)Quote/cite all the attributes for all the entities, without changing the technical details/language, from markdown table #####entity_attributes_rewritten#### from field 1) specific_attributes_claims and 2) from field all_invention_attributes and 3) from field additional_attributes_invention.\nc) No claim numbers should be referenced from field claim_number from markdown table ####entity_actions_rewritten#### in the explanation\nd) Do not use words like "entity", "entities", "entity action", "crucial", "critical" etc in the explanation\n',NULL,E'{"project": ["flowchart_main_element_nums"]}',NULL,NULL,NULL,E'Start',NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text');


DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id" = 360 OR "prompt_seq_id" = 368 or "prompt_seq_id" = 383 OR "prompt_seq_id" = 386 OR "prompt_seq_id" = 387 or "prompt_seq_id" = 388 OR "prompt_seq_id" = 389 OR "prompt_seq_id" = 399 OR "prompt_seq_id" = 400 OR "prompt_seq_id" = 452 OR "prompt_seq_id" = 454 OR "prompt_seq_id" = 455;

INSERT INTO "prompt"."prompt_seq"("prompt_seq_id","seq","prompt_id","short_name","role","instructions","fun_def","inputs","outputs","created_at","modified_at","repeat","is_stream","model","multicalls","max_tokens","prompt_actions","claim_nums","decision_step","step_description","revised_step_description","claim_component_entities","claim_component_actions","skip_append","output_format")
VALUES
(360,1,45,E'flowchart_common',E'system',E'I am providing you the following inputs to perform steps 5 to 10. \n####Claims####\n####Current Invention####\n####entity_actions_rewritten####in markdown table format\n####claim_type#### in json format\n\nStep 5: An independent claim does not reference any other claim. However, a dependent claim always references another claim on which it depends. Using the above logic do the following: \na) Group only the method claims from field method_claim_numbers from json ####claim_type####. \nb) No two independent claims can be grouped in the same claim group. \nPrint the output in a json format. \nPrint the json ==claim_groups== in this format:\n{"claim_groups": [ { "claims_group_number":..., "Method_independent_claim": ...,  "Method_dependent_claim":....}, ..]}. Ensure no dependent claim is considered as a distinct claim_group. Do not print the process in the output.\n\nStep 5.1: Rerun the step till each method claims from field method_claim_numbers \n(independent and/or dependent) is referenced in json claim_groups. Do not print output for this step. \n\nStep 6:  For the claims identified from the output of step 5, use the entity actions from field entity_action_claim from markdown table ####entity_actions_rewritten#### to identify which dependent claim depends on which entity action of the independent claim or the entity action in other dependent claims in context of text ####Claims####. Provide the mapping between the dependent claims and the claim entity actions of the independent claim or the entity actions of other dependent claims on which it depends. Output format: Dependent claim --> Independent claim --> reason etc. \nPrint the json ==claim_dependency== in this format:\n{"claim_dependency": [{"claims_group_number":..., "dependent_claim": ..., "independent_claim": ..., "reason": ...}, ...]}\n\nStep 7: a) Identify all the main steps/entity actions for all the claims for each claim group from field claims_group_number from json ==claim_groups==, using the json claim_dependency  that occur in a logical sequence to accomplish the method in context of all the claims from Step 5 and the ####current invention####. b)  Identify all the the sub-steps/parallel steps/entity actions that are optional/additional details for the main steps, if available,  to accomplish the method in context of claims from json ==claim_groups==. c) Ensure all the claims for each claim group from json ==claim_groups== are referred in Step 7 output. Follow a unique numbering series for each claim group while numbering the step and sub-step. For example if claim group 1 is starting with 100, claim group 2 should start from 200. Use an even numbering series with increment of 2 for each step, as follows - if step number is 100, it\'s sub-step number will be 100-a, 100-b, for step 102 the sub-step will be 102-a, 102-b etc. d) The value in the field Step/Sub-Step type will only be either "step" or "sub-step" and any other value is not permitted in this field. Print the output in a json format with title: ==Steps_sub-steps== where every step/ sub-step is in a separate row. \nPrint the json ==Steps_sub-steps== in this format:\n{"Steps_sub-steps": [ { "claims_group_number":..., "Step/Sub-Step type":"step/sub-step", "Step/Sub-Step number": ..., "explanation quote from text ####claims####":..., "claim number":..., "entity_claim":..., "entity_numerical_identifier":..., "entities_inv":...}, ..]}. Do not print process in the output.\n\nStep 7.1: Rerun step 7 till each claim from field Method_independent_claim and from field Method_dependent_claims for each claim group from json ==claim_groups== are referenced in the output.\n\nStep 8: Rewrite step 7 by doing the following:\na) keep the step and sub-step numbers the same\nb) Re-write the explanation from "explanation quote from text ####Claims####" in a concise form without changing the technical language/vocabulary or alter any of the numerical attributes, specific properties (including physical properties such as state, texture, etc. and particular examples), specific quantities details/parameters/definitions in context of text ####Claims####.\nPrint the output of this step in json format with title ==Steps_sub-steps Rewrite== The json ==Steps_sub-steps Rewrite== will have the following fieds: claims_group_number, Step/Sub-Step number, explanation, claim number. \nPrint the json ==Steps_sub-steps Rewrite== in this format:\n{"Steps_sub-steps Rewrite": [ {"claims_group_number":..., "Step/Sub-Step type":"step/sub-step", "Step/Sub-Step number":..., "explanation": ..., "claim number":...}, ..]}. Do not print process in the output.\n\nStep 9: A decision step is defined as a point within a step or sub-step where an explicit choice is made between two or more alternative paths. This choice is based on the evaluation of specific conditions or criteria and directly influes the subsequent steps or sub-steps and hence the flow of the method. To identify a decision step from the json "Steps_sub-steps Rewrite", look for descriptions in field explanation to identify whether a decision/explicit choice is being made between two or more alternative paths. Using this definition of a decision step, identify all the decision making steps using field explanation for each step/sub-step from field  Step/Sub-Step number from json Steps_sub-steps Rewrite. Identify the decision making steps for each claim group from field claims_group_number.  Print the output of this step in json format with title ==decision_steps==. Print the json ==decision_steps== in this format:\n{"decision_steps": [ {"claims_group_number":..., "Decision step":...}, ..]}. Do not print process in the output.\n\nStep 10: Identity and list all the entities from field \'entities_inv\' from markdown table ####entity_actions_rewritten#### that are not directly mentioned in the claims but are related to the broader context of the invention or the application of the claimed method. Quote them from field \'entities_inv\' as is from markdown table ####entity_actions_rewritten####. Print output in json format with title ==additional_entities_to_describe==. The json ==additional_entities_to_describe==will have the field entities_inv_addl. Print the json ==additional_entities_to_describe== in this format:\n{"additional_entities_to_describe": [ { "entities_inv_addl":...}, ..]}. Do not print process in the output.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(368,1,49,E'flowchart_description',E'system',E'I am giving you the following inputs to write a detailed explanation for the Step and sub-steps :\n1. ####Claims####\n2. ####Current invention####\n3. ####steps_sub-steps#### in markdown table format.\n4. ####entity_actions_rewritten#### in markdown table format.\n5. ####entity_attributes_rewritten#### in markdown table format\n\n\nStep 1: Choose the step {{step_num}} and all its sub-steps (if any) from field Step/Sub-Step number from the markdown table ####steps_sub-steps####. Please provide a detailed explanation of the chosen Step and all of its sub-steps from the markdown table#### steps_sub-steps#### by doing the following:\na)Define all the entity actions pertaining to all entities from field entity_claims and from field entities_inv . For the definition co-relate the entities from field entity_claim and from field entities_inv from markdown table ####steps_sub-steps#### with the entities from field entity_claim and from field entities_inv from markdown table ####entity_actions_rewritten#### to identify all their entity actions. After making the co-relation do the following: Quote/cite all the entity actions for all the co-related entities, without changing/generalising  the technical details/language from the markdown table ####entity_actions_rewritten#### from field 1)entity_action_claim and field 2)entity_action invention. Reference chosen step and all its sub-step numbers from field Step/Sub-Step number from the  markdown table ####steps_sub-steps#### in the explanation without using the word step or sub-step.\nb) Use your knowledge base to include any implicit entities, steps, actions, or details not explicitly mentioned in field entity_action_claim or in field entity_action_invention in markdown table ####entity_actions_rewritten#### but crucial for a complete understanding of all the entity actions and how they flow logically into one another for the working of the system.\nc)The explanation  must further include all details of all the entities involved from field entities_claim and from field entities from markdown table ####entity_attributes_rewritten####. For the explanation, co-relate the entities from field entity_claim and from field entities_inv from markdown table ####steps_sub-steps#### with the entities from field entities_claim and from field entities_inv from markdown table ####entity_attributes_rewritten##### to identify all their cited attributes. After making the co-relation do the following: Quote/cite all the attributes including all the specific numerical attributes, all the specific properties (including physical properties such as state, texture, etc. and particular examples), all the specific quantities/number of the entity/entites, all alternatives and all embodiments/uses/applications for all the co-related entities, without changing/generalising  the technical details/language from the markdown table ####entity_attributes_rewritten#### from field i) specific_attributes_claims and ii) from field all_invention_attributes and iii) from field additional_attributes_invention. Once the attributes are cited and quoted,  explain how they contribute to the invention from text ####Claims#### and text ####Current invention####. Avoid use of quotations in the explanation. \nInclude implicit entities/steps/working/components/parts/conditions/ranges that will explain all the entity actions of/by/on the entities involved for the chosen step and all its sub-steps only so that a technical expert can understand the entity actions of all entities in the chosen step and sub-step without having to make any assumptions. Write the explanation in a paragraph format. Do not repeat the step in the output. Output with header ==Explanation Step {{step_num}}==\n\nStep 2: Ensure that the explanation from step 1 is only written for the chosen step and all its sub-steps. For the chosen step and all its sub-steps, ensure the explanation from step 1 details the entity actions from field 1)entity_action_claim and field 2)entity_action invention from the markdown table ####entity_actions_rewritten#### and includes all the entity attributes from field i) specific_attributes_claims and ii) from field all_invention_attributes and iii) from field additional_attributes_invention from markdown table ####entity_attributes_rewritten#### without changing the language. Ensure the explanation is written in a paragraph format by referencing the step numbers from field Step/Sub-Step number from markdown table ####steps_sub-steps####. Ensure the chosen step and all its sub-steps are numbered from field Step/Sub-Step number from the markdown table ####steps_sub-steps#### in the explanation. Step 2 is only to ensure the proper running of step 1 and should not print an output. Output with header ==Explanation Step {{step_num}}==\n',NULL,E'{"project": ["flowchart_main_element_nums"]}',NULL,NULL,NULL,E'Start',NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(383,6,47,E'flowchart_diagram',E'system',E'Step 23: Using the markdown table main_mermaids from the input, identify one goal of all the steps for each mermaid associated with  each claim group from field claims_group_number from markdown table main_mermaids in fewer than 20 words. Print the output in json format: {"Goal_claim_group": [{"Claims_group number":..., "main_mermaid_number":..., "goal..."},...]}\n\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(386,9,47,E'flowchart_diagram',E'user',E'Step 24: Generate a brief description for each goal from field goal associated with each claim group from field Claims_group number from markdown table  Goal_claim_group in 1 line without using the word claim group. Print the output in json format: {"main_breif_descriptions": [{"Claims_group_number":..., "main_mermaid_number": "...", "brief_description": ...}]}\nConsider the writing style of sample given below:\n\nFIG. 1 illustrates, in a flowchart, operations for using a user profile in accordance with certain embodiments. \n\nBrief Description;',NULL,NULL,E'{"project": ["breif_description"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(387,10,47,E'flowchart_diagram',E'user',E'Step 26: Identify one goal each of all the steps for each mermaid from field sub_mermaid_number for each claim group separately from markdown table {mermaids} in fewer than 20 words. Print the output in json format {"Goal_claim_group_mermaids": [{"Claims_group number":..., "sub_mermaid_number":..., "goal..."},...]}',NULL,NULL,E'{"project": []}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(388,11,47,E'flowchart_diagram',E'user',E'Step 27: Generate a brief description for each goal from field goal for each mermaid from field sub_mermaid_number for each claim group from markdown table Goal_claim_group_mermaids in 1 line without using the word claim group. Print the output in json format:\n{"breif_descriptions": [{"Claims_group_number":..., "sub_mermaid_number": "...", "brief_description": ...}]}\n\n\nConsider the writing style of sample given below:\n\nFIG. 1 illustrates, in a flowchart, operations for using a user profile in accordance with certain embodiments. \n\nBrief Description;',NULL,NULL,E'{"project": ["breif_descriptions"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(399,5,51,E'block_diagram',E'user',E'Step 27: Using the markdown table main_mermaids, identify the goal of the steps for each mermaid from field main_mermaid_number for each claim group from field claims_group_number from json main_mermaids in fewer than 20 words. Print the output in json format: {"Goal_claim_group": [{"Claims_group number":..., "main_mermaid_number":..., "goal..."},...]}\n',NULL,NULL,E'{"project": []}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(400,6,51,E'block_diagram',E'user',E'Step 28: Generate a brief description for each goal from field goal associated with each claim group from field Claims_group number from markdown table Goal_claim_group in 1 line without using the word claim group. Print the output in json format: {"main_breif_descriptions": [{"Claims_group_number":..., "main_mermaid_number": "...", "brief_description": ...}]}\nConsider the writing style of sample given below:\n\nFIG. 5 illustrates, in a block diagram, a computing environment of a VR headset in accordance with certain embodiments.\n\nBrief Description;',NULL,NULL,E'{"project": ["breif_description"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(452,1,54,E'total_detailed_description',E'system',E'Step 1: Your aim is to revise the text ####total_description#### by removing egregious/obvious duplications, in context of writing a patent specification, without changing any of the technical language/technical vocabulary used in the text ####total_description#### by following these guidelines: \na) Read the entire text ####total_description#### to \nidentify the egregious/obvious duplications. Do not print output for this step. \nb) Revise the text ####total_description#### by removing the duplications identified above without altering/generalizing/summarising/changing the technical language for any of the numerical attributes/properties such as taste, texture etc.,  or without changing language \nof embodiments/examples, specific quantities, technical details/parameters/alternatives/definitions, uses etc.\n(c)Ensure the revised description in step 1b references the step \nnumbers like step 100, step 200 etc. or component numbers like 500, 502 or entity identifiers like (10,40) etc if used in input text ####total_description####. Do not print output for this step.\n\nOutput format: ==Revised description==',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(454,3,54,E'total_detailed_description',E'user',E'Step 1a, Step 1b, Step 1c',NULL,NULL,E'{"project": ["deduplication_description"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(455,4,54,E'total_detailed_description',E'system',E'Step 1: Your aim is to revise the text ####deduplicated_description#### to remove profanity words as defined below, in context of writing a patent specification, without changing any of the technical language/technical vocabulary used in the text ####deduplicated_description#### by following these guidelines:\n\n(a)	Quote/cite the entire text ####deduplicated_description#### without altering/generalizing/summarising/changing the technical language for any of the numerical attributes/properties such as taste, texture etc.,  or without changing language of embodiments/examples, specific quantities, technical details/parameters/definitions, uses etc.  \n(b)	When quoting/citing the entire text ####deduplicated_description####, remove use of all adjectives or superlatives that describe the entities or their actions \n(c)	Exclude use of patent profanity terms such as "step", "sub-step", "claim_step_actions", "current Invention", "patent", "entity", "action", "entities", "alternative of each entity", "implicit component", "specific_attributes", "attributes", "attributes_rewritten", "missing attributes" "technical write-up" and "entity action", "real-world", "Entity_claims", "Claims", "Claim number", "Entity_claim", "Entity number from claims", etc. and avoid using superlatives like "critical", "most important", "crucial", "important", "essential", "necessary", "non-critical", "non-essential", "Superior" in the rewrite\n(d)	Do not include the headers i.e "==Introduction_Component … ==", ==explanation_component ….== etc. in the revision\n(e)	Ensure the revised description does not remove the step numbers like 100, 200 etc. or component numbers like 500, 502 or entity identifiers like (10,40) etc if used in input text ####deduplicated_description####\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(389,1,48,E'block_diagram_description',E'system',E'I am giving you the following inputs to write a detailed explanation for the component and its sub-components:\n1. ####Claims####\n2. ####Current invention####\n3. ####components_entities#### in markdown table format\n4. ####entity_actions_rewritten#### in markdown table format\n5. ####entity_attributes_rewritten#### in markdown table format\n\nStep 1: Choose the component {{component_num}} and all Sub-components for component {{component_num}} from field system/component/sub-component number from the markdown table #### components_entities####. Please provide a detailed explanation of the chosen Component and all of its sub-components from the markdown table  ####components_entities#### by doing the following:\n\na) Introduce chosen component  and its significance.\n\nb) Define and explain all the entities for the chosen component and its sub-components from field entity_claim and from field entities_inv from markdown table ####components_entities####. For the definition, co-relate the entities from field entity_claim and from field entities_inv from markdown table ####components_entities#### with the entities from field entities_claim and from field entities_inv from markdown table ####entity_attributes_rewritten##### to identify all their cited attributes. After making the co-relation do the following: Quote/cite all the attributes including all the specific numerical attributes, all the specific properties (including physical properties such as state, texture, etc. and particular examples), all the specific quantities/number of the entity/entites, all alternatives and all embodiments/uses/applications for all the co-related entities, without changing/generalising  the technical details/language from the markdown table ####entity_attributes_rewritten#### from field 1) specific_attributes_claims and 2) from field all_invention_attributes and 3) from field additional_attributes_invention. Once the attributes are cited and quoted,  explain how they contribute to the invention from text ####Claims#### and text ####Current invention####. Avoid use of quotations in the explanation. Avoid use of quotations in the explanation.\n\nDo not use the word component or sub-component in the explanation, instead use the component/sub-component name while explaining about it. Do not refer to words like "entity", "entities", "entity action", "crucial", "critical" etc. Just state facts from the inputs provided and avoid use of adjectives in the explanation. Avoid use of quotations in the explanation. Reference chosen component and all its sub-component numbers from field system/component/sub-component number from the  markdown table ####components_entities#### in the explanation without using the word component or sub-component. Print the output with title ==introduction_component== followed by chosen component number. Output format: ==introduction_component {{component_num}}===\n\nStep 2: Re-run step 1 till \na) all the entities are cited with their numerical identifiers either from field entity_numerical_identifier or from field system/component/sub-component number from markdown table  ####components_entities#### in the explanation if available - for example Device (10,40), Object (15, 45).\nb) Cite/quote all the entity attributes from field specific_attributes_claims,  from field all_invention_attributes and from field additional_attributes_invention from markdown table ####entity_attributes_rewritten####.\nc) words like "entity", "entities", "entity action", "crucial", "critical" etc are not used in the explanation\n',NULL,E'{"project": ["flowchart_main_element_nums"]}',NULL,NULL,NULL,E'Start',NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);

ALTER TABLE project.project 
ADD column invention_title_search  tsvector 
GENERATED ALWAYS AS (to_tsvector('english', coalesce(invention_title, ''))) STORED;
       
CREATE INDEX invention_title_search_idx ON project.project USING GIN (invention_title_search);


DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id" in (351,356,392,389,368,364,360);

INSERT INTO "prompt"."prompt_seq"("prompt_seq_id","seq","prompt_id","short_name","role","instructions","fun_def","inputs","outputs","created_at","modified_at","repeat","is_stream","model","multicalls","max_tokens","prompt_actions","claim_nums","decision_step","step_description","revised_step_description","claim_component_entities","claim_component_actions","skip_append","output_format")
VALUES
(351,1,46,E'block_diagram_common',E'system',E'I have provided following inputs to perform steps 5 to 9\n####Claims####\n####Current Invention####\n####entity_actions_rewritten####in markdown table format\n####claim_types#### in json format\n\nStep 5: An independent claim does not reference any other claim. However, a dependent claim always references another claim on which it depends. Using the above logic do the following: \na) Group only the system claims from field system_claim_numbers from json claim_types. \nb) No two independent claims can be grouped in the same claim group. \nPrint the output in a json format with title==claim_groups==. \nPrint the json ==claim_groups== in this format:\n{"claim_groups": [ { "claims_group_number":..., "system_independent_claim": ..., "system_dependent_claim":....}, ..]}. Ensure no dependent claim is considered as a distinct claim_group. Do not print the process in the output.  \n \nStep 5.1: Rerun the step till each system claim from from field system_claim_numbers from json claim_types (independent and/or dependent) is referenced in json claim_groups. Do not include component/apparatus/product/device/machine type claims under system claim category in the output. Do not print output for this step.\n\n\nStep 6:  For the claims identified from fields system_independent_claim and from field system_dependent_claim from json ####claim_groups####, use the entity actions from field {entity_action_claim} from markdown table ####entity_actions_rewritten#### to identify which dependent claim depends on which entity action of the independent claim or the entity action in other dependent claims in context of text ####Claims####. Provide the mapping between the dependent claims and the claim entity actions of the independent claim or the entity actions of other dependent claims on which it depends. Output format: Dependent claim --> Independent claim --> reason etc. \nPrint the json ==claim_dependency== in this format:\n{"claim_dependency": [{"claims_group_number":..., "dependent_claim": ..., "independent_claim": ..., "reason": ...}, ...]}\n\nStep 7: Identify and name the system that encompasses the specific entity actions associated with text ####current invention#### from field entity action_invention from markdown table ####entity_actions_rewritten#### and all the claims from ==system_Claims==. Output format: ==System==\nPrint the json ==System== in this format:\n{"system": ...}\n\n\nStep 8: a) Co-relate the identified claims for each claim group from field independent_claim, from field dependent_claim from json claim_groups with the field claim_number from markdown table ####entity_actions_rewritten####.\nb) Identify all the entities from field entity_claim and entities_inv from markdown table ####entity_actions_rewritten#### for the co-related claim numbers for each claim group.\nc) Group all the identified entities for each claim group from field entity_claim and from field entities_inv from markdown table  ####entity_actions_rewritten#### into components and sub-components using overlaps/commonalities in their entity action from either 1) from field entity_action_claim or from 2) field entity_action_invention from markdown table ####entity_actions_rewritten#### and using the json claim_dependency. These components and sub-components should be grouped such that when working together they manifest the invention from text ####Claims#### and text ####Current invention####. \nd) The grouped entities should be referred as component/sub-component only in the field component/sub-component type in the output.\ne) Ensure that entities from both field entity_claim and from field entities_inv are quoted/cited in the output. Ensure all the claims (both independent and dependent claims) identified for each claim group in the output of step 5 are referenced in the output. \nf) Number the components and sub-components in a unique numbering series with increment of 2 for each component as follows - if the component is numbered 502, the it\'s sub-component should be numbered 502-a, 502-b etc. The next component will be numbered 504 and it’s sub-component will be numbered 504-a, 504-b etc. Follow a unique number series for each claim group. For example if claim group 1 is starting with 500, claim group 2 should start from 600. Print the output in json format with title ==component_entities== where every component/ sub-component is in a separate row. The json ==component_entities== will be in this format:\n{"component_entities": [ {"claims_group_number":...., "component/sub-component type":..., "component number":…, "sub-component number":..., "component/sub-component name ": ...,  "entity_claim":...., "entity_numerical_identifier":..., "entities_inv":..., "claim numbers":...}, ..]}. Do not repeat the process in the output.\n\nStep 8.1: Rerun step 8 till all the entities from both field entity_claim and from field entities_inv are referenced in the output and all the claims from field independent claims and from field dependent_claims for each claim group from json ==claim_groups== are referred in the output.\n\nStep 8.2: Ensure that the component and sub-component numbers from field component number and from field sub-component number are different. Ensure that component and sub-component follow that instructions given in step 8f.\n\nStep 9: Number the system, component and sub-component from field  Component/Sub-component for each claim group from json ==component_entities==, in an unique numbering series with increment of 2 for each component as follows - if the system is numbered 500, the component should be numbered 502 and it\'s sub-component should be numbered 502-a, 502-b etc. The next component will be numbered 504 and it’s sub-component will be numbered 504-a, 504-b etc. The value in the field Component type - system/component/sub-component will only be either "system" or "component" or "sub-component". and any other value is not permitted in this field. Print the output json format with title ==component_sub-component==. The json ==component_sub-component== will be in this format:\n{"component_sub-component": [{"claims_group_number":...., "Component type - system/component/sub-component": "system/component/sub-component", "system/component number": ..., “sub-component number”:…,  "system/component/sub-component name":..., "explanation":..., "entity_claim":..., "entity_numerical_identifier":..., "entities_inv":..., "claim numbers":...}, ..]}. Do not print process in the output.\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(356,6,46,E'block_diagram_common',E'user',E'Step 8, Step 8.1, Step 8.2',NULL,NULL,E'{"project": []}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,TRUE,E'json'),
(360,1,45,E'flowchart_common',E'system',E'I am providing you the following inputs to perform steps 5 to 10. \n####Claims####\n####Current Invention####\n####entity_actions_rewritten####in markdown table format\n####claim_type#### in json format\n\nStep 5: An independent claim does not reference any other claim. However, a dependent claim always references another claim on which it depends. Using the above logic do the following: \na) Group only the method claims from field method_claim_numbers from json ####claim_type####. \nb) No two independent claims can be grouped in the same claim group. \nPrint the output in a json format. \nPrint the json ==claim_groups== in this format:\n{"claim_groups": [ { "claims_group_number":..., "Method_independent_claim": ...,  "Method_dependent_claim":....}, ..]}. Ensure no dependent claim is considered as a distinct claim_group. Do not print the process in the output.\n\nStep 5.1: Rerun the step till each method claims from field method_claim_numbers \n(independent and/or dependent) is referenced in json claim_groups. Do not print output for this step. \n\nStep 6:  For the claims identified from the output of step 5, use the entity actions from field entity_action_claim from markdown table ####entity_actions_rewritten#### to identify which dependent claim depends on which entity action of the independent claim or the entity action in other dependent claims in context of text ####Claims####. Provide the mapping between the dependent claims and the claim entity actions of the independent claim or the entity actions of other dependent claims on which it depends. Output format: Dependent claim --> Independent claim --> reason etc. \nPrint the json ==claim_dependency== in this format:\n{"claim_dependency": [{"claims_group_number":..., "dependent_claim": ..., "independent_claim": ..., "reason": ...}, ...]}\n\nStep 7: a) Identify all the main steps/entity actions for all the claims for each claim group from field claims_group_number using the json claim_dependency  that occur in a logical sequence to accomplish the method in context of all the claims from Step 5 and the ####current invention####. b)  Identify all the sub-steps/parallel steps/entity actions, if available, that are additional details/limitations for the method of main steps in context of ####claims####  and json ==claim_dependency==. Remember a sub-step is an additional limitation/detail of the main step and not a repetition of it. c) Ensure all the claims for each claim group from json ==claim_dependency== are referred in Step 7 output. (d) Follow a unique numbering series for each claim group while numbering the main step and sub-step. The number in the field Step number and the number in the field Sub-Step number cannot be the same. For example if steps in claim group 1 is starting with 100, steps in claim group 2 should start from 200. Use an even numbering series with increment of 2 for each step as follows – if for claim group 1 the 1st step is Step 100, the subsequent steps will be numbered 102, 104 etc. Similarly, for the 2nd claim group, if the 1st step is 200, the subsequent steps will be numbered 202, 204 etc. \ne) For sub-steps, number as follows - if step number is 100, it\'s sub-step number must be 100-a, 100-b, for step 102 the sub-step must be 102-a, 102-b etc. f) The value in the field Step/Sub-Step type will only be either "step" or "sub-step" and any other value is not permitted in this field. Print the output in a json format with title: ==Steps_sub-steps== where every step/ sub-step is in a separate row. \nPrint the json ==Steps_sub-steps== in this format:\n{"Steps_sub-steps": [ { "claims_group_number":..., "Step/Sub-Step type":"step/sub-step", "Step number":..., "Sub-Step number": ..., "explanation quote from text ####claims####":..., "claim number":..., "entity_claim":..., "entity_numerical_identifier":..., "entities_inv":...}, ..]}. Do not print process in the output.\n\nStep 7.1: Rerun step 7 till each claim from field independent_claim and from field dependent_claim for each claim group from json ==claim_dependency == are referenced in the output.\n\nStep 7.2: Ensure that the step and sub-step numbers from field Step number and from field Sub-step number are different. Ensure that the step and sub-step number follow the instruction given in the step 7d and 7e. \n\nStep 8: Rewrite the json ==Steps_sub-steps== by doing the following:\na) keep the step and sub-step numbers from field Step number, from field Sub-Step number as they are\nb) Re-write the explanation from "explanation quote from text ####Claims####" in a concise form without changing the technical language/vocabulary or alter any of the numerical attributes, specific properties (including physical properties such as state, texture, etc. and particular examples), specific quantities details/parameters/definitions in context of text ####Claims####.\nPrint the output in a json ==Steps_sub-steps Rewrite== in this format:\n{"Steps_sub-steps Rewrite": [ {"claims_group_number":..., "Step/Sub-Step type":"step/sub-step", "Step number":..., "Sub-Step number": ..., "explanation": ..., "claim number":...}, ..]}. Do not print instructions in the output.\n\nStep 9: A decision step is defined as a point within a step or sub-step where an explicit choice is made between two or more alternative paths. This choice is based on the evaluation of specific conditions or criteria and directly influences the subsequent steps or sub-steps and hence the flow of the method. To identify a decision step from the json ==Steps_sub-steps==, look for descriptions in field explanation quote from text ####claims#### to identify whether a explicit choice is being made between two or more alternative paths. Implicit choice from the explanations should not be considered as a decision step. Using this definition of a decision step, identify all the decision making steps using field explanation quote from text ####claims####  for each step/sub-step from field  Step number and from field Sub-Step number from json ==Steps_sub-steps==. Identify the decision making steps for each claim group from field claims_group_number.  Print the output of this step in json format with title ==decision_steps==. Print the json ==decision_steps== in this format:\n{"decision_steps": [ {"claims_group_number":..., "Decision step":..., "Step/Sub-Step type":"step/sub-step"}, …]}. Do not print process in the output.\n\nStep 10: Identity and list all the entities from field \'entities_inv\' from markdown table ####entity_actions_rewritten#### that are not directly mentioned in the claims but are related to the broader context of the invention or the application of the claimed method. Quote them from field \'entities_inv\' as is from markdown table ####entity_actions_rewritten####. Print output in json format with title ==additional_entities_to_describe==. The json ==additional_entities_to_describe==will have the field entities_inv_addl. Print the json ==additional_entities_to_describe== in this format:\n{"additional_entities_to_describe": [ { "entities_inv_addl":...}, ..]}. Do not print process in the output.\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(364,5,45,E'flowchart_common',E'user',E'Step 7, Step 7.1, Step 7.2',NULL,NULL,E'{"project": ["flowchart_common_desc"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(368,1,49,E'flowchart_description',E'system',E'I am giving you the following inputs to write a detailed explanation for the Step and sub-steps :\n1. ####Claims####\n2. ####Current invention####\n3. ####steps_sub-steps#### in markdown table format.\n4. ####entity_actions_rewritten#### in markdown table format.\n5. ####entity_attributes_rewritten#### in markdown table format\n\n\nStep 1: Choose the step {{step_num}} from field Step number and all its sub-steps (if any) from field Sub-Step number from the markdown table ####steps_sub-steps####. Please provide a detailed explanation of the chosen Step and all of its sub-steps from the markdown table#### steps_sub-steps#### by doing the following:\na)Define all the entity actions pertaining to all entities from field entity_claims and from field entities_inv . For the definition co-relate the entities from field entity_claim and from field entities_inv from markdown table ####steps_sub-steps#### with the entities from field entity_claim and from field entities_inv from markdown table ####entity_actions_rewritten#### to identify all their entity actions. After making the co-relation do the following: Quote/cite all the entity actions for all the co-related entities, without changing/generalising  the technical details/language from the markdown table ####entity_actions_rewritten#### from field 1)entity_action_claim and field 2)entity_action invention. Reference chosen step number from field Step number from the  markdown table ####steps_sub-steps#### in the beginning of the explanation. Reference step/sub-step number with the word step/sub-step before the step/sub-step number. Reference all the sub-steps for the chosen step from from field Sub-Step number from the markdown table ####steps_sub-steps#### in the explanation. b) Use your knowledge base to include any implicit entities, steps, actions, or details not explicitly mentioned in field entity_action_claim or in field entity_action_invention in markdown table ####entity_actions_rewritten#### but crucial for a complete understanding of all the entity actions and how they flow logically into one another for the working of the system.\nc)The explanation  must further include all details of all the entities involved from field entities_claim and from field entities from markdown table ####entity_attributes_rewritten####. For the explanation, co-relate the entities from field entity_claim and from field entities_inv from markdown table ####steps_sub-steps#### with the entities from field entities_claim and from field entities_inv from markdown table ####entity_attributes_rewritten##### to identify all their cited attributes. After making the co-relation do the following: Quote/cite all the attributes including all the specific numerical attributes, all the specific properties (including physical properties such as state, texture, etc. and particular examples), all the specific quantities/number of the entity/entites, all alternatives and all embodiments/uses/applications for all the co-related entities, without changing/generalising  the technical details/language from the markdown table ####entity_attributes_rewritten#### from field i) specific_attributes_claims and ii) from field all_invention_attributes and iii) from field additional_attributes_invention. Once the attributes are cited and quoted,  explain how they contribute to the invention from text ####Claims#### and text ####Current invention####. Avoid use of quotations in the explanation. \nWrite the explanation in a paragraph format. Do not repeat the step in the output. Output with header ==Explanation Step {{step_num}}==\n\nStep 2: Ensure that the explanation from step 1 is only written for the chosen step and all its sub-steps. For the chosen step and all its sub-steps, ensure the explanation from step 1 details the entity actions from field 1)entity_action_claim and field 2)entity_action invention from the markdown table ####entity_actions_rewritten#### and includes all the entity attributes from field i) specific_attributes_claims and ii) from field all_invention_attributes and iii) from field additional_attributes_invention from markdown table ####entity_attributes_rewritten#### without changing the language. Ensure the explanation is written in a paragraph format by referencing the step numbers from field Step number from markdown table ####steps_sub-steps#### in the beginning of the explanation. Ensure the chosen step and all its sub-steps are numbered from field Step number, from field Sub-Step number from the markdown table ####steps_sub-steps#### in the explanation. Step 2 is only to ensure the proper running of step 1 and should not print an output. Output with header ==Explanation Step {{step_num}}==\n',NULL,E'{"project": ["flowchart_main_element_nums"]}',NULL,NULL,NULL,E'Start',NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(389,1,48,E'block_diagram_description',E'system',E'I am giving you the following inputs to write a detailed explanation for the component and its sub-components:\n1. ####Claims####\n2. ####Current invention####\n3. ####components_entities#### in markdown table format\n4. ####entity_actions_rewritten#### in markdown table format\n5. ####entity_attributes_rewritten#### in markdown table format\n\nStep 1: Choose the component {{component_num}} from field system/component number and all Sub-components for the chosen component {{component_num}} from field sub-component number from the markdown table #### components_entities####. Please provide a detailed explanation of the chosen Component and all of its sub-components from the markdown table  ####components_entities#### by doing the following:\n\na) Introduce chosen component  and its significance.\n\nb) Define and explain all the entities for the chosen component and its sub-components from field entity_claim and from field entities_inv from markdown table ####components_entities####. For the definition, co-relate the entities from field entity_claim and from field entities_inv from markdown table ####components_entities#### with the entities from field entities_claim and from field entities_inv from markdown table ####entity_attributes_rewritten##### to identify all their cited attributes. After making the co-relation do the following: Quote/cite all the attributes including all the specific numerical attributes, all the specific properties (including physical properties such as state, texture, etc. and particular examples), all the specific quantities/number of the entity/entites, all alternatives and all embodiments/uses/applications for all the co-related entities, without changing/generalising  the technical details/language from the markdown table ####entity_attributes_rewritten#### from field 1) specific_attributes_claims and 2) from field all_invention_attributes and 3) from field additional_attributes_invention. Once the attributes are cited and quoted,  explain how they contribute to the invention from text ####Claims#### and text ####Current invention####. Avoid use of quotations in the explanation. Avoid use of quotations in the explanation.\n\nDo not use the word component or sub-component in the explanation, instead use the component/sub-component name while explaining about it. Do not refer to words like "entity", "entities", "entity action", "crucial", "critical" etc. Just state facts from the inputs provided and avoid use of adjectives in the explanation. Avoid use of quotations in the explanation. Reference chosen component and all its sub-component numbers from field system/componentnumber , from field sub-component number from the  markdown table ####components_entities#### in the explanation without using the word component or sub-component. Print the output with title ==introduction_component== followed by chosen component number. Output format: ==introduction_component {{component_num}}===\n\nStep 2: Re-run step 1 till \na) all the entities are cited with their numerical identifiers either from field entity_numerical_identifier or from field system/component number, from field sub-component number from markdown table  ####components_entities#### in the explanation if available - for example Device (10,40), Object (15, 45).\nb) Cite/quote all the entity attributes from field specific_attributes_claims,  from field all_invention_attributes and from field additional_attributes_invention from markdown table ####entity_attributes_rewritten####.\nc) words like "entity", "entities", "entity action", "crucial", "critical" etc are not used in the explanation\n',NULL,E'{"project": ["flowchart_main_element_nums"]}',NULL,NULL,NULL,E'Start',NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(392,4,48,E'block_diagram_description',E'user',E'Explain the Working of the chosen component and all it\'s sub-components above by referencing the markdown table ####components_entities#### with the markdown table  ####entity_actions_rewritten####. Ensure that the working/entity actions of the component and sub-component is structured coherently, with each entity action explanation flowing logically into the next. The language should be technical yet clear, catering to a professional audience with the aim of providing a thorough understanding of the component\'s workings by doing the following:\n(a) Reference, define and describe in detail all the entity actions associated with all the entities of the chosen component and all its sub-components from markdown table  ####components_entities####. For the definition, co-relate the entities from field entity_claim and from field entities_inv from markdown table ####components_entities#### with the entities from field entities_claim and from field entities_inv from markdown table ####entity_actions_rewritten####.  After the co-relation, Quote/cite all the entity actions for all the co-related entities, without changing/generalising  the technical details/language from the markdown table ####entity_actions_rewritten#### from field 1)entity_action_claim and field 2)entity_action invention.  For each entity action, explain its nature (what), purpose (why), context (when and under what conditions), and method (how). \n(b) Use your knowledge base to include any implicit entities, components, actions, or details not explicitly mentioned in field entity_action_claim or in field entity_action_invention in markdown table#### entity_actions_rewritten#### but crucial for a complete understanding of all the entity actions and how they flow logically into one another for the working of the system. \n\nMake sure to all the entities are cited with  their numbers either from field entity_numerical_identifier from or from field system/component number, from field sub-component number from markdown table ####components_entities#### associated with each component/sub-component in the explanation if the number is available.- for example Device (10,40), Object (15, 45). Do not number entities in absence of entity_numerical_identifier or refer to words like "entity", "entities", "entity action", "crucial", "critical" etc. Do not repeat anything from the explanation that explains the entities comprising the component and sub-component from above. Write the explanation in a paragraph format. Print the output with title ==explanation_component== followed by chosen component number. Output format: ==explanation_component {{component_num}}==\n',NULL,E'{"project": ["flowchart_main_element_nums"]}',E'{"project": ["block_diagram_description"]}',NULL,NULL,E'End',TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text');

DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id" in (378,379,380,381,382,383,384,385,386,387,388,395,396,397,398,399,400,401,402,403,476,477,478);

INSERT INTO "prompt"."prompt_seq"("prompt_seq_id","seq","prompt_id","short_name","role","instructions","fun_def","inputs","outputs","created_at","modified_at","repeat","is_stream","model","multicalls","max_tokens","prompt_actions","claim_nums","decision_step","step_description","revised_step_description","claim_component_entities","claim_component_actions","skip_append","output_format")
VALUES
(378,1,47,E'flowchart_diagram',E'system',E'Step 15: Steps/sub-steps can be identified from field Step/Sub-Step type from markdown table #### Steps_sub-steps Rewrite####. If the value in field  Step/Sub-Step type is ‘step’ it can be identified as step. If the value in field  Step/Sub-Step type is ‘sub-step’, it can be identified as sub-step. Using this logic,  provide the mermaid script/syntax for all steps for each claim group from field claims_group_number using markdown table ####Steps_sub-steps Rewrite#### by doing the following: For the mermaid script/syntax, understand the output of all steps from field Step/Sub-Step type and from field Step number, Sub-Step number, from field explanation from markdown table ####Steps_sub-steps Rewrite#### in context of markdown table ####Decision_step####. Markdown table ####Decision_step#### identifies the decision making step. Using all the details of all the steps from field Step/Sub-Step type and from field Step number, Sub-Step number, from field explanation from markdown table ####Steps_sub-steps Rewrite#### and decision making step from field Decision step from markdown table ####Decision_step####, identify nodes, conditions (if any), and different links/paths for each claim group. Do not print output for this step. Do not repeat instructions in the output. \n \nStep 16: Choose the layout for output from Step 15. Use graph TB for a top-down layout or graph LR for a left-right layout. Do not print output for this step. Do not repeat instructions in the output. \n \nStep 17: Define the nodes for output from Step 15. Use square brackets for regular nodes e.g., 100["Node A"].  Use curly braces for decision nodes e.g., 102{"Condition B"}. Treat "If" condition nodes as decision nodes. Do not print output for this step. Do not repeat instructions in the output. \n \nStep 18: For the Mermaid script/syntax from step 15 define the links/paths between nodes from Step 17 using -->. To add text to the links/paths, use |Link text| for each claim group. For multiple links/paths between nodes, define each link separately. For decision making link/path, use appropriate messages to handle yes/no cases. For example, a decision node should have two separate links/paths with messages as "yes" and "no". Do not use a yes or no link/path for nodes that are not of decision type. Do not print output for this step. Do not repeat instructions in the output. \n \nStep 19:Review and adjust the Mermaid script/syntax for each claim group from field claims_group_number from markdown table ####Steps_sub-steps Rewrite#### that includes only steps but not sub-steps. Each mermaid in a claim group must be numbered.  For each claim group follow a unique number for the mermaids. For example if the mermaid in claim group 1 is numbered as Fig. 1, the mermaid in claim group 2 must be numbered as Fig. 2. Do not print the process in the output. Refer the example given below for following the style of the mermaid. Do not repeat instructions in the output. \n \nmermaid\nCopy code\ngraph TB\n100["Determine an initial eye strain context for a user wearing a VR headset."]\n102{"Recognize a User Interface (UI) adaptation."}\n104["Establish the intensity of the UI adaptation."]\n106["Display modified VR content by applying the identified UI adaptation."]\n108["Assess an updated eye strain context."]\n110{"If the updated eye strain context indicates a decrease in eye strain."}\n112["Modify the priority weight for the UI adaptation."]\n114["Refresh a user\'s profile with the UI adaptation, its intensity, and the modified priority weight."]\n100 --> 102\n102 -- Yes --> 104\n104 --> 106\n106 --> 108\n108 --> 110\n110 -- Yes --> 112\n112 --> 114\n110 -- No --> 102\n \nStep 20:  Confirm that the yes and no condition from the decision making step from json ####Decision_step#### has already been considered in the output of Step 19. If no, then re-generate the output from Step 19. Do not repeat instructions in the output. \nPrint the output in json format with title:==main_mermaids==. \n{"main_mermaids": [{"claims_group_number":..., "main_mermaid_number": ..., "mermaid": "mermaid script/syntax"...}, ....]}\n\n\nStep 22:Identify all the steps that have sub-steps by referencing the field Step/Sub-Step type from markdown table #### Steps_sub-steps Rewrite####. Provide a separate mermaid script/syntax for each of the identified step with all its corresponding sub-steps for  each claim group from field claims_group_number using markdown table ####Steps_sub-steps Rewrite#### by doing the following: For the mermaid script/syntax, understand the output of all steps from field Step/Sub-Step type and from field Step number, Sub-Step number, from field explanation from markdown table ####Steps_sub-steps Rewrite#### in context of markdown table ####Decision_step####. Markdown table ####Decision_step#### identifies the decision making step. Using all the details of all the steps from field Step/Sub-Step type and from field Step number, Sub-Step number, from field explanation from markdown table ####Steps_sub-steps Rewrite#### and decision making step from field Decision step from markdown table ####Decision_step####, identify nodes, conditions (if any), and different links/paths for each claim group. Do not print output for this step. Do not repeat instructions in the output. \n\nStep 23: Choose the layout for output from Step 22. Use graph TB for a top-down layout or graph LR for a left-right layout. Do not print output for this step. Do not repeat instructions in the output. \n \nStep 24: Define the nodes for output from Step 22. Use square brackets for regular nodes e.g., 100["Node A"].  Use curly braces for decision nodes e.g., 102{"Condition B"}. Treat "If" condition nodes as decision nodes. Do not print output for this step. Do not repeat instructions in the output. \n \nStep 25: For the Mermaid script/syntax from step 22 define the links/paths between nodes from Step 24 using -->. To add text to the links/paths, use |Link text| for each step with sub-steps under each claim group. For multiple links/paths between nodes, define each link separately. For decision making link/path, use appropriate messages to handle yes/no cases. For example, a decision node should have two separate links/paths with messages as "yes" and "no". Do not print output for this step. Do not repeat instructions in the output. \n \nStep 26: Review and adjust the Mermaid script/syntax for each step with all its corresponding sub-steps for each claim group from field claims_group_number from markdown table ####Steps_sub-steps Rewrite####. Each mermaid in a claim group must be numbered.  For each claim group follow a unique number for the mermaids. For example if the first mermaid in claim group 1 is numbered as "Fig. 1A", the second mermaid in claim group 1 must be be numbered as Fig. 1B, etc. Similarly the first mermaid in claim group 2 is  numbered as Fig. 2A, the second mermaid in claim group 2 must be numbered as Fig. 2B, etc. Do not print the instructions in the output. Refer the example given below for following the style of the mermaid. Do not repeat instructions in the output. \n \nmermaid\nCopy code\ngraph TB\n100["Determine an initial eye strain context for a user wearing a VR headset."]\n102{"Recognize a User Interface (UI) adaptation."}\n104["Establish the intensity of the UI adaptation."]\n106["Display modified VR content by applying the identified UI adaptation."]\n108["Assess an updated eye strain context."]\n110{"If the updated eye strain context indicates a decrease in eye strain."}\n112["Modify the priority weight for the UI adaptation."]\n114["Refresh a user\'s profile with the UI adaptation, its intensity, and the modified priority weight."]\n100 --> 102\n102 -- Yes --> 104\n104 --> 106\n106 --> 108\n108 --> 110\n110 -- Yes --> 112\n112 --> 114\n110 -- No --> 102\n \nStep 27:  Confirm that the yes and no condition from the decision making step from json ####Decision_step#### has already been considered in the output of Step 26. If no, then re-generate the output from Step 26. Do not print output for this step. Do not repeat instructions in the output. \n\nPrint the output in json format with title:==mermaids==. \n{"mermaids": [{"claims_group_number":..., “sub_mermaid_number": ..., "mermaid": "mermaid script/syntax"...}, ....]}\n\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(379,2,47,E'flowchart_diagram',E'user',E'Steps_sub-steps: ####{{element_explanations}}####\\n Decision_step: ####{{decision_steps}}####',NULL,E'{"project": ["element_explanations", "decision_steps"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(380,3,47,E'flowchart_diagram',E'user',E'Step 15, Step 16, Step 17, Step 18, Step 19, Step 20',NULL,NULL,E'{"project": ["mermaid"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(381,4,47,E'flowchart_diagram',E'user',E'Step 22, Step 23, Step 24, Step 25, Step 26, Step 27',NULL,NULL,E'{"project": ["mermaids"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(382,5,47,E'flowchart_diagram',E'system',E'Step 23: Identify the claim group number from field claims_group_number from markdown table ####main_mermiads####. Extract mermaid for each claim group number from field mermaid from markdown table ####main_mermiads####. Identify goal for the extracted mermaid for each claim group in fewer than 20 words. Print the output in json format: {"Goal_claim_group": [{"Claims_group number":..., "main_mermaid_number":..., "goal..."},...]}. Do not print the instructions in the output\n \nStep 24: Generate a brief description for each goal from field goal associated with each claim group from field Claims_group number from markdown table  Goal_claim_group in 1 line without using the word claim group. Print the output in json format: {"main_breif_descriptions": [{"Claims_group_number":..., "main_mermaid_number": "...", "brief_description": ...}]}\nWhile writing the brief description, consider the writing style of the sample given below:\n \nFIG. 1 illustrates, in a flowchart, operations for using a user profile in accordance with certain embodiments. \n \nBrief Description;\n\n\nStep 26: Identify the claim group number from field claims_group_number from markdown table ####mermiads####. Extract all the mermaids for each claim group number from field mermaid from markdown table ####mermiads####. Identify goal for each extracted mermaid for each claim group in fewer than 20 words. Print the output in json format {"Goal_claim_group_mermaids": [{"Claims_group number":..., "sub_mermaid_number":..., "goal..."},...]}\n\n\nStep 27: Generate a brief description for each goal from field goal for each mermaid from field sub_mermaid_number for each claim group from markdown table Goal_claim_group_mermaids in 1 line without using the word claim group. Print the output in json format:\n{"breif_descriptions": [{"Claims_group_number":..., "sub_mermaid_number": "...", "brief_description": ...}]}\n \n \nWhile writing the brief description, consider the writing style of the sample given below:\n \nFIG. 1 illustrates, in a flowchart, operations for using a user profile in accordance with certain embodiments. \n \nBrief Description;\n',NULL,NULL,NULL,NULL,NULL,NULL,FALSE,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(383,6,47,E'flowchart_diagram',E'user',E'main_mermaids: ####{{mermaid}}\\n ####mermaids: ####{{mermaids}}####',NULL,E'{"project": ["mermaid", "mermaids"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(384,7,47,E'flowchart_diagram',E'user',E'Step 23',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(385,8,47,E'flowchart_diagram',E'user',E'Step 24',NULL,NULL,E'{"project": ["breif_description"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(386,9,47,E'flowchart_diagram',E'user',E'Step 26',NULL,NULL,E'{"project": []}',NULL,NULL,NULL,FALSE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(387,10,47,E'flowchart_diagram',E'user',E'Step 27',NULL,NULL,E'{"project": ["breif_descriptions"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(395,1,51,E'block_diagram',E'system',E'Step 16: Identify the system and all the components from field Component type - system/component/sub-component from markdown table ####component_sub-component####. If the value in field Component type - system/component/sub-component is system then it is system. If the value in the field Component type - system/component/sub-component is component then it is a component. Provide a separate mermaid script/syntax only for system and components for each claim group from field claims_group_number from markdown table ####component_sub-component####. Do not print output for this step. Do not print instructions in the output.\n\nStep 17: Choose the layout for output from step 16. Use graph TB for a top-down layout or graph LR for a left-right layout. Do not print output for this step. Do not print instructions in the output.\n\nStep 18: Define the nodes for each claim group for the output from step 16. Use square brackets for regular nodes (e.g., 200["Host System"]). Do not print output for this step. Do not print instructions in the output.\n\nStep 19: For the Mermaid script/syntax from step 16, use the word "subgraph" to start a subgraph and the word "end" to close it. Define all nodes that belong to the subgraph. Define the links for  all the nodes at the end. Do not print output for this step. Do not print instructions in the output.\n\nStep 20: Review and adjust the Mermaid script/syntax involving only the system and components for each claim group as needed. Refer the example given below for following the style of the mermaid. This sample is for reference only, do not follow numbering of the sample given below. Keep the numbering same as given in the field system/component number from markdown table ####component_sub-component####. Each mermaid in a claim group must be numbered.  For each claim group follow a unique number for the mermaids. For example if the mermaid in claim group 1 is numbered as Fig. 1, the mermaid in claim group 2 must be numbered as Fig. 2.Do not mention claim numbers in the mermaid codes. Do not print instructions in the output.\n\nFor example, \ngraph LR\nsubgraph 200["Host System"]\n  210["Host Interface Unit"]\nend\nsubgraph 204["Memory Controller"]\n  212["Memory Interface Unit"]\n  214["Processing Unit"]\nend\nsubgraph 206["Non-Volatile Memory"]\n  202["Memory Devices"]\n  208["Host Memory"]\n  216["Information Units"]\nend\n200 --- 204\n204 --- 206\n\nPrint the output in json format: \n{"main_mermaids": [{"claims_group_number":..., "main_mermaid_number": ..., "mermaid": "mermaid script/syntax"...}, ....]}\n\n\nStep 22: Ensure that a valid mermaid syntax has been generated for each claim group in step 20.  Do not print the output for this step. Do not print instructions in the output.\n\n Step 23: Identify the all the components that have sub-components from field Component type - system/component/sub-component from markdown table ####component_sub-component####. If the value in field Component type - system/component/sub-component is component then it is component. If the value in the field Component type - system/component/sub-component is sub-component then it is a component. Provide the a separate mermaid script/syntax for each components with sub-components for each claim group from field claims_group_number from markdown table ####component_sub-component####. Do not print output for this step. Do not print instructions in the output.\n\nStep 24: Choose the layout for output from step 23. Use graph TB for a top-down layout or graph LR for a left-right layout. Do not print output for this step. Do not print instructions in the output.\n\nStep 25: Define the nodes for each claim group for the output from step 23. Use square brackets for regular nodes (e.g., 200["Host System"]). Do not print output for this step. Do not print instructions in the output.\n\nStep 26: For the Mermaid script/syntax from step 23, use the word "subgraph" to start a subgraph and the word "end" to close it. Define all nodes that belong to the subgraph. Define the links for  all the nodes at the end. Do not print output for this step. Do not print instructions in the output.\n\nStep 27: Review and adjust the Mermaid script/syntax for each component having sub-components for each claim group as needed. Refer the example given below for following the style of the mermaid. This sample is for reference only, do not follow numbering of the sample given below. Keep the numbering same as given in the field System/Component number, from field sub-component number from markdown table ####component_sub-component####. Each mermaid in a claim group must be numbered.  For each claim group follow a unique number for the mermaids. For example if the first mermaid in claim group 1 is numbered as "Fig. 1A", the second mermaid in claim group 1 must be be numbered as Fig. 1B, etc. Similarly the first mermaid in claim group 2 is  numbered as Fig. 2A, the second mermaid in claim group 2 must be numbered as Fig. 2B, etc.  Do not mention claim numbers in the mermaid codes. Do not print instructions in the output.\n\nFor example, \ngraph LR\nsubgraph 200["Host System"]\n  210["Host Interface Unit"]\nend\nsubgraph 204["Memory Controller"]\n  212["Memory Interface Unit"]\n  214["Processing Unit"]\nend\nsubgraph 206["Non-Volatile Memory"]\n  202["Memory Devices"]\n  208["Host Memory"]\n  216["Information Units"]\nend\n200 --- 204\n204 --- 206\n\nPrint the output in json format: {"mermaids": [{"claims_group_number":..., "sub_mermaid_number":..., "mermaid" : "mermaid script/syntax ..."}, ....]}. Do not repeat the step in the output. \n\n\nStep 28: Ensure that a valid mermaid syntax has been generated for each claim group in step 27.  Do not print the output for this step. Do not print instructions in the output.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(396,2,51,E'block_diagram',E'user',E'component_sub-component:: ####{{element_explanations}}####',NULL,E'{"project": ["element_explanations"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(397,3,51,E'block_diagram',E'user',E'Step 16, Step 17, Step 18, Step 19, Step 20, Step 22',NULL,NULL,E'{"project": ["mermaid"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(399,4,51,E'block_diagram',E'user',E'Step 23, Step 24, Step 25, Step 26, Step 27, Step 28',NULL,NULL,E'{"project": ["mermaids"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(400,5,51,E'block_diagram',E'system',E'Step 27: Identify the claim group number from field claims_group_number from markdown table ####main_mermiads####. Extract mermaid for each claim group number from field mermaid from markdown table ####main_mermiads####. Identify goal for the extracted mermaid for each claim group in fewer than 20 words. Print the output in json format: {"Goal_claim_group": [{"Claims_group number":..., "main_mermaid_number":..., "goal..."},...]}. Do not print the instructions in the output\n \nStep 28: Generate a brief description for each goal from field goal associated with each claim group from field Claims_group number from markdown table  Goal_claim_group in 1 line without using the word claim group. Print the output in json format: {"main_breif_descriptions": [{"Claims_group_number":..., "main_mermaid_number": "...", "brief_description": ...}]}\nWhile writing the brief description, consider the writing style of the sample given below:\n \nFIG. 1 illustrates, in a flowchart, operations for using a user profile in accordance with certain embodiments. \n \nBrief Description;\n\n\nStep 30: Identify the claim group number from field claims_group_number from markdown table ####mermiads####. Extract all the mermaids for each claim group number from field mermaid from markdown table ####mermiads####. Identify goal for each extracted mermaid for each claim group in fewer than 20 words. Print the output in json format {"Goal_claim_group_mermaids": [{"Claims_group number":..., "sub_mermaid_number":..., "goal..."},...]}\n\n\nStep 31: Generate a brief description for each goal from field goal for each mermaid from field sub_mermaid_number for each claim group from markdown table Goal_claim_group_mermaids in 1 line without using the word claim group. Print the output in json format:\n{"breif_descriptions": [{"Claims_group_number":..., "sub_mermaid_number": "...", "brief_description": ...}]}\n \n \nWhile writing the brief description, consider the writing style of the sample given below:\n \nFIG. 1 illustrates, in a flowchart, operations for using a user profile in accordance with certain embodiments. \n \nBrief Description;\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(402,6,51,E'block_diagram',E'user',E'main_mermaids:####{{mermaid}}####  mermaids:####{{mermaids}}####',NULL,E'{"project": ["mermaid", "mermaids"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(403,7,51,E'block_diagram',E'user',E'Step 27',NULL,NULL,E'{"project": []}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(476,8,51,E'block_diagram',E'user',E'Step 28',NULL,NULL,E'{"project": ["breif_description"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(477,9,51,E'block_diagram',E'user',E'Step 30',NULL,NULL,E'{"project": []}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(478,10,51,E'block_diagram',E'user',E'Step 31',NULL,NULL,E'{"project": ["breif_descriptions"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json');




DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id" in (317,321,324,374,414,417,420,423,435,438,441);
INSERT INTO "prompt"."prompt_seq"("prompt_seq_id","seq","prompt_id","short_name","role","instructions","fun_def","inputs","outputs","created_at","modified_at","repeat","is_stream","model","multicalls","max_tokens","prompt_actions","claim_nums","decision_step","step_description","revised_step_description","claim_component_entities","claim_component_actions","skip_append","output_format")
VALUES
(317,1,44,E'regenerate_claim',E'system',E'I am providing you text ####claims### to perform the following steps.\n\nStep 3: Find all the entities and their associated numerical identifiers for all the claims from text ####Claims#### in the output. entity_numerical_identifier is a number that identifies the entity uniquely. For example Device (10,40), Object (15, 45). Do not consider claim number, acronyms, percentages or any other textual attribute as numerical identifier for entity_numerical_identifier.  Print output in the json format with title ==entity_claims== where every entity is in a separate row. Print the json ==entity_claims== in this format:\n{"entity_claims": [ {"claim_number": .., "entity_claim": ..., "entity_numerical_identifier":..}, ..]}\n\nStep 3.1: Please continue the process of Step 3 to identify all the entities and their associated numerical identifiers for each claim from text ####Claims####. entity_numerical_identifier is a number that identifies the entity uniquely. For example Device (10,40), Object (15, 45). Exclude claim number, acronym, percentage or any other textual attribute as numerical identifier. Ensure all claim numbers from text ####Claims#### are referenced in the output. Do not print output for this step. \n\nStep 4: Identify all the entity actions from text ####Claims#### for each/every entity from field entity_claim associated with each/every claim from field claim_number from json ####entity_claims####. Determine the purpose of all the entity actions that are identified. Group the entities from field entity_claim if the purpose of their entity actions is the same/similar even if the language of their entity actions is different. id_clm should be numbered as 1,2,3,...etc.\nPrint the output in json format with title ==claim_entity_actions==.  Print the json ==claim_entity_actions== in this format:\n{"claim_entity_actions": [ { "id_clm:":..., "entity_action_claim":..., "purpose":..., "entity_claim": [.,.,.], "entity_numerical_identifier":..., "claim_number":...}, ...]}\n\nStep 4.1: Re-run Step 4 till all the entity actions and  are identified from text ####Claims#### for each/every entity from field entity_claim associated with each/every claim from field claim_number from json ####entity_claims####. Ensure that the purpose of all the entity actions is determined. Ensure to group all entities if the the purpose of their actions is the same. The json claim_entity_actions should reference all the claim numbers from text ####Claims####. Ensure the response is generated in one go.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(321,5,44,E'regenerate_claim',E'system',E'I am providing you text ####claims### and markdown table of ####entity_claims#### to perform the  steps from  step 5 to 5.1. \n\nStep 5: Identify all the specific numerical attributes, all the specific properties (including physical properties such as state, texture, etc. and particular examples), all the specific quantities/number of the entity/entities, all alternatives and all embodiments/uses/applications from text ####claims#### associated with each/every entity from field entity_claim for all claims from field claim_number from markdown table ####entity_claims#### and quote from text ####Claims#### in the output. Determine the purpose of all the specific attributes that are identified in context of text ####Claims####. When we quote from text ####claims####, do not change the language and quote as is. Field id_clm should be numbered as 1,2,3,...etc. Print the output in json format with title ==claim_entity_attributes== where every entity attribute is in a separate row. The entity attribute rows may contain multiple entities in field entities_claim and multiple claims in field claim_numbers in the output if they share the same/similar attribute.  Print the json ==claim_entity_attributes== in this format:\n{"claim_entity_attributes": [ {"id_clm":..., "specific_attributes_claim": .., "entities_claim": ..., “purpose”:..., "Claim_numbers": }, ..]}\n\nStep 5.1: Please continue the process of Step 5 for all the entities from field entity_claim for all claims from field claim_number from json ####entity_claims####. Ensure the response is generated in one go.\n\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(324,8,44,E'regenerate_claim',E'system',E'I am providing you text ####Current Invention### to perform the  steps from  step 5 to 6. \n\nStep 5: Identify all the entities from the text ####Current Invention####. Entities are defined as nouns/phrases/parts/components that perform an action to achieve some result. Ensure all the nouns/phrases/parts/components that perform an action or aid any action are captured in the output. Print the output in json format with title ==entity_invention== where each entity is in a separate row. The json ==entity_invention== will contain the following fields: serial_number, entity_inv. Print the json ==entity_invention== in this format:\n{"entity_invention": [ {"serial_number": .., "entity_inv": ...}, ..]}\n\nStep 6: Identify all the entity actions from text ####Current Invention#### for each/every the entity from field entity_inv from json entity_invention and determine the purpose of the entity action. Group the entities from field entity_inv if the purpose of their entity actions is the same/similar even if the language of their entity actions is different. id_inv should be numbered as 1,2,3,...etc. Print output in json format with title ==invention_entity_actions== where every entity action corresponding to an entity is in a separate row.   Ensure all the entities from field entity_inv from json ==entity_invention== are grouped in the output. Print the json ==invention_entity_actions== in this format:\n{"invention_entity_actions": [ { "id_inv":..., "entity action_invention":..., "purpose_inv":..., "entities_inv": [.,.,.]}, ..]}\n\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(374,7,49,E'flowchart_description',E'user',E'Current Invention: ####{{invention}}####\\n additional_entities_to_describe: ####{{missing_attributes_desc}}####\nentity_attributes_invention: ####{{total_attributes_invention}}####',NULL,E'{"project": ["missing_attributes_desc", "invention", "total_attributes_invention"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(414,13,44,E'regenerate_claim',E'system',E'I am providing you the following inputs:\n####Claims####\n####Current Invention\n####claim_entity_actions####  in markdown table format\n####invention_entity_actions#### in markdown table format \n\nStep 7:Co-relate the entity actions for each id_clm from markdown table ####claim_entity_actions#### with the corresponding entity actions from id_inv from markdown table  ####Invention_entity_actions#### by doing the following: \nRead and understand each/every entity action from field entity_action_claim and its associated purpose from field purpose for all the id_clm one by one from markdown table ####claim_entity_actions####. Then co-relate the read and understood entity action for each id_clm by comparing/mapping it one by one with all id_inv and it’s associated entity action invention from field entity_action_invention and purpose from field purpose_inv. Entity action from id_clm can be mapped to multiple entity actions from id_inv.\n This is basically reverse mapping claim language of the entity actions in claims from text ####Claims#### with the entity actions as given in the text ####Current Invention####. Print the output of this step in json format with title ==entity_actions_rewritten== where every id_clm  from field id_clm is in a separate row. Print the json ==entity_actions_rewritten== in this format:\n{"entity_actions_rewritten": [ {"id_clm":..., "id_inv":...}, ..]}\n\nStep 7.1: Please continue the process of Step 7 till all the id_clm are referenced and mapped with id_inv. \n\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(417,16,44,E'regenerate_claim',E'system',E'I am providing you the following inputs to compare:\n####invention_entity_actions#### in markdown table format \n####entity_actions_rewritten#### in markdown table format \n\nStep 8: Identify the ids from field id_inv from markdown table ####invention_entity_actions#### that are not correlated with any of the ids from field id_clm from markdown table ####entity_actions_rewritten####. Print output in json format with title ==missing_entity_actions==.  Print the json ==missing_entity_actions== in this format:\n{"missing_entity_actions": [ { "id_inv": ..., "purpose_inv":...}, ..]}. Do not print the instructions in the output.\n\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(420,19,44,E'regenerate_claim',E'system',E'I am providing you the following inputs to co-relate:\n####claim_entity_actions#### in markdown table format \n####missing_entity_actions#### in markdown table format \n\nStep 9: Co-relate the id_inv from markdown table ####missing_entity_actions#### with the most close id_clm from markdown table ####claim_entity_actions#### by doing the following: Co-relate the purpose of each id_inv from field purpose_inv one by one by comparing/mapping with the purpose of each id_clm from field purpose. Print the output in json format with title ==missing_entity_action_rewritten==. Print the json ==missing_entity_action_rewritten== in this format:\n{"missing_entity_action_rewritten": [ {"id_clm":....,"id_inv": ...}, ..]}. Do not print the process in the output.\n\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(423,22,44,E'regenerate_claim',E'system',E'I am providing you text ####Current Invention#### and ####grouped_entity_invention#### in markdown table format. \n\nStep 7: Identify all the specific numerical attributes, specific properties (including physical properties such as state, texture, etc. and particular examples), specific quantities, every/each alternative and every/each embodiment, every/each use and every applications  from text ####Current invention#### associated with each/every entity from field entities_inv from markdown table ####grouped_entity_invention####. Quote the entire paragraph from text ####Current invention#### that describes the entity actions/attributes/properties/uses. Remember, there may be multiple paragraphs that describe the entity actions/attributes/properties or uses. Some paragraphs may have the explicit reference to the entity and others may have implicit references to the entity.  Determine the purpose of all the identified attributes in context of the text ####Current Invention####. While quoting from text ####Current invention####, do not change the language and quote as is. id_inv should be numbered as 1,2,3,...etc. Print output in json format with title ==specific_attributes_invention==where each attribute is in a separate row.  Print the json ==specific_attributes_invention== in this format:\n{"specific_attributes_invention": [{ "id_inv":..., "specific_attributes_inv": ..., "entities_inv":..., "purpose_inv":...}, ..]}\n\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(435,34,44,E'regenerate_claim',E'system',E'I am providing you the following inputs:\n####Claims####\n####Current Invention\n####specific_attributes_claims#### in markdown table format\n####total_attributes_invention#### in markdown table format\nto perform the following steps. \n\nStep 7: Co-relate the specific attributes associated for each id_clm from markdown table ####specific_attributes_claims#### with the corresponding specific attributes associated with id_inv from markdown table  ####total_attributes_invention#### by doing the following:\na)Read and understand each specific attribute from the field \'specific_attributes_claim\' and its associated purpose for all the \'id_clm\' one by one from the markdown table ####specific_attributes_claims####. \nb) Read and understand each specific attribute from the field \'all_invention_attributes\' and its associated purpose from the field \'purpose_inv\' for all the \'id_inv\' one by one from the markdown table ####total_attributes_invention####. \nc) Using this understanding, correlate \'id_clm\' with the most closely related \'id_inv\'  purpose of the attributes are the same or similar. \nd) Specific attribute from id_clm can be mapped to multiple specific attributes from id_inv\nPrint the output of this step in json format with title ==entity_attributes_rewritten==. Print the json ==entity_attributes_rewritten== in this format:\n{"entity_attributes_rewritten": [ {"id_clm": .., "id_inv": ...}, ..]}. Do not print the process in the output.\n\nStep 7.1: Please continue the process of Step 7 till all the id_clm are referenced and mapped with id_inv.\n\n\n\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt\n-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(438,37,44,E'regenerate_claim',E'system',E'I am providing you the following inputs:\n\n####entity_attributes_rewritten#### in markdown table format\n####total_attributes_invention#### in markdown table format\nto perform the following steps. \n\nStep 8: Identify the ids from field id_inv from markdown table ####total_attributes_invention#### that are not correlated\nwith any of the ids from field id_clm in markdown table ####entity_attributes_rewritten####.\nPrint the output of this step in JSON format as follow:\n{"additional_entity_attributes_rewritten": [ { "id_inv": …, "additional_attributes_invention":..., "purpose_inv":}, ..]}. Do not\nprint process in the output.\n\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(441,40,44,E'regenerate_claim',E'system',E'I am providing you the following inputs:\n####specific_attributes_claims####\n  in markdown table format\n####additional_entity_attributes_rewritten####\n  in markdown table format\nto perform the following\n  steps. \n \nStep 9: Co-relate id_inv\n  from markdown table  ####additional_entity_attributes_rewritten####\n  with the most appropriate id_clm from markdown table\n  ####specific_attributes_claims#### by doing the following: Co-relate the purpose of each id_inv from field\n  purpose_inv one by one by comparing/mapping with the purpose of each id_clm\n  from field purpose.\nPrint the output of this step in json format with title ==missing_entity_attributes_rewritten==. Print the json ==missing_entity_attributes_rewritten== in this format:\n{"missing_entity_attributes_rewritten":\n  [ { "id_clm:":..., "id_inv": ...}, ...]}. Do not print\n  process in the output.\n \nStep 9.1: Re-run step 9\n  till all the id_inv are referenced and mapped with id_clm.\n \n\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);

DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id" in (360, 351, 373, 374, 375, 376, 377, 378, 395, 452);

INSERT INTO "prompt"."prompt_seq"("prompt_seq_id","seq","prompt_id","short_name","role","instructions","fun_def","inputs","outputs","created_at","modified_at","repeat","is_stream","model","multicalls","max_tokens","prompt_actions","claim_nums","decision_step","step_description","revised_step_description","claim_component_entities","claim_component_actions","skip_append","output_format")
VALUES
(351,1,46,E'block_diagram_common',E'system',E'I have provided following inputs to perform steps 5 to 9\n####Claims####\n####Current Invention####\n####entity_actions_rewritten####in markdown table format\n####claim_types#### in json format\n\nStep 5: An independent claim does not reference any other claim. However, a dependent claim always references another claim on which it depends. Using the above logic do the following: \na) Group only the system claims from field system_claim_numbers from json claim_types. \nb) No two independent claims can be grouped in the same claim group. \nPrint the output in a json format with title==claim_groups==. \nPrint the json ==claim_groups== in this format:\n{"claim_groups": [ { "claims_group_number":..., "system_independent_claim": ..., "system_dependent_claim":....}, ..]}. Ensure no dependent claim is considered as a distinct claim_group. Do not print the process in the output.  \n \nStep 5.1: Rerun the step till each system claim from from field system_claim_numbers from json claim_types (independent and/or dependent) is referenced in json claim_groups. Do not include component/apparatus/product/device/machine type claims under system claim category in the output. Do not print output for this step.\n\n\nStep 6:  For the claims identified from fields system_independent_claim and from field system_dependent_claim from json ####claim_groups####, use the entity actions from field {entity_action_claim} from markdown table ####entity_actions_rewritten#### to identify which dependent claim depends on which entity action of the independent claim or the entity action in other dependent claims in context of text ####Claims####. Provide the mapping between the dependent claims and the claim entity actions of the independent claim or the entity actions of other dependent claims on which it depends. Output format: Dependent claim --> Independent claim --> reason etc. \nPrint the json ==claim_dependency== in this format:\n{"claim_dependency": [{"claims_group_number":..., "dependent_claim": ..., "independent_claim": ..., "reason": ...}, ...]}\n\nStep 7: Identify and name the system that encompasses the specific entity actions associated with text ####current invention#### from field entity action_invention from markdown table ####entity_actions_rewritten#### and all the claims from ==system_Claims==. Output format: ==System==\nPrint the json ==System== in this format:\n{"system": ...}\n\n\nStep 8: a) Co-relate the identified claims for each claim group from field independent_claim, from field dependent_claim from json claim_groups with the field claim_number from markdown table ####entity_actions_rewritten####.\nb) Identify all the entities from field entity_claim and entities_inv from markdown table ####entity_actions_rewritten#### for the co-related claim numbers for each claim group.\nc) Group all the identified entities for each claim group from field entity_claim and from field entities_inv from markdown table  ####entity_actions_rewritten#### into components and sub-components using overlaps/commonalities in their entity action from either 1) from field entity_action_claim or from 2) field entity_action_invention from markdown table ####entity_actions_rewritten#### and using the json claim_dependency. These components and sub-components should be grouped such that when working together they manifest the invention from text ####Claims#### and text ####Current invention####. \nd) The grouped entities should be referred as component/sub-component only in the field component/sub-component type in the output.\ne) Ensure that entities from both field entity_claim and from field entities_inv are quoted/cited in the output. Ensure all the claims (both independent and dependent claims) identified for each claim group in the output of step 5 are referenced in the output. \nf) Number the components and sub-components in a unique numbering series with increment of 2 for each component as follows - if the component is numbered 502, the it\'s sub-component should be numbered 502-a, 502-b etc. The next component will be numbered 504 and it’s sub-component will be numbered 504-a, 504-b etc. Follow a unique number series for each claim group. For example if the component number in claim group 1 is starting with 502, the component numbewr in claim group 2 should start from 602. Print the output in json format with title ==component_entities== where every component/ sub-component is in a separate row. The json ==component_entities== will be in this format:\n{"component_entities": [ {"claims_group_number":...., "component/sub-component type":..., "component number":…, "sub-component number":..., "component/sub-component name ": ...,  "entity_claim":...., "entity_numerical_identifier":..., "entities_inv":..., "claim numbers":...}, ..]}. Do not repeat the process in the output.\n\nStep 8.1: Rerun step 8 till all the entities from both field entity_claim and from field entities_inv are referenced in the output and all the claims from field independent claims and from field dependent_claims for each claim group from json ==claim_groups== are referred in the output.\n\nStep 8.2: Ensure that the component and sub-component numbers from field component number and from field sub-component number are different. Ensure that component and sub-component follow that instructions given in step 8f.\n\nStep 9: Number the system, component and sub-component from field  Component/Sub-component by keeping the numbers of the component and sub-component as they are from field component number, from field sub-component number for each claim group from json ==component_entities==. if the component number for the first claim group starts with 502 the system should be 500. If the component number for the second claim group starts with 602 then its system number should be 600. The value in the field Component type - system/component/sub-component will only be either "system" or "component" or "sub-component" and any other value is not permitted in this field. Print the output json format with title ==component_sub-component==. The json ==component_sub-component== will be in this format:\n{"component_sub-component": [{"claims_group_number":...., "Component type - system/component/sub-component": "system/component/sub-component", "system/component number": ..., “sub-component number”:…,  "system/component/sub-component name":..., "explanation":..., "entity_claim":..., "entity_numerical_identifier":..., "entities_inv":..., "claim numbers":...}, ..]}. Do not print process in the output.\n\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(360,1,45,E'flowchart_common',E'system',E'I am providing you the following inputs to perform steps 5 to 10. \n####Claims####\n####Current Invention####\n####entity_actions_rewritten####in markdown table format\n####claim_type#### in json format\n\nStep 5: An independent claim does not reference any other claim. However, a dependent claim always references another claim on which it depends. Using the above logic do the following: \na) Group only the method claims from field method_claim_numbers from json ####claim_type####. \nb) No two method independent claims can be grouped in the same claim group. \nPrint the output in a json format. \nPrint the json ==claim_groups== in this format:\n{"claim_groups": [ { "claims_group_number":..., "Method_independent_claim": ...,  "Method_dependent_claim":....}, ..]}. Ensure no dependent claim is considered as a distinct claim_group. Do not print the process in the output.\n\nStep 5.1: Rerun the step till each method claims from field method_claim_numbers \n(independent and/or dependent) is referenced in json claim_groups. Do not include system/computer program product /component/apparatus/product/device/machine type claims under method claim category in the output. Do not print output for this step.\n \nStep 6:  For the claims identified from the output of step 5, use the entity actions from field entity_action_claim from markdown table ####entity_actions_rewritten#### to identify which dependent claim depends on which entity action of the independent claim or the entity action in other dependent claims in context of text ####Claims####. Provide the mapping between the dependent claims and the claim entity actions of the independent claim or the entity actions of other dependent claims on which it depends. Output format: Dependent claim --> Independent claim --> reason etc. \nPrint the json ==claim_dependency== in this format:\n{"claim_dependency": [{"claims_group_number":..., "dependent_claim": ..., "independent_claim": ..., "reason": ...}, ...]}\n\nStep 7: a) Identify all the main steps/entity actions for all the claims for each claim group from field claims_group_number using the json claim_dependency  that occur in a logical sequence to accomplish the method in context of all the claims from Step 5 and the ####current invention####. b)  Identify all the sub-steps/parallel steps/entity actions, if available, that are additional details/limitations for the method of main steps in context of ####claims####  and json ==claim_dependency==. Remember a sub-step is an additional limitation/detail of the main step and not a repetition of it. c) Ensure all the claims for each claim group from json ==claim_dependency== are referred in Step 7 output. (d) Follow a unique numbering series for each claim group while numbering the main step and sub-step. The number in the field Step number and the number in the field Sub-Step number cannot be the same. For example if steps in claim group 1 is starting with 100, steps in claim group 2 should start from 200. Use an even numbering series with increment of 2 for each step as follows – if for claim group 1 the 1st step is Step 100, the subsequent steps will be numbered 102, 104 etc. Similarly, for the 2nd claim group, if the 1st step is 200, the subsequent steps will be numbered 202, 204 etc. \ne) For sub-steps, number as follows - if step number is 100, it\'s sub-step number must be 100-a, 100-b, for step 102 the sub-step must be 102-a, 102-b etc. f) The value in the field Step/Sub-Step type will only be either "step" or "sub-step" and any other value is not permitted in this field. Print the output in a json format with title: ==Steps_sub-steps== where every step/ sub-step is in a separate row. \nPrint the json ==Steps_sub-steps== in this format:\n{"Steps_sub-steps": [ { "claims_group_number":..., "Step/Sub-Step type":"step/sub-step", "Step number":..., "Sub-Step number": ..., "explanation quote from text ####claims####":..., "claim number":..., "entity_claim":..., "entity_numerical_identifier":..., "entities_inv":...}, ..]}. Do not print process in the output.\n\nStep 7.1: Rerun step 7 till each claim from field independent_claim and from field dependent_claim for each claim group from json ==claim_dependency == are referenced in the output.\n\nStep 7.2: Ensure that the step and sub-step numbers from field Step number and from field Sub-step number are different. Ensure that the step and sub-step number follow the instruction given in the step 7d and 7e. \n\nStep 8: Rewrite the json ==Steps_sub-steps== by doing the following:\na) keep the step and sub-step numbers from field Step number, from field Sub-Step number as they are\nb) Re-write the explanation from "explanation quote from text ####Claims####" in a concise form without changing the technical language/vocabulary or alter any of the numerical attributes, specific properties (including physical properties such as state, texture, etc. and particular examples), specific quantities details/parameters/definitions in context of text ####Claims####.\nPrint the output in a json ==Steps_sub-steps Rewrite== in this format:\n{"Steps_sub-steps Rewrite": [ {"claims_group_number":..., "Step/Sub-Step type":"step/sub-step", "Step number":..., "Sub-Step number": ..., "explanation": ..., "claim number":...}, ..]}. Do not print instructions in the output.\n\nStep 9: A decision step is defined as a point within a step or sub-step where an explicit choice is made between two or more alternative paths. This choice is based on the evaluation of specific conditions or criteria and directly influences the subsequent steps or sub-steps and hence the flow of the method. To identify a decision step from the json ==Steps_sub-steps==, look for descriptions in field explanation quote from text ####claims#### to identify whether an explicit choice is being made between two or more alternative paths. Implicit choice from the explanations should not be considered as a decision step. Using this definition of a decision step, identify all the decision making steps using field explanation quote from text ####claims####  for each step/sub-step from field  Step number and from field Sub-Step number from json ==Steps_sub-steps==. Identify the decision making steps for each claim group from field claims_group_number.  Print the output of this step in json format with title ==decision_steps==. Print the json ==decision_steps== in this format:\n{"decision_steps": [ {"claims_group_number":..., "Decision step":..., "Step/Sub-Step type":"step/sub-step"}, …]} . If there are decision steps involved, print the output in the following format: {"decision_steps":[{"no decision step": "no decision step"}]} Do not print process instructions in the output.\n\nStep 10: Identity and list all the entities from field \'entities_inv\' from markdown table ####entity_actions_rewritten#### that are not directly mentioned in the claims but are related to the broader context of the invention or the application of the claimed method. Quote them from field \'entities_inv\' as is from markdown table ####entity_actions_rewritten####. Print output in json format with title ==additional_entities_to_describe==. The json ==additional_entities_to_describe==will have the field entities_inv_addl. Print the json ==additional_entities_to_describe== in this format:\n{"additional_entities_to_describe": [ { "entities_inv_addl":...}, ..]}. Do not print process in the output.\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(378,1,47,E'flowchart_diagram',E'system',E'Step 15: Steps/sub-steps can be identified from field Step/Sub-Step type from markdown table #### Steps_sub-steps Rewrite####. If the value in field  Step/Sub-Step type is ‘step’ it can be identified as step. If the value in field  Step/Sub-Step type is ‘sub-step’, it can be identified as sub-step. Using this logic,  provide the mermaid script/syntax for all steps for each claim group from field claims_group_number using markdown table ####Steps_sub-steps Rewrite#### by doing the following: For each claim group from field claims_group_number, identify nodes, conditions (if any), and different links/paths of all the steps from field Step number, from markdown table ####Steps_sub-steps Rewrite#### and decision making step from field Decision step from markdown table ####Decision_step####. Do not print output for this step. Do not repeat instructions in the output\n \nStep 16: Choose the layout for output from Step 15. Use graph TB for a top-down layout or graph LR for a left-right layout. Do not print output for this step. Do not repeat instructions in the output. \n \nStep 17: Define the nodes for output from Step 15. Use square brackets for regular nodes e.g., 100["Node A"].  Use curly braces for decision nodes e.g., 102{"Condition B"}. Treat "If" condition nodes as decision nodes. Do not print output for this step. Do not repeat instructions in the output. \n \nStep 18: For the Mermaid script/syntax from step 15 define the links/paths between nodes from Step 17 using -->. To add text to the links/paths, use |Link text| for each claim group. For multiple links/paths between nodes, define each link separately. For decision making link/path, use appropriate messages to handle yes/no cases. For example, a decision node should have two separate links/paths with messages as "yes" and "no". Do not use a yes or no link/path for nodes that are not of decision type. Do not print output for this step. Do not repeat instructions in the output. \n \nStep 19:Review and adjust the Mermaid script/syntax for each claim group from field claims_group_number from markdown table ####Steps_sub-steps Rewrite#### that includes only steps but not sub-steps. Each mermaid in a claim group must be numbered.  For each claim group follow a unique number for the mermaids. For example if the mermaid in claim group 1 is numbered as Fig. 1, the mermaid in claim group 2 must be numbered as Fig. 2. Do not print the process in the output. Refer the example given below for following the style of the mermaid. Do not repeat instructions in the output. \n \nmermaid\nCopy code\ngraph TB\n100["Determine an initial eye strain context for a user wearing a VR headset."]\n102{"Recognize a User Interface (UI) adaptation."}\n104["Establish the intensity of the UI adaptation."]\n106["Display modified VR content by applying the identified UI adaptation."]\n108["Assess an updated eye strain context."]\n110{"If the updated eye strain context indicates a decrease in eye strain."}\n112["Modify the priority weight for the UI adaptation."]\n114["Refresh a user\'s profile with the UI adaptation, its intensity, and the modified priority weight."]\n100 --> 102\n102 -- Yes --> 104\n104 --> 106\n106 --> 108\n108 --> 110\n110 -- Yes --> 112\n112 --> 114\n110 -- No --> 102\n \nStep 20:  Confirm that the yes and no condition from the decision making step from json ####Decision_step#### has already been considered in the output of Step 19. If no, then re-generate the output from Step 19. Do not repeat instructions in the output. \nPrint the output in json format with title:==main_mermaids==. \n{"main_mermaids": [{"claims_group_number":..., "main_mermaid_number": ..., "mermaid": "mermaid script/syntax"...}, ....]}\n\n\nStep 22:Identify all the steps that have sub-steps by referencing the field Step/Sub-Step type from markdown table #### Steps_sub-steps Rewrite####. Provide a separate mermaid script/syntax for each of the identified step with all its corresponding sub-steps using markdown table ####Steps_sub-steps Rewrite#### by doing the following: Identify nodes, conditions (if any), and different links/paths of all the steps and sub-steps from field Step number, from field Sub-step number from markdown table ####Steps_sub-steps Rewrite#### and decision making step from field Decision step from markdown table ####Decision_step####. Do not print output for this step. Do not repeat instructions in the output. \n\nStep 23: Choose the layout for output from Step 22. Use graph TB for a top-down layout or graph LR for a left-right layout. Do not print output for this step. Do not repeat instructions in the output. \n \nStep 24: Define the nodes for output from Step 22. Use square brackets for regular nodes e.g., 100["Node A"].  Use curly braces for decision nodes e.g., 102{"Condition B"}. Treat "If" condition nodes as decision nodes. Do not print output for this step. Do not repeat instructions in the output. \n \nStep 25: For the Mermaid script/syntax from step 22 define the links/paths between nodes from Step 24 using -->. To add text to the links/paths, use |Link text| for each step with sub-steps under each claim group. For multiple links/paths between nodes, define each link separately. For decision making link/path, use appropriate messages to handle yes/no cases. For example, a decision node should have two separate links/paths with messages as "yes" and "no". Do not print output for this step. Do not repeat instructions in the output. \n \nStep 26: Review and adjust the Mermaid script/syntax for each step with all its corresponding sub-steps from markdown table ####Steps_sub-steps Rewrite####. Each mermaid in a claim group must be numbered.  For each claim group follow a unique number for the mermaids. For example if the first mermaid in claim group 1 is numbered as "Fig. 1A", the second mermaid in claim group 1 must be be numbered as Fig. 1B, etc. Similarly the first mermaid in claim group 2 is  numbered as Fig. 2A, the second mermaid in claim group 2 must be numbered as Fig. 2B, etc. Do not print the instructions in the output. Refer the example given below for following the style of the mermaid. Do not repeat instructions in the output. \n \nmermaid\nCopy code\ngraph TB\n100["Determine an initial eye strain context for a user wearing a VR headset."]\n102{"Recognize a User Interface (UI) adaptation."}\n104["Establish the intensity of the UI adaptation."]\n106["Display modified VR content by applying the identified UI adaptation."]\n108["Assess an updated eye strain context."]\n110{"If the updated eye strain context indicates a decrease in eye strain."}\n112["Modify the priority weight for the UI adaptation."]\n114["Refresh a user\'s profile with the UI adaptation, its intensity, and the modified priority weight."]\n100 --> 102\n102 -- Yes --> 104\n104 --> 106\n106 --> 108\n108 --> 110\n110 -- Yes --> 112\n112 --> 114\n110 -- No --> 102\n \nStep 27:  Confirm that the yes and no condition from the decision making step from json ####Decision_step#### has already been considered in the output of Step 26. If no, then re-generate the output from Step 26. Do not print output for this step. Do not repeat instructions in the output. \n\nPrint the output in json format with title:==mermaids==. \n{"mermaids": [{"claims_group_number":..., “sub_mermaid_number": ..., "mermaid": "mermaid script/syntax"...}, ....]}\n\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(395,1,51,E'block_diagram',E'system',E'Step 16: Identify the system and all the components from field Component type - system/component/sub-component from markdown table ####component_sub-component####. If the value in field Component type - system/component/sub-component is system then it is system. If the value in the field Component type - system/component/sub-component is component then it is a component. Provide a separate mermaid script/syntax only for system and components for each claim group from field claims_group_number from markdown table ####component_sub-component####. Do not print output for this step. Do not print instructions in the output.\n\nStep 17: Choose the layout for output from step 16. Use graph TB for a top-down layout or graph LR for a left-right layout. Do not print output for this step. Do not print instructions in the output.\n\nStep 18: Define the nodes for each claim group for the output from step 16. Use square brackets for regular nodes (e.g., 200["Host System"]). Do not print output for this step. Do not print instructions in the output.\n\nStep 19: For the Mermaid script/syntax from step 16, use the word "subgraph" to start a subgraph and the word "end" to close it. Define all nodes that belong to the subgraph. Define the links for  all the nodes at the end. Do not print output for this step. Do not print instructions in the output.\n\nStep 20: Review and adjust the Mermaid script/syntax involving only the system and components for each claim group as needed. Refer the example given below for following the style of the mermaid. This sample is for reference only, do not follow numbering of the sample given below. Keep the numbering same as given in the field system/component number from markdown table ####component_sub-component####. Each mermaid in a claim group must be numbered.  For each claim group follow a unique number for the mermaids. For example if the mermaid in claim group 1 is numbered as Fig. 5, the mermaid in claim group 2 must be numbered as Fig. 6.Do not mention claim numbers in the mermaid codes. Do not print instructions in the output.\n\nFor example, \ngraph LR\nsubgraph 200["Host System"]\n  210["Host Interface Unit"]\nend\nsubgraph 204["Memory Controller"]\n  212["Memory Interface Unit"]\n  214["Processing Unit"]\nend\nsubgraph 206["Non-Volatile Memory"]\n  202["Memory Devices"]\n  208["Host Memory"]\n  216["Information Units"]\nend\n200 --- 204\n204 --- 206\n\nPrint the output in json format: \n{"main_mermaids": [{"claims_group_number":..., "main_mermaid_number": ..., "mermaid": "mermaid script/syntax"...}, ....]}\n\n\nStep 22: Ensure that a valid mermaid syntax has been generated for each claim group in step 20.  Do not print the output for this step. Do not print instructions in the output.\n\n Step 23:Identify the all the components that have sub-components by referencing the  field Component type - system/component/sub-component from markdown table ####component_sub-component####.  Provide the a separate mermaid script/syntax for each of the identified component with all its corresponding sub-components from markdown table ####component_sub-component####. Do not print output for this step. Do not print instructions in the output.\n\nStep 24: Choose the layout for output from step 23. Use graph TB for a top-down layout or graph LR for a left-right layout. Do not print output for this step. Do not print instructions in the output.\n\nStep 25: Define the nodes for each claim group for the output from step 23. Use square brackets for regular nodes (e.g., 200["Host System"]). Do not print output for this step. Do not print instructions in the output.\n\nStep 26: For the Mermaid script/syntax from step 23, use the word "subgraph" to start a subgraph and the word "end" to close it. Define all nodes that belong to the subgraph. Define the links for  all the nodes at the end. Do not print output for this step. Do not print instructions in the output.\n\nStep 27: Review and adjust the Mermaid script/syntax for each component with all its corresponding  sub-components. Refer the example given below for following the style of the mermaid. This sample is for reference only, do not follow numbering of the sample given below. Keep the numbering of the components same as given in the field System/Component number, and the sub-component numbers from field Sub-component number from markdown table ####component_sub-component####. Each mermaid in a claim group must be numbered.  For each claim group follow a unique number for the mermaids. For example if the first mermaid in claim group 1 is numbered as "Fig. 5A", the second mermaid in claim group 1 must be be numbered as Fig. 5B, etc. Similarly the first mermaid in claim group 2 is  numbered as Fig. 6A, the second mermaid in claim group 2 must be numbered as Fig. 6B, etc.  Do not mention claim numbers in the mermaid codes. Do not print instructions in the output.\n\nFor example, \ngraph LR\nsubgraph 200["Host System"]\n  210["Host Interface Unit"]\nend\nsubgraph 204["Memory Controller"]\n  212["Memory Interface Unit"]\n  214["Processing Unit"]\nend\nsubgraph 206["Non-Volatile Memory"]\n  202["Memory Devices"]\n  208["Host Memory"]\n  216["Information Units"]\nend\n200 --- 204\n204 --- 206\n\nPrint the output in json format: {"mermaids": [{"claims_group_number":..., "sub_mermaid_number":..., "mermaid" : "mermaid script/syntax ..."}, ....]}. Do not repeat the step in the output. \n\n\nStep 28: Ensure that a valid mermaid syntax has been generated for each claim group in step 27.  Do not print the output for this step. Do not print instructions in the output.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(452,1,54,E'total_detailed_description',E'system',E'Step 1: Your aim is to revise the text ####total_description#### in context of writing a patent specification. You need to revise text ####total description#### without changing any of the technical language/technical vocabulary used in the text ####total_description#### by following these guidelines: \n\na) Read the entire text ####total_description#### to \nidentify the egregious/obvious duplications. If the details associated with step numbers are repeated in the details associated with the component numbers, do not consider them as duplications. However, if the details associated with a component number  are repeated with another component number or  if the details associated with a step number  are repeated with another step number then consider them as duplicates. Do not print output for this step. \n\nb) The revised description should he highly elaborate and cite the identified duplications from Step 1a once. The revised description must cite the entire input ####total_description#### without ommitting/ignoring any detail (ensuring all details are cited at least once). The elaborate revised description should not alter/generalise/summarise/change any of the technical language for any numerical attributes/properties such as taste, texture etc from input ####total_Description####. The elaborate revised description should not change the language \nof embodiments/examples, specific quantities, technical details/parameters/alternatives/definitions, uses etc. from the input ####total_description####.  \n\nc) Ensure the revised description in step 1b references the step \nnumbers like step 100, step 200 etc. or component numbers like 500, 502 or entity identifiers like (10,40) etc if used in input text ####total_description####. Do not print output for this step.\n\nOutput format: ==Revised description==',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);

DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id" in (295, 296, 297, 298, 299, 300, 301);
INSERT INTO "prompt"."prompt_seq"("prompt_seq_id","seq","prompt_id","short_name","role","instructions","fun_def","inputs","outputs","created_at","modified_at","repeat","is_stream","model","multicalls","max_tokens","prompt_actions","claim_nums","decision_step","step_description","revised_step_description","claim_component_entities","claim_component_actions","skip_append","output_format")
VALUES
(295,1,38,E'claims',E'system',E'I will provide you ####current invention####. Please write the claims for the current invention according to the instructions given below:\n\nStep 1: Identify all the entities from the text  ####current invention####. Print the output of this step in the following format: ==entities== Entity 1; Entity 2 etc. \n\nStep 2: Identify all the specific numerical attributes, specific properties (including physical properties such as state, texture, etc. and particular examples), specific quantities from text ####current invention#### associated with each/every entity from {entities} . Use this format for output: ==specific_attributes== Entity 1 from {entities} -> Specific Attributes; Entity 2 from {entities}-> Specific Attributes etc.\n\nStep 3: Identify all the entities from {entities} where (a) the sequence or order is associated with the entity and (b) where that sequence is important in context of ####current invention####. Output: ==entities_with_sequence==. \nExamples of words that mention sequence or order of entities are words like first, second etc. \n\nStep 3.1: Identify only the entities from {entities} where the sequence or order does not matter in context of ####current invention####. Ensure entities from ==entities_with_sequence== is not repeated here. Output: ==entities_without_sequence==\n\nStep 4: Generalise the language for all the entities that are specific from {entities_without_sequence} in context of text ####current invention####. Ensure the generalised language while broadening the scope of the action of {entities_without_sequence} is not vague and retains the technical essence of the entities in context of ####current invention####. Ensure the generalised language for entities from {entities_without_sequence} allows one to distinguish one entity from the other. Use this format for Output: ==entity_generalised== Entity 1 from {entities_without_sequence} -> generalisation needed yes/no -> generalised language for Entity 1 if yes; Entity 2 from {entities_without_sequence}-> generalisation needed yes/no -> generalised Entity 2 etc.,\n\nStep 4.1: Do not generalise the language of all the entities mentioning a sequence from {entities_with_sequence}. Use this format for Output: ==entity_generalised_sequence== Entity 1 from {entities_with_sequence} -> generalisation needed yes/no -> generalised language with sequence information for Entity 1 , Entity 2 from {entities_with_sequence} -> generalisation needed yes/no -> generalised language for Entity 2 with sequence information etc. \n\nStep 4.2: co-relate/Clearly associate each entity from {entities} with the corresponding generalised entity form {entity_generalised} or  {entity_generalised_sequence} and its respective specific attributes from {specific_attributes}. For each entity from {entities}, first list its specific attributes from {specific_attributes}, followed by its generalised form from {entity_generalised} or {entity_generalised_sequence}. This format will help to maintain the technical essence of each entity while ensuring that all the details from {specific_attributes} are included accurately and the language remains non-generalised. Use this format for output:\n==entity_attributes==\nEntity 1 from {entities} ->\nSpecific Attributes: {attribute1}, {attribute2}, ... from {specific_attributes};\nGeneralised Form: generalised Entity 1 from {entity_generalised} or from {entity_generalised_sequence};\nEntity 2 from {entities} ->\nSpecific Attributes: {attribute1}, {attribute2}, ... from {specific_attributes};\nGeneralised Form: generalised Entity 1 from {entity_generalised} or from {entity_generalised_sequence}; etc\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(296,2,38,E'claims',E'user',E'current invention: ####{{invention}}####',E'{\n    "name": "extract_intermediate_results",\n    "parameters": {\n        "type": "object",\n        "properties": {\n            "entities": {\n                "type": "string",\n                "description": "Entities from Step 1"\n            },\n            "specific_attributes": {\n                "type": "string",\n                "description": "specific attributes for the entities from Step 2"\n            },\n            "entities_with_sequence": {\n                "type": "string",\n                "description": "entities with sequence from Step 3"\n            },\n            "entities_without_sequence":{\n                "type": "string",\n                "description": "entities without sequence from Step 3.1"\n            },\n            "entity_generalised": {\n                "type": "string",\n                "description": "Generalized Entities without sequence from Step 4 "            },\n            "entity_generalised_sequence": {\n                "type": "string",\n                "description": "Generalised entities with sequence preserved from Step 4.1."                \n            },\n            "entity_attributes": {\n                "type": "string",\n                "description": "entity attributes from Step 4.2."                \n            }                       \n        },\n        "required": ["entities", "specific_attributes", "entities_with_sequence", "entities_without_sequence", "entity_generalised", "entity_generalised_sequence", "entity_attributes"]\n    },\n    "description": "Get all intermediate results of the Claims for Step 1 to Step 4.2"\n}',E'{"project": ["invention"]}',E'{"project": ["entities", "specific_attributes", "entities_with_sequence", "entities_without_sequence", "entity_generalised", "entity_generalised_sequence", "entity_attributes"]}',NULL,NULL,NULL,NULL,NULL,NULL,8192,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(297,3,38,E'claims',E'system',E'Step 5: Identify all the direct and indirect entity actions of all the entities from {entity_generalised} and all the entities from  {entity_generalised_sequence} using text ####current invention####. Generalise the language for all entity actions from text ####current invention####. Ensure the generalised language while broadening the scope of action retains the technical essence in context of ####current invention#### and is not vague. Use specifics for the entity actions from text ####current invention#### where necessary to avoid being vague. Use this format for output: ==entity_generalised_actions== Entity 1 from {entities}-> Entity 1 Action 1 -> generalised language for Entity 1 Action; Entity 1 from {entities} -> Entity 1 Action 2 -> generalised language for Entity Action 2, Entity 2 from {entities} -> Entity 2 Action 1 -> generalised language for Entity 2 Action 1 etc. \n\nStep 6: Identify the novelty of the invention from text ####current invention####. Identify entity actions from {entity_generalised_actions} in context of novelty that are necessary entity actions and entity actions that are optional. Print the output in the following format: ==Novelty==, ==necessary_features==, ==optional_features==  entity_generalised: ####{{entity_generalised}}#### entity_generalised_sequence: ####{{entity_generalised_sequence}}####',E'{\n    "name": "extract_intermediate_results_step_5_6",\n    "parameters": {\n        "type": "object",\n        "properties": {\n           "entity_generalised_actions": {\n                "type": "string",\n                "description": "Entity Actions from Step 5"\n            },\n            "novelty": {\n                "type": "string",\n                "description": "Novelty from Step 6"\n            },\n            "necessary_features": {\n                "type": "string",\n                "description": "Necessary features details from Step 6"\n            },\n            "optional_features": {\n                "type": "string",\n                "description": "Optional features from Step 6"\n            }\n                        \n        },\n        "required":   ["entity_generalised_actions",\n"novelty", "necessary_features", "optional_features"]\n    },\n    "description": "Get all intermediate results of the Claims for Step 5 to Step 6"\n}',E'{"project": ["entity_generalised_sequence", "entity_generalised"]}',E'{"project": ["entity_generalised_actions", "novelty", "necessary_features", "optional_features"]}',NULL,NULL,NULL,NULL,NULL,TRUE,8192,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(298,4,38,E'claims',E'system',E'Step 9: You are a patent attorney. Your aim is to draft patent claims for text ####current invention#### by following Steps 10 to 29. When drafting claims, use the generalised language for all entities from {entity_generalised} or {entity_generalised_sequence} and generalised language for entity actions from {entity_generalised_actions} without being vague. When writing a claim it is important to describe how the various entities are structured and how the various entities interact and connect.\n\nStep 10: Draft independent claims for a method/system/ process/ apparatus/machine/device/product/composition etc. in context of novelty {novelty} using only the necessary features from {necessary_features}. Use the generalised language for entities from {entity_generalised} or {entity_generalised_sequence} and generalised language for entity actions from {entity_generalised_actions} to write all the independent claims without being vague. \n\nStep 11: Draft additional independent claims for larger systems, using only the necessary features from {necessary_features} that encompass the invention to enhance damages in litigation. Use the generalised language for entities from {entity_generalised} or {entity_generalised_sequence} and generalised entity actions from {entity_generalised_actions} to write all the independent claims without being vague. \n\nStep 12: Ensure all the independent claims are truly independent and not dependent on other claims. It is not allowed for Independent claims to reference any other claims. \n\nStep 13: For defining the borders of the invention with detailing and specificity, there can be the addition of dependent claims. The dependent claims must specify all the {specific_attributes} and specific entity forms/names for all generalised entities from {entity_generalised} or {entity_generalised_sequence} referenced in the independent claims using {entity_attributes}. {entity_attributes} stores the mapping between generalised entity from {entity_generalised} or {entity_generalised_sequence} with it\'s respective attributes from {specific_attributes} and specific entity form/name from {entities}. The dependent claims should not repeat/recite entity attributes/features already mentioned in the independent claims. \n\nStep 14: Write additional dependent claims using the additional features/actions of entities from {optional_features} and not covered in independent claims. \n\nStep 16: Ensure, the dependent claims reference the relevant independent claim on which it is dependent. Ensure, dependent claims reference only one independent claim on which it is dependent. Referencing more than one independent claim is not allowed. It is preferred that the dependent claims reference only the independent claims. Referencing other dependent claims is not preferred.   \n\nStep 17: Aim for 20 total claims, with 3 being independent, to avoid additional fees.\n\nStep 18: Avoid "means for" or "steps" in all claims to prevent invoking par. 112 issues.\n\nStep 19:  Replace terms like "mechanism", "element", or "member" with terms conveying specific functions such as "coupler", "support", or "detector."\n\nStep 20: Provide antecedent basis for entities used in all the claims and introduce features properly before reciting their functionality. Every entity or noun in the claim, when introduced, should be introduced by an article usually "a" or "an" and not article "the", except when introduced as a plurality or as "means".  When introducing plurality, avoid the use of article "the". Every subsequent reference to a previously introduced entity should be prefaced "the" or "said" (some practitioners use "said" to refer to entities, and "the" for other features). Adjectives may be dropped in subsequent references of entities only if the reference to the entity is unambiguous: "supporting member" can be later referenced as "said member", but if the invention also includes an "oscillating member", subsequent references should be "said supporting member" and "said oscillating member". Importantly, do not add limiting adjectives in subsequent references as given in the example ("said horizontally supporting member"). A claim may rely on itself for antecedent basis (e.g.: "a handle connected to the gear, the handle being axially aligned with the support member")\n\nStep 21:  In claims with multiple options, use "or" instead of "and" for clarity and proper scope. \n\nStep 22:  Limit method claims to entity actions, not structures, and ensure dependent method claims are based on entity actions. Ensure the method claims are not vague. \n\nStep 23: If entity actions from {entity_generalised_actions} recites quantities, use numerical approximation or a wider numerical range to convey the quantities in claims to broaden claim scope without being vague. \n\nEg: Avoid stating quantity of a polymer as a “specific percentage of a polymer” as it is vague. \nEg: Avoid stating the property of an entity by stating “possesses a certain degree of that property” as it is vague\n\nStep 24: Avoid subjective language or language lacking measurable quantities in all the claims. Use inputs from {entity_attributes} to avoid subjective language or language lacking measurable quantities.  \n\nStep 25:  Specify forces or quantities exerted on particular elements for clarity. Use inputs from {entity_attributes} to specify forces or quantities. \n\nStep 26: Remove redundant or unnecessary dependent claims. \n\nStep 27:  Review and edit claims for proper punctuation and formatting\n\nStep 28: Group all the claims in the proper order. Order all claims that depend on an independent claim before the next independent claim. \n\nStep 29: Avoid patent profanities such as:\n29.1 Do not use words such as "Preferably" or "Such As": These words imply that the element of the claim that follows isn\'t essential, and this could be interpreted to mean that it could be left out altogether. This may make it easier for a competitor to avoid infringement.\n29.2 Do not use words such as "Necessary" or "Important": This could imply that without this element, the invention would not work. This could limit the claim to only those situations where that element is present.\n29.3 Do not use "And/Or": This phrase can create ambiguity because it\'s not clear whether it means "and", "or", or both.\n29.4 Do Not use the word "About": This word can create uncertainty because it\'s not clear how much variation is allowed.\n29.5 Do not use "consists" of or "consisting of" and use "comprises" or "comprising" instead. The word "comprises" is often interpreted to mean "includes but is not limited to", and it generally does not limit the scope of a claim to the elements listed.  In contrast, "consists" or "consisting of" is more limiting and typically restricts the claim to the elements listed.\n29.6 Do not use words such as: "absolute", "such as", "all", "each", "every ", "always" "never", "same", "identical", "exact", "minimum", "maximum", "no other", "only", "important", "critical", "essential", "required", "must", "Necessary"\n29.7 Avoid words that are too vague and too exact:  "could", "might", "large", "small", "heavy", "above", "below", "right", "left", "superior", "inferior", "unique" etc.,\n29.8    Avoid negative limitations, for example avoid using "without" and "not"\n29.9  When describing a  quantity or number etc. try to add: "substantially" or "approximately", "about"\n29.10 Avoid use of words like: "having", "including", "characterizing", "adapted to" or "adapted for" or "capable of"\n29.11 Avoid annotations in claims to indicate a sequential order of steps. Do not annotate steps in a claim with language like "Step 1", "Step 2" etc. or "a", "b", "c" etc. Order of steps should not be specified to indicate a sequence of steps. \n29.12 In cases where multiple options are available, avoid the use of "or" or "and" between the options. Instead, qualify the options with "at least one a or b or c" or "one or more of a or b or c".\n\nentity_generalised: ####{{entity_generalised}}####\nentity_generalised_sequence: ####{{entity_generalised_sequence}}####\nentity_generalised_actions: ####{{entity_generalised_actions}}####\nnecessary_features: ####{{necessary_features}}####\noptional_features: ####{{optional_features}}####\nspecific_attributes: ####{{specific_attributes}}####',NULL,E'{"project": ["entity_generalised", "entity_generalised_sequence", "entity_generalised_actions", "necessary_features", "optional_features", "specific_attributes"]}',NULL,NULL,NULL,NULL,NULL,NULL,TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(299,5,38,E'claims',E'user',E'Step 30: Provide at least 2 independent claims, following steps from Step 10 to Step 29.  \n\nStep 31: Ensure all the the independent claims from Step 30 use the generalised language for all entities from {entity_generalised} or {entity_generalised_sequence} and generalised language for all entity actions from {entity_generalised_actions}.\n\nStep 32: Ensure all the independent claims from the output of Step 30 are truly independent and not dependent on other claims. It is not allowed for Independent claims to reference any other claims. Draft independent claims using only necessary features from {necessary_features}. \n\nStep 35: Ensure that the claims from Step 30 do not contain phrases like "....independent claim....". Do not print output for this step.\n\nStep 37: Use the formatting style of following ####sample claim#### as the format of the independent claims from step 30 (In all the independent claims one element is below the other element and avoid spacing between the elements of that claim). Ensure all elements of the independent claim start with small cap letter. Print the formatted claims. Do not print the step number\n\nSample claim:\n####{{claim_template}}####\n\nIndependent Claims:',E'{\n    "name": "generate_independent_claims",\n    "description": "generate all independent claims. Each independent claim ends with double new lines",\n    "parameters": {\n        "type": "object",\n        "properties": {\n            "independent_claims": {\n                "type": "string"\n            },\n            "total_independent_claims":{\n                "type": "number"\n            }\n        },\n        "required": ["independent_claims", "total_independent_claims"]\n    }\n}',E'{"template": ["claim_template"]}',E'{"project": ["independent_claims"]}',NULL,NULL,NULL,NULL,NULL,NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(300,6,38,E'claims',E'system',E'Step 40: Write all the dependent claims, following steps from Step 10 to Step 29 such that the total number of independent claims from {independent_claims} and dependent claims is 20. Do not print output for this step. Ensure all the dependent claims reference the respective independent claims only. Referencing other dependent claims is not preferred. \n\nStep 43: Using inputs from {entity_attributes},  ensure the dependent claims from Step 40 specify all the specific entities and all their corresponding specific attributes referenced in the respective independent claims on which they are dependent. The dependent claims must not repeat {entity_attributes}  already mentioned in the independent claims. {entity_attributes} stores the mapping between the generalised entity from {entity_generalised} or {entity_generalised_sequence} with it\'s respective specific attributes from {specific_attributes} and specific entity form/name from {entities}. Do not print output for this step. \n\nStep 43.1: Write additional dependent claims from Step 40 to distinctly relate to the respective independent claim on which it is dependent by specifying the generalised entity and its attributes from {entity_attributes} not covered from Step 43. {entity_attributes} stores the mapping between the generalised entity from {entity_generalised} or {entity_generalised_sequence} with it\'s respective specific attributes from {specific_attributes} and specific entity form/name from {entities}. Do not print output for this step. \n\nStep 44: Add additional dependent claims from Step 40 by specifying all the optional features from {optional_features} in the dependent claims. Ensure that the dependent claim cites the optional features from {optional_features} and cites all the associated specific attributes of all the {optional_features} using the specific name/form of entities from {entity_attributes} when writing the claim. Do not print output for this step.   Step 44.1: Once all the {optional_features} and {entity_attributes}are covered in the claims from Step 40, add additional dependent claims from by specifying features using your own knowledge base in context of the {entity_generalised_actions} and {novelty} to broaden the scope of the invention from ####current invention####. \n\nStep 45: Ensure none of the dependent claims from Step 40 repeat any entity action from {entity_generalised_actions} or any entity attributes/properties/quantities from {entity_attributes} mentioned in the independent claims from {independent_claims} or in other dependent claims. Do not print output for this step. \n\nStep 46: Ensure, all the dependent claims from Step 40 reference only the independent claim on which it is dependent. Referencing other dependent claims is not preferred. Referencing more than one independent claim is not allowed. Do not print output for this step. \n\nStep 47: Ensure that the dependent claims from Step 40 do not contain phrases like  ".....dependent claim.....". Do not print output for this step. \n\nStep 48: Ensure that the step 40 generates adequate number of dependent claims such that the total number of independent claims and dependent claims for the invention is 20. Include all the independent claims from {independent_claims} in the 20 claims. Do not print output for this step.                                          \n\nentity_attributes: ####{{entity_attributes}}####\noptional_features: ####{{optional_features}}####\nnovelty: ####{{novelty}}####\nentity_generalised_actions: ####{{entity_generalised_actions}}####\nentity_generalised: ####{{entity_generalised}}####\nentity_generalised_sequence: ####{{entity_generalised_sequence}}####\nspecific_attributes: ####{{specific_attributes}}####\nentities: ####{{entities}}####\nindependent_claims: ####{{independent_claims}}####',NULL,E'{"project": ["entity_attributes", "optional_features", "novelty", "entity_generalised_actions", "entity_generalised", "entity_generalised_sequence", "specific_attributes", "entities", "independent_claims"]}',NULL,NULL,NULL,NULL,NULL,NULL,TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(301,7,38,E'claims',E'user',E'Step 49: Print all the 20 claims which includes independent claims from {independent_claims} and dependent claims from output of Step 40 in the proper order by following the steps given: (a) Print any one independent claim from {independent_claims} first followed by all the dependent claims from Step 40 that depend on it before printing the next independent claim (b) Order all the dependent claims that reference the same independent claim under it (c) Number the claims in the descending order. Claims:',E'{\n    "name": "generate_claims",\n    "parameters": {\n        "type": "object",\n        "properties": {\n            "claims": {\n                "type": "string",\n                "description": "Claims in the proper order from Step 49."\n            },\n            "total_claims":{\n                "type": "number"\n            }\n        },\n        "required": ["claims", "total_claims"]\n    }\n}',NULL,E'{"project": ["claims"]}',NULL,NULL,NULL,TRUE,NULL,NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);

DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id" in (321, 423, 435, 436);
INSERT INTO "prompt"."prompt_seq"("prompt_seq_id","seq","prompt_id","short_name","role","instructions","fun_def","inputs","outputs","created_at","modified_at","repeat","is_stream","model","multicalls","max_tokens","prompt_actions","claim_nums","decision_step","step_description","revised_step_description","claim_component_entities","claim_component_actions","skip_append","output_format")
VALUES
(321,5,44,E'regenerate_claim',E'system',E'I am providing you text ####claims### and markdown table of ####entity_claims#### to perform the  steps from  step 5 to 5.1. \n\nStep 5: Identify all the specific numerical attributes, all the specific properties (including physical properties such as state, texture, etc. and particular examples), all the specific quantities/number of the entity/entities, all alternatives and all embodiments/uses/applications from text ####claims#### associated with each/every entity from field entity_claim for all claims from field claim_number from markdown table ####entity_claims#### and quote from text ####Claims#### in the output.When we quote from text ####claims####, do not change the language and quote as is in the output. Once the attributes are extracted from text ####Claims####, determine the purpose of all the specific attributes in context of text ####Claims####. Field id_clm should be numbered as 1,2,3,...etc in the output. Print the output in json format with title ==claim_entity_attributes== where every entity attribute is in a separate row. The entity attribute rows may contain multiple entities in field entities_claim and multiple claims in field claim_numbers in the output if they share the same/similar attribute.  Print the json ==claim_entity_attributes== in this format:\n{"claim_entity_attributes": [ {"id_clm":..., "specific_attributes_claim": .., "entities_claim": ..., “purpose”:..., "Claim_numbers": }, ..]}\n\nStep 5.1: Please continue the process of Step 5 for all the entities from field entity_claim for all claims from field claim_number from json ####entity_claims####. Ensure the response is generated in one go. When we quote attributes from text ####claims####, do not change the language and quote as is in the output.\n\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(423,22,44,E'regenerate_claim',E'system',E'I am providing you text ####Current Invention#### and ####grouped_entity_invention#### in markdown table format. \n\nStep 7: Identify all the specific numerical attributes, specific properties (including physical properties such as state, texture, etc. and particular examples), specific quantities, every/each alternative and every/each embodiment, every/each use and every applications  from text ####Current invention#### associated with each/every entity from field entities_inv from markdown table ####grouped_entity_invention####. Quote the entire paragraph from text ####Current invention#### that describes the entity actions/attributes/properties/uses in the output. Remember, there may be multiple paragraphs that describe the entity actions/attributes/properties or uses. Some paragraphs may have the explicit reference to the entity and others may have implicit references to the entity.  Once the attributes are extracted from text ####Current Invention####, determine the purpose of all the identified attributes in context of the text ####Current Invention####. While quoting from text ####Current invention####, do not change the language and quote as is. Field id_inv should be numbered as 1,2,3,...etc in the output.  Print output in json format with title ==specific_attributes_invention==where each attribute is in a separate row.  Print the json ==specific_attributes_invention== in this format:\n{"specific_attributes_invention": [{ "id_inv":..., "specific_attributes_inv": ..., "entities_inv":..., "purpose_inv":...}, ..]}\n\nStep 7.1: Please continue the process of Step 7 for all the entities from field entities_inv from json #### grouped_entity_invention ####. When we quote attributes from text ####Current invention####, do not change the language and quote as is in the output.\n\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(435,34,44,E'regenerate_claim',E'system',E'I am providing you the following inputs:\n####specific_attributes_claims#### in markdown table format\n####total_attributes_invention#### in markdown table format\nto perform the following steps. \n\nStep 7: Co-relate each id_clm from markdown table ####specific_attributes_claims#### with the id_inv from markdown table  ####total_attributes_invention#### by doing the following:\nRead and understand each specific attribute from the field \'specific_attributes_claim\' and its purpose from field purpose for all the \'id_clm\' one by one from the markdown table ####specific_attributes_claims####. Then co-relate the read and understood specific attribute and its purpose for each id_clm by comparing/mapping it one by one with each specific attribute from field  all_invention_attributes or the purpose of specific attribute from field purpose_inv associated with each id_inv. For the co-relation, remember that the language of purpose from field purpose associated with id_clm and language of purpose from field purpose_inv associated with id_inv maybe different but may share the same/similar meaning. Also, one id_clm can be mapped to multiple id_inv. \nPrint the output of this step in json format with title ==entity_attributes_rewritten==. Print the json ==entity_attributes_rewritten== in this format:\n{"entity_attributes_rewritten": [ {"id_clm": .., "id_inv":[.,.,.]}, ..]}. Do not print the process in the output.\n\nStep 7.1: Please continue the process of Step 7 till all the id_clm are referenced and mapped with id_inv. Do not print output for this step.\n\n\n\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt\n-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(436,35,44,E'regenerate_claim',E'user',E'specific_attributes_claims: ####{{claim_specific_attributes}}####\ntotal_attributes_invention: ####{{specific_attributes}}####',NULL,E'{"project": ["claim_specific_attributes", "specific_attributes"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);