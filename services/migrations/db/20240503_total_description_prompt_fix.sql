
DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id" >= 317 AND "prompt_seq_id" <= 327 OR "prompt_seq_id" IN (351, 352, 360, 361, 368, 369, 370, 389, 390, 391, 404, 405, 409, 410) OR "prompt_seq_id" >= 414 AND "prompt_seq_id" <= 431 OR "prompt_seq_id" >= 435 AND "prompt_seq_id" <= 443 OR "prompt_seq_id" >= 447 AND "prompt_seq_id" <= 449;
INSERT INTO "prompt"."prompt_seq"("prompt_seq_id","seq","prompt_id","short_name","role","instructions","fun_def","inputs","outputs","created_at","modified_at","repeat","is_stream","model","multicalls","max_tokens","prompt_actions","claim_nums","decision_step","step_description","revised_step_description","claim_component_entities","claim_component_actions","skip_append","output_format")
VALUES
(317,1,44,E'regenerate_claim',E'system',E'I am providing you text ####claims### to perform the following steps.\n\nStep 3: Find all the entities and their associated numerical identifiers for all the claims from text ####Claims#### in the output. entity_numerical_identifier is a number that identifies the entity uniquely. For example Device (10,40), Object (15, 45). Do not consider claim number, acronyms, percentages or any other textual attribute as numerical identifier for entity_numerical_identifier.  Print output in the json format with title ==entity_claims== where every entity is in a separate row. Print the json ==entity_claims== in this format:\n{"entity_claims": [ {"claim_number": .., "entity_claim": ..., "entity_numerical_identifier":..}, ..]}\n\nStep 3.1: Please continue the process of Step 3 to identify all the entities and their associated numerical identifiers for each claim from text ####Claims####. entity_numerical_identifier is a number that identifies the entity uniquely. For example Device (10,40), Object (15, 45). Exclude claim number, acronym, percentage or any other textual attribute as numerical identifier. Ensure all claim numbers from text ####Claims#### are referenced in the output. Do not print output for this step. \n\nStep 4: Identify all the entity actions from text ####Claims#### for each/every entity from field entity_claim associated with each/every claim from field claim_number from json ####entity_claims#### . Determine the purpose of all the entity actions that are identified. Group the entities from field entity_claim if the purpose of their entity actions is the same/similar even if the language of their entity actions is different. Grouped entities should be referenced in the field entities_clm in the output. id_clm should be numbered as 1,2,3,...etc.\nPrint the output in json format with title ==claim_entity_actions==.  Print the json ==claim_entity_actions== in this format:\n{"claim_entity_actions": [ { "id_clm:":..., "entity_action_claim":..., "purpose":..., "entities_clm": [.,.,.], "entity_numerical_identifier":..., "claim_number":[.,.,.,]}, ...]}\n\nStep 4.1: Re-run Step 4 till all the entity actions are identified from text ####Claims#### for each/every entity from field entity_claim associated with each/every claim from field claim_number from json ####entity_claims####. Ensure that the purpose of all the entity actions is determined . Ensure to group all entities if the the purpose of their entity actions is the same. The json claim_entity_actions should reference all the claim numbers from text ####Claims####. Ensure the response is generated in one go.\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(318,2,44,E'regenerate_claim',E'user',E'Claims:####{{claims}}####',NULL,E'{"project": ["claims"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(319,3,44,E'regenerate_claim',E'user',E'Step 3, Step 3.1',NULL,NULL,E'{"project": ["claim_entities"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(320,4,44,E'regenerate_claim',E'user',E'Step 4, Step 4.1',NULL,NULL,E'{"project": ["claim_entity_actions"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(321,5,44,E'regenerate_claim',E'system',E'I am providing you text ####claims### and markdown table of entity_claims to perform the steps from  step 5 to 5.1. \n\nStep 5: Identify all the specific numerical attributes, all the specific properties (including physical properties such as state, texture, etc. and particular examples), all the specific quantities/number of the entity/entities, all alternatives and all embodiments/uses/applications from text ####claims#### associated with each/every entity from field entity_claim for all claims from field claim_number from markdown table \'entity_claims\' and quote from text ####Claims#### in the output.When we quote from text ####claims####, do not change the language and quote as is in the output. Once the attributes are extracted from text ####Claims####, determine the purpose of all the specific attributes in context of text ####Claims####. Field id_clm should be numbered as 1,2,3,...etc in the output. Print the output in json format with title ==claim_entity_attributes== where every entity attribute is in a separate row. The entity attribute rows may contain multiple entities in field clm_entities and multiple claims in field claim_numbers in the output if they share the same/similar attribute.  Print the json ==claim_entity_attributes== in this format:\n{"claim_entity_attributes": [ {"id_clm":..., "specific_attributes_claim": .., "clm_entities":[.,.,.], “purpose”:..., "Claim_numbers":[.,.,.] }, ..]}\n\nStep 5.1: Please continue the process of Step 5 for all the entities from field entity_claim for all claims from field claim_number from markdowntable \'entity_claims\'. Ensure the response is generated in one go. When we quote attributes from text ####claims####, do not change the language and quote as is in the output.\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(322,6,44,E'regenerate_claim',E'user',E'Claims:####{{claims}}####\\n entity_claims: {{claim_entities}}',NULL,E'{"project": ["claims", "claim_entities"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(323,7,44,E'regenerate_claim',E'user',E'Step 5, Step 5.1',NULL,NULL,E'{"project": ["claim_specific_attributes"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(324,8,44,E'regenerate_claim',E'system',E'I am providing you text ####Current Invention### to perform the steps from step 5 to 6. \n\nStep 5: Identify all the entities from the text ####Current Invention####. Entities are defined as nouns/phrases/parts/components that perform an action to achieve some result. Ensure all the nouns/phrases/parts/components that perform an action or aid any action are captured in the output. Print the output in json format with title ==entity_invention== where each entity is in a separate row. The json ==entity_invention== will contain the following field: entity_inv. Print the json ==entity_invention== in this format:\n{"entity_invention": [ { "entity_inv": ...}, ..]}\n\nStep 6: Identify all the entity actions from text ####Current Invention#### for each/every entity from field entity_inv from json entity_invention and determine the purpose of the entity action. Group the entities from field entity_inv if the purpose of their entity actions is the same/similar even if the language of their entity actions is different. Grouped entities should be referenced in the field entities_inv in the output. id_inv should be numbered as 1,2,3,...etc. Print output in json format with title ==invention_entity_actions== where every entity action corresponding to an entity is in a separate row.   Ensure all the entities from field entity_inv from json ==entity_invention== are grouped and referenced in the output. Print the json ==invention_entity_actions== in this format:\n{"invention_entity_actions": [ { "id_inv":..., "entity action_invention":..., "purpose_inv":..., "entities_inv": [.,.,.]}, ..]}\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(325,9,44,E'regenerate_claim',E'user',E'Current invention:\n####{{invention}}####',NULL,E'{"project": ["invention"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(326,10,44,E'regenerate_claim',E'user',E'Step 5',NULL,NULL,E'{"project": ["entities"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(327,11,44,E'regenerate_claim',E'user',E'Step 6',NULL,NULL,E'{"project": ["invention_entity_actions"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(351,1,46,E'block_diagram_common',E'system',E'I have provided following inputs to perform steps 5 to 9\n####Claims####\n####Current Invention####\nentity_actions_rewritten in markdown table format\n####claim_types#### in json format\n\nStep 5: An independent claim does not reference any other claim. However, a dependent claim always references another claim on which it depends. Using the above logic do the following: \na) Group only the system claims from field system_claim_numbers from json claim_types. \nb) No two independent claims can be grouped in the same claim group. \nPrint the output in a json format with title==claim_groups==. \nPrint the json ==claim_groups== in this format:\n{"claim_groups": [ { "claims_group_number":..., "system_independent_claim": ..., "system_dependent_claim":....}, ..]}. Ensure no dependent claim is considered as a distinct claim_group. Do not print the process in the output.  \n \nStep 5.1: Rerun the step till each system claim from from field system_claim_numbers from json claim_types (independent and/or dependent) is referenced in json claim_groups. Do not include component/apparatus/product/device/machine type claims under system claim category in the output. Do not print output for this step.\n\n\nStep 6:  For the claims identified from fields system_independent_claim and from field system_dependent_claim from json ####claim_groups####, use the entity actions from field {entity_action_claim} from markdown table ‘entity_actions_rewritten’ to identify which dependent claim depends on which entity action of the independent claim or the entity action in other dependent claims in context of text ####Claims####. Provide the mapping between the dependent claims and the claim entity actions of the independent claim or the entity actions of other dependent claims on which it depends. Output format: Dependent claim --> Independent claim --> reason etc. \nPrint the json ==claim_dependency== in this format:\n{"claim_dependency": [{"claims_group_number":..., "dependent_claim": ..., "independent_claim": ..., "reason": ...}, ...]}\n\nStep 7: Identify and name the system that encompasses the specific entity actions associated with text ####current invention#### from field entity action_invention from markdown table ‘entity_actions_rewritten’ and all the claims from ==system_Claims==. Output format: ==System==\nPrint the json ==System== in this format:\n{"system": ...}\n\n\nStep 8: a) Co-relate the identified claims for each claim group from field independent_claim, from field dependent_claim from json claim_groups with the field claim_number from markdown table \'entity_actions_rewritten\'.\nb) Identify all the entities from field entities_clm and entities_inv from markdown table ‘entity_actions_rewritten’ for the co-related claim numbers for each claim group.\nc) Group all the identified entities for each claim group from field entities_clm and from field entities_inv from markdown table  ‘entity_actions_rewritten’ into components and sub-components using overlaps/commonalities in their entity action from either 1) from field entity_action_claim or from 2) field entity_action_invention from markdown table ‘entity_actions_rewritten’ and using the json claim_dependency. These components and sub-components should be grouped such that when working together they manifest the invention from text ####Claims#### and text ####Current invention####. \nd) The grouped entities should be referred as component/sub-component only in the field component/sub-component type in the output.\ne) Ensure that entities from both field entities_clm and from field entities_inv are quoted/cited in the output in the fields entities_claim and entities_invention. Ensure all the claims (both independent and dependent claims) identified for each claim group in the output of step 5 are referenced in the output. \nf) Number the components and sub-components in a unique numbering series with increment of 2 for each component as follows - if the component is numbered 502, the it\'s sub-component should be numbered 502-a, 502-b etc. The next component will be numbered 504 and it’s sub-component will be numbered 504-a, 504-b etc. Follow a unique number series for each claim group. For example if the component number in claim group 1 is starting with 502, the component number in claim group 2 should start from 602. Print the output in json format with title ==component_entities== where every component/ sub-component is in a separate row. The json ==component_entities== will be in this format:\n{"component_entities": [ {"claims_group_number":...., "component/sub-component type":..., "component number":…, "sub-component number":..., "component/sub-component name ": ...,  "entities_claim":[.,.,.], "entity_numerical_identifier":..., "entities_inv":[.,.,.], "claim numbers":...}, ..]}. Do not repeat the process in the output.\n\nStep 8.1: Rerun step 8 till all the entities from both field entity_claim and from field entities_inv are referenced in the output and all the claims from field independent claims and from field dependent_claims for each claim group from json ==claim_groups== are referred in the output.\n\nStep 8.2: Ensure that the component and sub-component numbers from field component number and from field sub-component number are different. Ensure that component and sub-component follow those instructions given in step 8f.\n\nStep 9: Number the system, component and sub-component from field  Component/Sub-component by keeping the numbers of the component and sub-component as they are from field component number, from field sub-component number for each claim group from json ==component_entities==. if the component number for the first claim group starts with 502 the system should be 500. If the component number for the second claim group starts with 602 then its system number should be 600. The value in the field Component type - system/component/sub-component will only be either "system" or "component" or "sub-component" and any other value is not permitted in this field. Print the output json format with title ==component_sub-component==. The json ==component_sub-component== will be in this format:\n{"component_sub-component": [{"claims_group_number":...., "Component type - system/component/sub-component": "system/component/sub-component", "system/component number": ..., “sub-component number”:…,  "system/component/sub-component name":..., "explanation":..., "entities_claim":[.,.,.], "entity_numerical_identifier":..., "entities_invention":[.,.,.], "claim numbers":...}, ..]}. Do not print process in the output.\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(352,2,46,E'block_diagram_common',E'user',E'Claims: ####{{claims}}####\nCurrent Invention: ####{{invention}}####\nentity_actions_rewritten: {{entity_actions_rewritten}}claim_types: ####{{claim_stats}}####',NULL,E'{"project": ["claims", "invention", "entity_actions_rewritten", "claim_stats"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(360,1,45,E'flowchart_common',E'system',E'I am providing you the following inputs to perform steps 5 to 10. \n####Claims####\n####Current Invention####\nentity_actions_rewritten in markdown table format\n####claim_type#### in json format\n\nStep 5: An independent claim does not reference any other claim. However, a dependent claim always references another claim on which it depends. Using the above logic do the following: \na) Group only the method claims from field method_claim_numbers from json ####claim_type####. \nb) No two method independent claims can be grouped in the same claim group. \nPrint the output in a json format. \nPrint the json ==claim_groups== in this format:\n{"claim_groups": [ { "claims_group_number":..., "Method_independent_claim": ...,  "Method_dependent_claim":....}, ..]}. Ensure no dependent claim is considered as a distinct claim_group. Do not print the process in the output.\n\nStep 5.1: Rerun the step till each method claims from field method_claim_numbers \n(independent and/or dependent) is referenced in json claim_groups. Do not include system/computer program product /component/apparatus/product/device/machine type claims under method claim category in the output. Do not print output for this step.\n \nStep 6:  For the claims identified from the output of step 5, use the entity actions from field entity_action_claim from markdown table ‘entity_actions_rewritten’ to identify which dependent claim depends on which entity action of the independent claim or the entity action in other dependent claims in context of text ####Claims####. Provide the mapping between the dependent claims and the entity actions of the independent claim or the entity actions of other dependent claims on which it depends. Output format: Dependent claim --> Independent claim --> reason etc. \nPrint the json ==claim_dependency== in this format:\n{"claim_dependency": [{"claims_group_number":..., "dependent_claim": ..., "independent_claim": ..., "reason": ...}, ...]}\n\nStep 7: a) Identify all the main steps/entity actions for all the claims for each claim group from field claims_group_number using the json claim_dependency  that occur in a logical sequence to accomplish the method in context of all the claims from Step 5 and the ####current invention####. b)  Identify all the sub-steps/parallel steps/entity actions, if available, that are additional details/limitations for the method of main steps in context of ####claims####  and json ==claim_dependency==. Remember a sub-step is an additional limitation/detail of the main step and not a repetition of it. c) Ensure all the claims for each claim group from json ==claim_dependency== are referred in Step 7 output. (d) Follow a unique numbering series for each claim group while numbering the main step and sub-step. The number in the field Step number and the number in the field Sub-Step number cannot be the same. For example, if steps in claim group 1 is starting with 100, steps in claim group 2 should start from 200. Use an even numbering series with increment of 2 for each step as follows – if for claim group 1 the 1st step is Step 100, the subsequent steps will be numbered 102, 104 etc. Similarly, for the 2nd claim group, if the 1st step is 200, the subsequent steps will be numbered 202, 204 etc. \ne) For sub-steps, number as follows - if step number is 100, it\'s sub-step number must be 100-a, 100-b, for step 102 the sub-step must be 102-a, 102-b etc. f) The value in the field Step/Sub-Step type will only be either "step" or "sub-step" and any other value is not permitted in this field. Print the output in a json format with title: ==Steps_sub-steps== where every step/ sub-step is in a separate row. \nPrint the json ==Steps_sub-steps== in this format:\n{"Steps_sub-steps": [ { "claims_group_number":..., "Step/Sub-Step type":"step/sub-step", "Step number":..., "Sub-Step number": ..., "explanation quote from text ####claims####":..., "claim number":..., "entities_claim":[.,.,.], "entity_numerical_identifier":..., "entities_invention":[.,.,.]}, ..]}. Do not print process in the output.\n\nStep 7.1: Rerun step 7 till each claim from field independent_claim and from field dependent_claim for each claim group from json ==claim_dependency == are referenced in the output.\n\nStep 7.2: Ensure that the step and sub-step numbers from field Step number and from field Sub-step number are different. Ensure that the step and sub-step number follow the instruction given in the step 7d and 7e. \n\nStep 8: Rewrite the json ==Steps_sub-steps== by doing the following:\na) keep the step and sub-step numbers from field Step number, from field Sub-Step number as they are\nb) Re-write the explanation from "explanation quote from text ####Claims####" in a concise form without changing the technical language/vocabulary or alter any of the numerical attributes, specific properties (including physical properties such as state, texture, etc. and particular examples), specific quantities details/parameters/definitions in context of text ####Claims####.\nPrint the output in a json ==Steps_sub-steps Rewrite== in this format:\n{"Steps_sub-steps Rewrite": [ {"claims_group_number":..., "Step/Sub-Step type":"step/sub-step", "Step number":..., "Sub-Step number": ..., "explanation": ..., "claim number":...}, ..]}. Do not print instructions in the output.\n\nStep 9: A decision step is defined as a point within a step or sub-step where an explicit choice is made between two or more alternative paths. This choice is based on the evaluation of specific conditions or criteria and directly influences the subsequent steps or sub-steps and hence the flow of the method. To identify a decision step from the json ==Steps_sub-steps==, look for descriptions in field explanation quote from text ####claims#### to identify whether a explicit choice is being made between two or more alternative paths. Implicit choice from the explanations should not be considered as a decision step. Using this definition of a decision step, identify all the decision making steps using field explanation quote from text ####claims####  for each step/sub-step from field  Step number and from field Sub-Step number from json ==Steps_sub-steps==. Identify the decision making steps for each claim group from field claims_group_number.  Print the output of this step in json format with title ==decision_steps==. Print the json ==decision_steps== in this format:\n{"decision_steps": [ {"claims_group_number":..., "Decision step":..., "Step/Sub-Step type":"step/sub-step"}, …]}. Do not print process in the output.\n\nStep 10: Identity and list all the entities from field \'entities_inv\' from markdown table ‘entity_actions_rewritten’ that are not directly mentioned in the claims but are related to the broader context of the invention or the application of the claimed method. Quote them from field \'entities_inv\' as is from markdown table ‘entity_actions_rewritten’. Print output in json format with title ==additional_entities_to_describe==. The json ==additional_entities_to_describe==will have the field entities_inv_addl. Print the json ==additional_entities_to_describe== in this format:\n{"additional_entities_to_describe": [ { "entities_inv_addl":...}, ..]}. Do not print process in the output.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(361,2,45,E'flowchart_common',E'user',E'Claims: ####{{claims}}####\nCurrent Invention: ####{{invention}}####\nentity_actions_rewritten: {{entity_actions_rewritten}}claim_type: ####{{claim_stats}}####',NULL,E'{"project": ["claims", "invention", "entity_actions_rewritten", "claim_stats"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(368,1,49,E'flowchart_description',E'system',E'Inputs:\n1. ####Claims####\n2. ####Current invention####\n3. Steps_sub-steps in markdown table format\n4. entity_actions_rewritten in markdown table format\n5. entity_attributes_rewritten in markdown table format\n \nInstructions:\n1. For the step number {{step_num}} from the "Step number" field in the markdown table ‘Steps_sub-steps’ identify all the associated entities from field "entities_claim" and field "entities_invention" in the markdown table ‘Steps_sub-steps’ .  Do not print output for this step. \n \n2. Correlate the identified entities for the step {{step_num}} in Step 1 one by one with the entities from the "entities_clm" and "entities_inv" fields in the ‘entity_actions_rewritten’ table. Quote all the entity actions verbatim from the "entity_action_claim" and "entity_action_invention" fields for each correlated entity in the output. Do not print output for this step. \n \n3. Correlate the identified entities for the step {{step_num}} in Step 1 one by one with the entities from the "clm_entities" and "inv_entities" fields in the "entity_attributes_rewritten" table. Do not print output for this step. Quote all numerical attributes, numerical ranges, properties (such as taste, texture, etc.), embodiments, examples, specified quantities, specified ranges, and technical details/parameters/definitions verbatim from the "specific_attributes_claim," "all_invention_attributes," and "additional_attributes_invention" fields for all correlated entities. Do not print output for this step. \n \n4. Use your knowledge base to include any implicit entities, components, actions, or details not explicitly mentioned in the "entity_action_claim" or "entity_action_invention" fields but are essential for a complete understanding of all the entity actions and how they logically flow into one another for the working of the system in context of text ####Claims#### and text ####Current Invention#### in the output. Do not print output for this step. \n \n5. Write the explanations using all the outputs from Step 1 to Step 4 in a paragraph format in a logical flow. Ensure the explanation is highly elaborate, maintains the technical language, and includes all details from the tables \'entity_actions_rewritten\' and \'entity_attributes_rewritten\' verbatim. Specifically, for each identified entity, quote all numerical attributes, numerical ranges, properties (such as taste, texture, etc.), embodiments, examples, specified quantities, specified ranges, and technical details/parameters/definitions verbatim, from the \'specific_attributes_claim,\' \'all_invention_attributes,\' and \'additional_attributes_invention\' fields. Reference chosen step number from field "Step number" from the markdown table \'steps_sub-steps\' in the beginning of the explanation. Reference step and sub-step number with the word step or sub-step before the step/sub-step number. Reference all the sub-steps (if any) for the step {{step_num}} from field "Sub-Step number" from the markdown table \'steps_sub-steps\' in the explanation. Do not use quotation marks in the output. Do not reference the input tables and their fields in the output.\n \nOutput: ==Explanation Step {{step_num}}==\n',NULL,E'{"project": ["flowchart_main_element_nums"]}',NULL,NULL,NULL,E'Start',NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(369,2,49,E'flowchart_description',E'user',E'Claims: ####{{claims}}####   \\n Current invention: ####{{invention}}####\\n Steps_sub-steps: {{element_explanations_desc}}\\n   entity_actions_rewritten: {{entity_actions_rewritten}}\\n  entity_attributes_rewritten: {{total_entity_attributes_rewritten}}',NULL,E'{"project": ["claims", "invention", "element_explanations_desc", "entity_actions_rewritten", "total_entity_attributes_rewritten"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(370,3,49,E'flowchart_description',E'user',E'Step 1, Step 2, Step 3, Step 4, Step 5',NULL,NULL,E'{"project": ["flowchart_description"]}',NULL,NULL,E'End',NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(389,1,48,E'block_diagram_description',E'system',E'Inputs:\n1. ####Claims####\n2. ####Current invention####\n3. components_entities in markdown table format\n4. entity_actions_rewritten in markdown table format\n5. entity_attributes_rewritten in markdown table format\n\nInstructions:\n1. For the system/component number {{component_num}} from the "system/component number" field in the markdown table "components_entities" identify all the associated entities from field "entities_claim" and field "entities_invention" in the markdown table "components_entities" .  Do not print output for this step. \n\n2. Correlate the identified entities for the system/component in Step 1 one by one with the entities from the "entities_clm" and "entities_inv" fields in the "entity_actions_rewritten" table. Quote all the entity actions verbatim from the "entity_action_claim" and "entity_action_invention" fields for each correlated entity in the output. Do not print output for this step. \n\n3. Correlate the identified entities for the system/component in Step 1 one by one with the entities from the "clm_entities" and "inv_entities" fields in the "entity_attributes_rewritten" table. Do not print output for this step. Quote all numerical attributes, numerical ranges, properties (such as taste, texture, etc.), embodiments, examples, specified quantities, specified ranges, and technical details/parameters/definitions verbatim from the "specific_attributes_claim," "all_invention_attributes," and "additional_attributes_invention" fields for all correlated entities. Do not print output for this step. \n\n4. Use your knowledge base to include any implicit entities, components, actions, or details not explicitly mentioned in the "entity_action_claim" or "entity_action_invention" fields but are essential for a complete understanding of all the entity actions and how they logically flow into one another for the working of the system in context of text ####Claims#### and text ####Current Invention#### in the output. Do not print output for this step. \n\n5. Write the explanations using all the outputs from Step 1 to Step 4 in a paragraph format in a logical flow. Ensure the explanation is highly elaborate, maintains the technical language, and includes all details from the tables \'entity_actions_rewritten\' and \'entity_attributes_rewritten\' verbatim. Specifically, for each identified entity, quote all numerical attributes, numerical ranges, properties (such as taste, texture, etc.), embodiments, examples, specified quantities, specified ranges, and technical details/parameters/definitions verbatim from the \'specific_attributes_claim,\' \'all_invention_attributes,\' and \'additional_attributes_invention\' fields. The explanation must reference the system/component number from the \'system/component number\' field and all sub-component numbers from the \'sub-component number\' field. Do not use quotation marks in the output. \n\nOutput: ==explanation_component {{component_num}}==\n',NULL,E'{"project": ["flowchart_main_element_nums"]}',NULL,NULL,NULL,E'Start',NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(390,2,48,E'block_diagram_description',E'user',E'Claims: ####{{claims}}####\\n Current invention: ####{{invention}}####\\n components_entities: {{element_explanations}}\\n entity_actions_rewritten: {{entity_actions_rewritten}}\\n entity_attributes_rewritten: {{total_entity_attributes_rewritten}}',NULL,E'{"project": ["claims", "invention", "element_explanations", "entity_actions_rewritten", "total_entity_attributes_rewritten"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(391,3,48,E'block_diagram_description',E'user',E'Step 1, Step 2, Step 3, Step 4, Step 5',NULL,NULL,E'{"project": ["block_diagram_description"]}',NULL,NULL,E'End',TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(404,1,52,E'extra_diagram_common',E'system',E'I have provided following inputs to perform steps 5 to 7\n####Claims####\n####Current Invention####\nentity_actions_rewritten in markdown table format\n####claim_type#### in json format\n\nStep 5:  Identify only other claims from field other_claim_numbers from json claim_types. Print the output in json format with title ==other_claims==. The json ==other_claims== will be in this format \n{"other_claims":{"claim_numbers": [ ...]}}. Do not print the process in the output. \n\nStep 5.1: Rerun the step till all the other claims from field other_claim_numbers from json claim_types  (both independent and dependent) are referenced in json other_claims. Do not print output for this step.\n\nStep 6: a) Co-relate only the Other claims from field other_claim_numbers from json claim_types with the field claim_number from markdown table \'entity_actions_rewritten\'. \nb) After co-relation, only for the co-related claim numbers from field claim_number from markdown table \'entity_actions_rewritten\' identify all the entities from field entities_clm and entities_inv from markdown table \'entity_actions_rewritten\', \nC) Then group all the identified entities from field entities_clm and from field entities_inv from markdown table  \'entity_actions_rewritten\' into logical groups. The logical groups must be made on the basis of similarity/commonality in entity actions from either a) field entity_action_claim or from b) field entity_action_invention. These logical groups should be grouped such that when working together they manifest the invention from text ####Claims#### and text ####Current invention####. Ensure the logical groups are such that the entities from entities_claim and entities_inv are represented/written/referenced only in one row/sr. no. Ensure that entities from both field entity_claim and from field entities_inv are quoted/cited in the column grouped entities in the output. \nPrint the output of this step in json format. The output json should be printed with title ==grouped entities==  in this format: {"grouped entities": [ { "Sr.no":...., "grouped entities":[.,.,.,], "entity actions": ...,  "entity actions purpose":..., "Claim number":....}, ..]}. Do not print the step in the output.\n\n\nStep 7: Re-Group all the entities from field  Grouped Entities from json ==grouped entities== into logical groups such that all redundancies/overlaps in field grouped entities is avoided. The logical groups from json ==grouped entities== must be regrouped either on the basis of (a) similarity/commonality in entity actions from  field Entity Actions  even if the language of entity actions is different OR (b) Similarity/commonality in purpose of entity actions from field entity actions purpose even if the language is different. These logical groups should be re-grouped such that when working together they manifest the invention from text ####Claims#### and text ####Current invention####. Ensure the logical groups are such that all the entities from field Grouped Entities are represented/written/referenced only in one row/sr. no . Ensure that entities from Grouped Entities are quoted/cited in the field Re-grouped Entities in the output. Print the output in a Json format with title of the json ==component_entities==. The json ==component_entities== must be in \nthis format: {"component_entities": [{ "component number": ..., "re-grouped entities":[..., ..., ...], "entity actions": ...,  "entity actions purpose": ...}]}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(405,2,52,E'extra_diagram_common',E'user',E'Claims:####{{claims}}#### \\n Current invention: ####{{invention}}####\\n entity_actions_rewritten: {{entity_actions_rewritten}}\\n claim_types: ####{{claim_stats}}####',NULL,E'{"project": ["claims", "invention", "entity_actions_rewritten", "claim_stats"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(409,1,53,E'extra_description',E'system',E'I am giving you the following inputs to write a detailed explanation of all the entities from field re-grouped entities associated with component number {{component_num}} from markdown table components_entities using the inputs and instructions below in the context of writing a patent specification. \n\nInputs:\n1. ####Claims####\n2. ####Current invention####\n3. components_entities in markdown table format\n4. entity_actions_rewritten in markdown table format\n5. entity_attributes_rewritten in markdown table format\n\nInstructions:\nStep 1: Create a detailed explanation of the entities associated with component number {{component_num}} from the markdown table components_entities by correlating the entities from the field Re-grouped Entities with the entities from the fields entities_clm and entities_inv from the markdown table entity_actions_rewritten. After establishing the correlation, quote all the entity actions verbatim from the fields entity_action_claim and entity_action_invention. Additionally, correlate the entities from the field Re-grouped Entities with the entities from the fields clm_entities and inv_entities from the markdown table entity_attributes_rewritten. After making the correlation, quote all the numerical attributes, numerical ranges, properties such as taste, texture, embodiments, examples, specified quantities, specified ranges, and technical details/parameters/definitions verbatim from the fields specific_attributes_claim, all_invention_attributes, and additional_attributes_invention. Use your knowledge base to include any implicit entities, components, actions, or details not explicitly mentioned in the entity_action_claim or entity_action_invention fields but are crucial for a complete understanding of all the entity actions and how they flow logically into one another for the working of the system. Ensure that the explanation is highly elaborate and does not truncate any details for the entity actions or the entity attributes, and that there is no change in the technical language in the output. Do not refer to words like "entity", "entities", "entity action", "crucial", "critical" etc. Avoid use of adjectives and quotation marks in the explanation. All the entities from field Re-grouped Entities are cited with  their numbers if available from field entity_numerical_identifier from markdown table \'components_entities\' in the explanation \nOutput format: ==entities explanation {{component_num}}==\n\nStep 2: Rerun Step 1 till (i) all the entity actions are quoted verbatim from the fields entity_action_claim and entity_action_invention in the output, (ii) all the numerical attributes, numerical ranges, properties such as taste, texture, embodiments, examples, specified quantities, specified ranges, and technical details/parameters/definitions verbatim from the fields specific_attributes_claim, all_invention_attributes, and additional_attributes_invention are quoted verbatim in the output and (iii) all the entities from field Re-grouped Entities are cited with  their numbers from field entity_numerical_identifier from markdown table \'components_entities\' in the explanation.\n',NULL,E'{"project": ["flowchart_main_element_nums"]}',NULL,NULL,NULL,E'Start',NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(410,2,53,E'extra_description',E'user',E'Claims:####{{claims}}#### \\n Current invention: ####{{invention}}####\\n components_entities: {{element_explanations}}\\n entity_actions_rewritten: {{entity_actions_rewritten}}\\n entity_attributes_rewritten:{{total_entity_attributes_rewritten}}',NULL,E'{"project": ["claims", "invention", "element_explanations", "entity_actions_rewritten", "total_entity_attributes_rewritten"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(414,13,44,E'regenerate_claim',E'system',E'I am providing you the following inputs:\n####Claims####\n####Current Invention####\nclaim_entity_actions  in markdown table format\ninvention_entity_actions in markdown table format \n\nStep 7:Co-relate each id_clm from markdown table \'claim_entity_actions\' with the with the id_inv from markdown table  \'invention_entity_actions\' by doing the following: \nRead and understand each/every entity action from field entity_action_claim and its associated purpose from field purpose for all the id_clm one by one from markdown table \'claim_entity_actions\'. Then co-relate the read and understood entity action and its purpose for each id_clm by comparing/mapping it one by one with each entity action from field entity_action_invention or the purpose of that entity action from field purpose_inv associated with each id_inv from markdown table \'invention_entity_actions\'. For the co-relation, remember that the language of purpose from field purpose associated with id_clm and language of purpose from field purpose_inv associated with id_inv maybe different but may share the same/similar meaning. Also, one id_clm can be mapped to multiple id_inv. \n.This is basically reverse mapping claim language of the entity actions in claims from text ####Claims#### with the entity actions as given in the text ####Current Invention####. Print the output of this step in json format with title ==entity_actions_rewritten== where every id_clm  from field id_clm is in a separate row. Print the json ==entity_actions_rewritten== in this format:\n{"entity_actions_rewritten": [ {"id_clm":..., "id_inv":[.,.,.]}, ..]}\n\nStep 7.1: Please continue the process of Step 7 till all the id_clm are referenced and mapped with id_inv. \n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(415,14,44,E'regenerate_claim',E'user',E'Claims:####{{claims}}####\\n Current Invention:####{{invention}}####\\n claim_entity_actions:{{claim_entity_actions}}\\n invention_entity_actions:{{entity_action}}',NULL,E'{"project": ["claims", "invention", "claim_entity_actions", "entity_action"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(416,15,44,E'regenerate_claim',E'user',E'Step 7, Step 7.1',NULL,NULL,E'{"project": ["entity_actions_rewritten"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(417,16,44,E'regenerate_claim',E'system',E'I am providing you the following inputs to compare:\ninvention_entity_actions in markdown table format \nentity_actions_rewritten in markdown table format \n\nStep 8: Identify the ids from field id_inv from markdown table \'invention_entity_actions\' that are not correlated with any of the ids from field id_clm from markdown table \'entity_actions_rewritten\'. Print output in json format with title ==missing_entity_actions==.  Print the json ==missing_entity_actions== in this format:\n{"missing_entity_actions": [ { "id_inv": ..., "purpose_inv":...}, ..]}. Do not print the instructions in the output.\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(418,17,44,E'regenerate_claim',E'user',E'invention_entity_actions:{{entity_action}}\\n entity_actions_rewritten: {{entity_actions_rewritten}}',NULL,E'{"project": ["entity_action", "entity_actions_rewritten"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(419,18,44,E'regenerate_claim',E'user',E'Step 8',NULL,NULL,E'{"project": ["missing_entity_actions"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(420,19,44,E'regenerate_claim',E'system',E'I am providing you the following inputs to co-relate:\nclaim_entity_actions in markdown table format \nmissing_entity_actions in markdown table format \n\nStep 9: Co-relate the id_inv from markdown table ‘missing_entity_actions’ with the most close id_clm from markdown table ‘claim_entity_actions’ by doing the following: Co-relate the purpose of each id_inv from field purpose_inv one by one by comparing/mapping with the purpose of each id_clm from field purpose. Print the output in json format with title ==missing_entity_action_rewritten==. Print the json ==missing_entity_action_rewritten== in this format:\n{"missing_entity_action_rewritten": [ {"id_clm":....,"id_inv": ...}, ..]}. Do not print the process in the output.\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(421,20,44,E'regenerate_claim',E'user',E'claim_entity_actions: {{claim_entity_actions}}\\n missing_entity_actions: {{missing_entity_actions}}',NULL,E'{"project": ["claim_entity_actions", "missing_entity_actions"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(422,21,44,E'regenerate_claim',E'user',E'Step 9',NULL,NULL,E'{"project": ["missing_entity_action_rewritten"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(423,22,44,E'regenerate_claim',E'system',E'I am providing you text ####Current Invention#### and grouped_entity_invention in markdown table format. \n\nStep 7: Identify all the specific numerical attributes, specific properties (including physical properties such as state, texture, etc. and particular examples), specific quantities, every/each alternative and every/each embodiment, every/each use and every applications from text ####Current invention#### associated with each/every entity from field entities_inv from markdown table ‘grouped_entity_invention’. Quote the entire paragraph from text ####Current invention#### that describes the entity actions/attributes/properties/uses in the output. Remember, there may be multiple paragraphs that describe the entity actions/attributes/properties or uses. Some paragraphs may have the explicit reference to the entity and others may have implicit references to the entity. Once the attributes are extracted from text ####Current Invention####, determine the purpose of all the identified attributes in context of the text ####Current Invention####. While quoting from text ####Current invention####, do not change the language and quote as is. The entities corresponding to the identified attributes should be referenced in the field inv_entities in the output. Field id_inv should be numbered as 1,2,3,...etc in the output.  Print output in json format with title ==specific_attributes_invention==where each attribute is in a separate row.  Print the json ==specific_attributes_invention== in this format:\n{"specific_attributes_invention": [{ "id_inv":..., "specific_attributes_inv": ..., "inv_entities":[.,.,.],  "purpose_inv":...}, ..]}\n\nStep 7.1: Please continue the process of Step 7 for all the entities from field entities_inv from markdown table ‘grouped_entity_invention’. When we quote attributes from text ####Current invention####, do not change the language and quote as is in the output.\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(424,23,44,E'regenerate_claim',E'user',E'Current Invention: ####{{invention}}####\ngrouped_entity_invention: {{grouped_entity_invention}}',NULL,E'{"project": ["invention", "grouped_entity_invention"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(425,24,44,E'regenerate_claim',E'user',E'Step 7, Step 7.1',NULL,NULL,E'{"project": ["specific_attributes_invention"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(426,25,44,E'regenerate_claim',E'system',E'I am providing you the following inputs: \n####Current Invention####  as text\nspecific_attributes_invention as markdown table. \n\nStep 8: Identify the details from text ####Current Invention#### that are missing from field specific_attributes_inv in markdown table ‘specific_attributes_invention\' and include the details in the output.\nPrint the output of this step in json format with title ==additional_attributes_invention== where each attribute is in a separate row. Print the json ==additional_attributes_invention== in this format:\n{"additional_attributes_invention": [ {"additional_attributes_inv": ...}, ..]}. Do not print the process instructions in the output.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(427,26,44,E'regenerate_claim',E'user',E'Current Invention: ####{{invention}}####\nspecific_attributes_invention: {{specific_attributes_invention}}',NULL,E'{"project": ["invention", "specific_attributes_invention"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(428,27,44,E'regenerate_claim',E'user',E'Step 8',NULL,NULL,E'{"project": ["additional_attributes_invention"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(429,28,44,E'regenerate_claim',E'system',E'I am providing you the following inputs: \nadditional_attributes_invention as markdown table\ngrouped_entity_invention as a markdown table. \n\nStep 9: Co-relate each/every additional entity attributes in field additional_attributes_inv from markdown table ‘additional_attributes_invention’ with the most appropriate entity from field entities_inv from markdown table ‘grouped_entity_invention’ based on the implied use/benefit of the attribute. Print the output of this step in json format with title ==additional_entity_attributes_invention==. Print the json ==additional_entity_attributes_invention== in this format:\n{"additional_entity_attributes_invention": [ {"id_inv": ..., "additional_attributes_inv":...}, ..]}. Do not print the process instructions in the output.\n\nStep 9.1: Re-run step 9 till each/every additional entity attribute from field  additional_attributes_inv from markdown table ‘additional_attributes_invention\' is correlated with the most appropriate entity from field entities_inv from markdown table ‘grouped_entity_invention’ based on the implied use/benefit of the attribute. Do not print the process instructions in the output.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(430,29,44,E'regenerate_claim',E'user',E'additional_attributes_invention: {{additional_attributes_invention}}\ngrouped_entity_invention: {{grouped_entity_invention}}',NULL,E'{"project": ["additional_attributes_invention", "grouped_entity_invention"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(431,30,44,E'regenerate_claim',E'user',E'Step 9, Step 9.1',NULL,NULL,E'{"project": ["additional_entity_attributes_invention"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(435,34,44,E'regenerate_claim',E'system',E'I am providing you the following inputs:\nspecific_attributes_claims in markdown table format\ntotal_attributes_invention in markdown table format\nto perform the following steps. \n\nStep 7: Co-relate each id_clm from markdown table ‘specific_attributes_claims’ with the id_inv from markdown table  ‘total_attributes_invention’ by doing the following:Read and understand each specific attribute from the field specific_attributes_claim and its purpose from field purpose for all the \'id_clm\' one by one from the markdown table ‘specific_attributes_claims’. Then co-relate the read and understood specific attribute and its purpose for each id_clm by comparing/mapping it one by one with each specific attribute from field  all_invention_attributes or the purpose of specific attribute from field purpose_inv associated with each id_inv. For the co-relation, remember that the language of purpose from field purpose associated with id_clm and language of purpose from field purpose_inv associated with id_inv maybe different but may share the same/similar meaning. Also, one id_clm can be mapped to multiple id_inv. \nPrint the output of this step in json format with title ==entity_attributes_rewritten==. Print the json ==entity_attributes_rewritten== in this format:\n{"entity_attributes_rewritten": [ {"id_clm": .., "id_inv":[.,.,.]}, ..]}. Do not print the process in the output.\n\nStep 7.1: Please continue the process of Step 7 till all the id_clm are referenced and mapped with id_inv. Do not print output for this step.\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(436,35,44,E'regenerate_claim',E'user',E'specific_attributes_claims: {{claim_specific_attributes}}\ntotal_attributes_invention: {{specific_attributes}}',NULL,E'{"project": ["claim_specific_attributes", "specific_attributes"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(437,36,44,E'regenerate_claim',E'user',E'Step 7, Step 7.1',NULL,NULL,E'{"project": ["entity_attributes_rewritten"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(438,37,44,E'regenerate_claim',E'system',E'I am providing you the following inputs:\nentity_attributes_rewritten in markdown table format\ntotal_attributes_invention in markdown table format\nto perform the following steps.\n\nStep 8: Identify the ids from field id_inv from markdown table ‘total_attributes_invention’ that are not correlated\nwith any of the ids from field id_clm in markdown table ‘entity_attributes_rewritte’.\nPrint the output of this step in JSON format as follow:\n{"additional_entity_attributes_rewritten": [ { "id_inv": …, "additional_attributes_invention":..., "purpose_inv":..}, ..]}. Do not\nprint process in the output.\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(439,38,44,E'regenerate_claim',E'user',E'entity_attributes_rewritten: {{entity_attributes_rewritten}}\ntotal_attributes_invention: {{total_attributes_invention}}',NULL,E'{"project": ["entity_attributes_rewritten", "total_attributes_invention"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(440,39,44,E'regenerate_claim',E'user',E'Step 8',NULL,NULL,E'{"project": ["additional_entity_attributes_rewritten"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(441,40,44,E'regenerate_claim',E'system',E'I am providing you the following inputs:\nspecific_attributes_claims in markdown table format\nadditional_entity_attributes_rewritten in markdown table format\nto perform the following steps. \n \nStep 9: Co-relate id_inv from markdown table ‘additional_entity_attributes_rewritten’ with the most appropriate id_clm from markdown table ‘specific_attributes_claims’ by doing the following: Co-relate the purpose of each id_inv from field purpose_inv one by one by comparing/mapping with the purpose of each id_clm from field purpose.\nPrint the output of this step in json format with title ==missing_entity_attributes_rewritten==. Print the json ==missing_entity_attributes_rewritten== in this format:\n{"missing_entity_attributes_rewritten":\n  [ { "id_clm:":..., "id_inv": ...}, ...]}. Do not print\n  process in the output.\n \nStep 9.1: Re-run step 9 till all the id_inv are referenced and mapped with id_clm.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(442,41,44,E'regenerate_claim',E'user',E'specific_attributes_claims: {{claim_specific_attributes}}\nadditional_entity_attributes_rewritten: {{additional_entity_attributes_rewritten}}',NULL,E'{"project": ["claim_specific_attributes", "additional_entity_attributes_rewritten"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(443,42,44,E'regenerate_claim',E'user',E'Step 9, Step 9.1',NULL,NULL,E'{"project": ["missing_entity_attributes_rewritten"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(447,46,44,E'regenerate_claim',E'system',E'I am giving you text ####Claims#### to determine type of claims.\n\nStep 1:  Identify all the respective method/system/other claims from the text ####Claims####. All the system claims will be classified as system claims, all the method claims are classified under method claims and all the device/apparatus/product/computer program product/composition/formulation/machine claims go into others. The output of the claim type should be flagged either as true or as False\nPrint the output in json format with title ==claim_types==. The json ==claim_types== will contain the following field  claim_type (system - True/False, system_claim_numbers, method - True/False, method_claim_numbers, other - True/False), other_claim_numbers. Print the json ==claim_types== in this format:\n{"claim_types": {"method": ..., "method_claim_numbers":[.,.,.], "system": ..., "system_claim_numbers":[.,.,.], "other": ..., "other_claim_numbers":[.,.,.]}}. Do not print the process in the output',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(448,47,44,E'regenerate_claim',E'user',E'Claims: {{claims}}',NULL,E'{"project": ["claims"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(449,48,44,E'regenerate_claim',E'user',E'Step 1',NULL,NULL,E'{"project": ["claim_types"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json');

