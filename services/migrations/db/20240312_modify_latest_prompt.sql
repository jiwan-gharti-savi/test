ALTER TABLE "project"."section_history" ADD COLUMN "grouped_entity_invention" text;

ALTER TABLE "project"."section_history" ADD COLUMN "additional_entity_attributes_invention" text;

ALTER TABLE "project"."section_history" ADD COLUMN "total_attributes_invention" text;

ALTER TABLE "project"."section_history" ADD COLUMN "entity_attributes_rewritten" text;

ALTER TABLE "project"."section_history" ADD COLUMN "missing_entity_attributes_rewritten" text;

ALTER TABLE "project"."figures_section_history" ADD COLUMN "additional_entities_to_describe" text;

ALTER TABLE "project"."figures_section_history" ADD COLUMN "introduction_method" text;

ALTER TABLE "project"."figures_section_history" DROP COLUMN "step_description";

ALTER TABLE "project"."section_history" ADD COLUMN "total_entity_attributes_rewritten" text;

DELETE FROM "prompt"."prompt" WHERE "prompt_id"=51 OR "prompt_id"=52 OR "prompt_id"=53;

ALTER TABLE "project"."figures_section_history" ADD COLUMN "main_mermaid" jsonb;

ALTER TABLE "project"."figures_section_history" ADD COLUMN "main_breif_description" jsonb;

INSERT INTO "prompt"."prompt"
  ("prompt_id","name","version","is_selected","parent_prompt_id","created_at","modified_at","model")
VALUES
  (51, E'block_diagram',E'V3',TRUE,NULL,NULL,NULL,NULL),
(52,E'extra_diagram_common',E'V1',TRUE,NULL,NULL,NULL,NULL),
(53,E'extra_description',E'V1',TRUE,NULL,NULL,NULL,NULL);

ALTER TABLE "project"."figures_section_history" RENAME COLUMN "decision_step" TO "decision_steps";

-- ALTER TABLE "prompt"."prompt_seq"
-- ADD COLUMN "claim_nums" text;

-- ALTER TABLE "prompt"."prompt_seq"
-- ADD COLUMN "decision_step" text;

-- ALTER TABLE "prompt"."prompt_seq"
-- ADD COLUMN "step_description" text;

-- ALTER TABLE "prompt"."prompt_seq"
-- ADD COLUMN "revised_step_description" text;

-- ALTER TABLE "prompt"."prompt_seq"
-- ADD COLUMN "claim_component_entities" text;

-- ALTER TABLE "prompt"."prompt_seq"
-- ADD COLUMN "claim_component_actions" text;

-- ALTER TABLE "prompt"."prompt_seq"
-- ADD COLUMN "skip_append" boolean;

ALTER TABLE "prompt"."prompt_seq"
ADD COLUMN "output_format" varchar(128);


DELETE FROM "prompt"."prompt_seq" WHERE 
prompt_seq_id in (317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451);


INSERT INTO "prompt"."prompt_seq" ("prompt_seq_id", "seq", "prompt_id", "short_name", "role", "instructions", "fun_def", "inputs", "outputs", "created_at", "modified_at", "repeat", "is_stream", "model", "multicalls", "max_tokens", "skip_append", "prompt_actions", "claim_nums", "decision_step", "step_description", "revised_step_description", "claim_component_entities", "claim_component_actions", "output_format") VALUES
(317, 1, 44, 'regenerate_claim', 'system', 'I am providing you text ####claims### to perform the following steps.

Step 3: Find all the entities and their associated numerical identifiers for all the claims from text ####Claims#### in the output. entity_numerical_identifier is a number that identifies the entity uniquely. For example Device (10,40), Object (15, 45). Do not consider claim number, acronyms, percentages or any other textual attribute as numerical identifier for entity_numerical_identifier.  Print output in the json format with title ==entity_claims== where every entity is in a separate row. The json ==entity_claims== will contain the following fields: claim_number, entity_claim, entity_numerical_identifier. Print the json ==entity_claims== in this format:
{"entity_claims": [ {"claim_number": .., "entity_claim": ..., "entity_numerical_identifier":..}, ..]}

Step 3.1: Please continue the process of Step 3 to identify all the entities and their associated numerical identifiers for all the claims from text ####Claims####. entity_numerical_identifier is a number that identifies the entity uniquely. For example Device (10,40), Object (15, 45). Exclude claim number, acronym, percentage or any other textual attribute as numerical identifier.  The json entity_claims should include all claims, and each row should contain the claim_number, entity_claim, entity_numerical_identifier. Do not print output for this step. 

Step 4:  Identify all the entity actions for each/every entity from field entity_claim identified from json ####entity_claims#### for all claims referenced from field claim_number from json ####entity_claims####.
Print the output in json format with title ==claim_entity_actions== where every entity action is in a separate row.  The json ==claim_entity_actions== will contain the following fields: claim_number,  entity_claim, entity_numerical_identifier, entity_action_claim. Print the json ==claim_entity_actions== in this format:
{"claim_entity_actions": [ {"claim_number": .., "entity_claim": ..., "entity_numerical_identifier":.., "entity_action_claim":...}, ..]}

Step 4.1: Please continue the process of Step 4  for each/every entity from field entity_claim identified from json entity_claims and for each/every  claim referenced from field  claim_number from json entity_claims. The json Claim_entity_actions should include all claims, and each row should contain the claim_number, entity_claim, entity_numerical_identifier, entity_action_claim. Ensure the response is generated in one go.


', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(318, 2, 44, 'regenerate_claim', 'user', 'Claims:####{{claims}}####', NULL, '{"project": ["claims"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(319, 3, 44, 'regenerate_claim', 'user', 'Step 3, Step 3.1', NULL, NULL, '{"project": ["claim_entities"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(320, 4, 44, 'regenerate_claim', 'user', 'Step 4, Step 4.1', NULL, NULL, '{"project": ["claim_entity_actions"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(321, 5, 44, 'regenerate_claim', 'system', 'I am providing you text ####claims###,  ####entity_claims#### to perform the  steps from  step 5 to 5.1. 

Step 5: Identify all the specific numerical attributes, all the specific properties (including physical properties such as state, texture, etc. and particular examples), all the specific quantities/number of the entity/entites, all alternatives and all embodiments/uses/applications from text ####claims#### associated with each/every entity from field entity_claim for all claims from field claim_number from json ####entity_claims#### and quote from text ####Claims#### in the output. When we quote from text ####claims####, do not change the language and quote as is. Print the output in json format with title ==claim_entity_attributes== where every entity attribute is in a separate row. The entity attribute rows may contain multiple entities in field entities_claim and multiple claims in field claims_numbers in the output if they share the same/similar attribute.  The json ==claim_entity_attributes== will contain the following fields:  specific_attributes_claim, entities_claim, Claim_numbers. Print the json ==claim_entity_attributes== in this format:
{"claim_entity_attributes": [ {"specific_attributes_claim": .., "entities_claim": ..., "Claim_numbers": }, ..]}

Step 5.1: Please continue the process of Step 5 for all the entities from field entity_claim for all claims from field claim_number from json ####entity_claims####. The json ==claim_entity_attributes== should include all claims, and each row should contain specific_attributes_claim, entities_claim, Claim_numbers. Ensure the response is generated in one go.', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(322, 6, 44, 'regenerate_claim', 'user', 'Claims:####{{claims}}####â€¨entity_claims: ####{{claim_entities}}####', NULL, '{"project": ["claims", "claim_entities"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(323, 7, 44, 'regenerate_claim', 'user', 'Step 5, Step 5.1', NULL, NULL, '{"project": ["claim_specific_attributes"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(324, 8, 44, 'regenerate_claim', 'system', 'I am providing you text ####Current Invention### to perform the  steps from  step 5 to 7. 

Step 5: Identify all the entities from the text ####Current Invention####. Entities are defined as nouns/phrases/parts/components that perform an action to achieve some result. Ensure all the nouns/phrases/parts/components that perform an action or aid any action are captured in the output. Print the output in json format with title ==entity_invention== where each entity is in a separate row. The json ==entity_invention== will contain the following fields: serial_number, entity_inv. Print the json ==entity_invention== in this format:
{"entity_invention": [ {"serial_number": .., "entity_inv": ...}, ..]}

Step 6: Identify all the entity actions from text ####Current Invention#### for each/every the entity from field entity_inv from json entity_invention and determine the purpose of the entity action. Group the entity from field entity_inv if the purpose of their actions is the same. Print output in json format with title ==invention_entity_actions== where every entity action corresponding to an entity is in a separate row.   Ensure all the entities from field entity_inv from json ==entity_invention== are grouped in the output. The json  ==invention_entity_actions== will contain the following fields: serial_number, entities_inv, entity action_invention, purpose. Print the json ==invention_entity_actions== in this format:
{"entity_invention": [ {"serial_number": .., "entities_inv": [.,.,.], "entity action_invention":..., "purpose":...}, ..]}

Step 7: rewrite the json ==invention_entity_actions== by removing the field entity_action_invention and field purpose with title==grouped_entity_invention==. Print the json ==grouped_entity_invention== in this format:
{"grouped_entity_invention": [ {"serial_number": .., "entities_inv": ...}, ..]}', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(325, 9, 44, 'regenerate_claim', 'user', 'Current invention:
####{{invention}}####', NULL, '{"project": ["invention"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(326, 10, 44, 'regenerate_claim', 'user', 'Step 5', NULL, NULL, '{"project": ["entities"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(327, 11, 44, 'regenerate_claim', 'user', 'Step 6', NULL, NULL, '{"project": ["invention_entity_actions"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(328, 12, 44, 'regenerate_claim', 'user', 'Step 7', NULL, NULL, '{"project": ["grouped_entity_invention"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(329, 13, 440, 'regenerate_claim', 'system', 'I am providing you the following inputs:
####Claims####
####Current Invention
####claim_entity_actions###  in json format
####invention_entity_actions#### in json format 

Step 7:  Co-relate the entity actions for each claim from field entity_action_claim from json ####claim_entity_actions#### with the corresponding entity actions from field entity_action_invention from json  ####Invention_entity_actions####.  This is basically reverse mapping claim language of the entity actions in claims from text ####Claims#### with the entity actions as given in the text ####Current Invention####. Print the output of this step in json format with title ==entity_actions_rewritten== where each entity from field entity_claim is in a separate row. The json ==entity_actions_rewritten== will contain the following fields: claim_number, entity_claim, entity_numerical_identifier, entities_inv, entity_action_claim, entity_action_invention

Step 7.1: Please continue the process of Step 7 for all the claims referenced from field claim_number} from json ####claim_entity_actions####. The json ==entity_actions_rewritten== should include all claims from field claim_number, and each row should contain the claim_number, entity_claim, entity_numerical_identifier, entity_numerical_identifier, entities_inv, entity_action_claim, entity_action_invention. Ensure the response is generated in one go. 

Step 8: Identify the entity actions from field entity_action_invention from json ####invention_entity_actions#### that are not correlated with any of the entity actions from field entity_action_claim from output json entity_actions_rewritten. Print output in json format with title ==missing_entity_actions==. The json missing_entity_actions contains following fields: entities_inv, entity_action_invention

Step 9: Co-relate the identified missing entity action from field entity_action invention from output json missing_entity_actions with the most close entity from field entity_claim from json ####claim_entity_actions#### based on it''s purpose. Print the output in json format with title==missing_entity_action_rewritten==. The json missing_entity_action_rewritten will contain following fields: entity_claim, entities_inv and entity_action_invention

Step 10: Combine the entity actions from field entity_action_invention from json entity_actions_rewritten with the entity actions from field entity_action_invention from json missing_entity_action_rewritten based on claim entities from field entity_claim from json entity_actions_rewritten. Print the output of this step in json format with title ==total_entity_actions_rewritten== where each entity from field entity_claim is in a separate row. The json ==total_entity_actions_rewritten== will contain the following fields: claim_number, entity_claim,entity_numerical_identifier entities_inv, entity_action_claim, entity_action_invention
', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(330, 14, 440, 'regenerate_claim', 'user', 'Claims:####{{claims}}####â€¨â€¨â€¨Current Invention:####{{invention}}####â€¨â€¨â€¨claim_entity_actions:####{{claim_entity_actions}}####â€¨â€¨â€¨invention_entity_actions:####{{entity_action}}####â€¨â€¨', NULL, '{"project": ["claims", "invention", "claim_entity_actions", "entity_action"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(331, 15, 440, 'regenerate_claim', 'user', 'Step 7, Step 7.1', NULL, NULL, '{"project": ["entity_actions_rewritten"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(332, 16, 440, 'regenerate_claim', 'user', 'Step 8', NULL, NULL, '{"project": ["missing_entity_actions"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(333, 17, 440, 'regenerate_claim', 'user', 'Step 9', NULL, NULL, '{"project": ["missing_entity_action_rewritten"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(334, 18, 440, 'regenerate_claim', 'user', 'Step 10', NULL, NULL, '{"project": ["total_entity_actions_rewritten"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(335, 22, 440, 'regenerate_claim', 'system', 'I am providing you text ####Current Invention#### and ####grouped_entity_invention####. 


Step 7: Identify all the specific numerical attributes, specific properties (including physical properties such as state, texture, etc. and particular examples), specific quantities, every/each alternative and every/each embodiment, every/each use and every applications  from text ####Current invention#### associated with each/every entity from field entities from json ####grouped_entity_invention####. Quote the entire paragraph from text ####Current invention#### that describes the entity actions/attributes/properties/uses. Remember, there maybe multiple paragraphs that describes the entity actions/attributes/properties or uses. Some paragraphs may have the explicit reference to the entity and others may have implicit references to the entity.  While quoting from text ####current invention####, do not change the language and quote as is. Print output in json format with title ==specific_attributes_invention==where each attribute is in a separate row. The json  ==specific_attributes_invention== will contain the following fields: serial_number, specific_attributes_invention, entities_inv

Step 8: Identify the additional specific attributes from text ####Current Invention#### that are missing from field specific_attributes_invention in json specific_attributes_invention and include them in the output.
Print the output of this step in json format with title ==additional_attributes_invention== where each attribute is in a separate row. The json ==additional_attributes_invention== will contain the following fields:  additional_attributes_inv 

Step 9: Co-relate each/every additional entity attributes identified in json additional_attributes_invention with the most appropriate entity from field entities_inv from json ####invention_entity_actions#### based on the implied use/benefit of the attribute. Print the output of this step in json format with title ==additional_entity_attributes_invention==The json ==additional_entity_attributes_invention== will contain the following fields:serial number, entities_inv,  additional_attributes_inv

Step 9.1: Re-run step 9 till each/every additional entity attributes identified in json additional_attributes_invention is correlated with the most appropriate entity from field entities_inv from json ####invention_entity_actions#### based on the implied use/benefit of the attribute.', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(336, 23, 440, 'regenerate_claim', 'user', 'Current Invention: ####{{invention}}####â€¨
grouped_entity_invention: ####{{grouped_entity_invention}}####', NULL, '{"project": ["invention", "grouped_entity_invention"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(337, 24, 440, 'regenerate_claim', 'user', 'Step 7', NULL, NULL, '{"project": ["specific_attributes"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(338, 22, 440, 'regenerate_claim', 'user', 'Step 8', NULL, NULL, '{"project": ["additional_attributes_invention"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(339, 23, 440, 'regenerate_claim', 'user', 'Step 9, Step 9.1', NULL, NULL, '{"project": ["additional_entity_attributes_invention"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(340, 24, 440, 'regenerate_claim', 'system', 'I am providing you the following inputs to combine

1)####specific_attributes_invention####   in json format
2)####additional_entity_attributes_invention#### in json format . 


Step 10: Combine all the attributes for all the entities from field entity_inv  from the field  specific_attributes_invention from json ####specific_attributes_invention#### with all the attributes from the field additional_attributes_inv from json ####additional_entity_attributes_invention#### into a single field all_invention_attributes without changing the language. Quote all the attributes as is without missing any attribute associated with the entities. Print the output in json format with title ==total_attributes_invention==.
The json contains the following fields: Serial number, entities_inv, all_invention_attributes', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(341, 25, 440, 'regenerate_claim', 'user', 'specific_attributes_invention: {{specific_attributes}}â€¨â€¨â€¨additional_entity_attributes_invention:â€¨{{additional_entity_attributes_invention}}', NULL, '{"project": ["specific_attributes", "additional_entity_attributes_invention"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 'f', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(342, 26, 440, 'regenerate_claim', 'user', 'Step 10', NULL, NULL, '{"project": ["total_attributes_invention"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 'f', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(343, 27, 440, 'regenerate_claim', 'system', 'I am providing you the following inputs:
####Claims####
####Current Invention
####specific_attributes_claims#### in json format
####total_attributes_invention#### in json format
to perform the following steps. 

Step 7: Co-relate all the specific attributes for each claim from field specific_attributes_claim from json ####specific_attributes_claims####  with the corresponding related specific attributes from field all_invention_attributes from json  ####total_attributes_invention####.  

Print the output of this step in json format with title ==entity_attributes_rewritten== where each entity is in a separate row. The json ==entity_attributes_rewritten== will contain the following fields: entities_claim, entities_inv, specific_attributes_claims, all_invention_attributes, Claim_numbers.

Step 7.1: Please continue the process of Step 7 for all the claims referenced from field  claim_number from json ####specific_attributes_claims#### in the output. The json ==entity_attributes_rewritten== should include all claims, and each row should contain the entities_claim, entities_inv, specific_attributes_claims,  all_invention_attributes, Claim_numbers. Ensure the response is generated in one go.

Step 8: Identify the additional specific attributes from field all_invention_attributes from json ####total_attributes_invention#### that are not co-related with any specific attribute from field specific_attributes_claim from json ####Specific_attributes_claims#### and include them in the output.
Print the output of this step in json format with title ==additional_entity_attributes_rewritten== where each entity from field entities_inv is in a separate row. The json ==additional_entity_attributes_rewritten== will contain the following fields: entities_inv,  additional_attributes_invention.

Step 9: Co-relate each/every additional entity attributes identified in json additional_entity_attributes_rewritten with the most appropriate entity from field entities_claim from json ####specific_attributes_claims#### based on the implied use/benefit of the attribute. Print the output of this step in json format with title ==missing_entity_attributes_rewritten== where each entity from field entities_claim is in a separate row. The json ==missing_entity_attributes_rewritten== will contain the following fields: entities_claim, entities_inv,  additional_attributes_invention, Claim_numbers

Step 9.1: Re-run step 9 till each/every additional entity attributes identified in json additional_entity_attributes_rewritten is correlated with the most appropriate entity from field entities_claim from json ####specific_attributes_claims#### based on the implied use/benefit of the attribute.', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(344, 28, 440, 'regenerate_claim', 'user', 'Claims: ####{{claims}}####
Current Invention: ####{{invention}}####
specific_attributes_claims: ####{{claim_specific_attributes}}####
total_attributes_invention: ####{{total_attributes_invention}}####', NULL, '{"project": ["claims", "invention", "claim_specific_attributes", "total_attributes_invention"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(345, 29, 440, 'regenerate_claim', 'user', 'Step 7, Step 7.1', NULL, NULL, '{"project": ["entity_attributes_rewritten"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(346, 30, 440, 'regenerate_claim', 'user', 'Step 8', NULL, NULL, '{"project": ["additional_entity_attributes_rewritten"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(347, 31, 440, 'regenerate_claim', 'user', 'Step 9, Step 9.1', NULL, NULL, '{"project": ["missing_entity_attributes_rewritten"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(348, 32, 440, 'regenerate_claim', 'system', 'I am providing you the following inputs to combine

1)####specific_attributes_invention####   in json format
2)####additional_entity_attributes_invention#### in json format . 


Step 10: Combine all the attributes for all the entities from the field  specific_attributes_inv from json ####specific_attributes_invention#### with all the corresponding attributes from the field additional_attributes_inv from json ####additional_entity_attributes_invention#### into a single field all_invention_attributes without changing the language. Quote all the attributes as is without missing any attribute associated with the entities. Print the output in json format with title ==total_attributes_invention==.
The json ==total_attributes_invention== will contain the following fields: Serial number, entities_inv, all_invention_attributes. Print the json ==total_attributes_invention== in this format:
{"total_attributes_invention": [ {"serial_number": .., "entity_inv": ..., "all_invention_attributes":...}, ..]}. Do not print process in the output.', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(349, 33, 440, 'regenerate_claim', 'user', 'entity_attributes_rewritten: ####{{entity_attributes_rewritten}}####â€¨â€¨â€¨missing_entity_attributes_rewritten:â€¨####{{missing_entity_attributes_rewritten}}####', NULL, '{"project": ["entity_attributes_rewritten", "missing_entity_attributes_rewritten"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 'f', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(350, 34, 440, 'regenerate_claim', 'user', 'Step 10', NULL, NULL, '{"project": ["total_entity_attributes_rewritten"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 'f', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(351, 1, 46, 'block_diagram_common', 'system', 'I have provided following inputs to perform steps 5 to 11
####Claims####
####Current Invention####
####entity_actions_rewritten####in json format


Step 5:  Identify all the respective system independent claim and other claims dependent on it from the text ####Claims####. Output of this step in the following format: ==system_claims== Claim numbers 
Print the json ==system_claims== in this format:
{"system_claims": [1, ...]}.â€¨
Step 5.1: Please continue the process of Step 5 to identify all the system Claims (both Independent and dependent  are identified. Do not print output for this step 

Step 6:  For the claims identified from ==system_Claims==, use the entity actions from field {entity_action_claim} from json ####entity_actions_rewritten#### to identify which dependent claim depends on which entity action of the independent claim or the entity action in other dependent claims in context of text ####Claims####. Provide the mapping between the dependent claims and the claim entity actions of the independent claim or the entity actions of other dependent claims on which it depends. Output format: Dependent claim --> Independent claim --> reason etc. 
Print the json ==claim_dependency== in this format:
{"claim_dependency": [{"dependent_claim": ..., "independent_claim": ..., "reason": ...}, ...]}â€¨
Step 7: Identify and name the system that encompasses the specific entity actions associated with ####current invention#### from field entity action_invention from json ####entity_actions_rewritten#### and all the claims from ==system_Claims==. Output format: ==System==
Print the json ==System== in this format:
{"system": ...}â€¨
Step 8: Group all the entities from field entity_claim  from json ####entity_actions_rewritten####  for all the claims identified from ==system_Claims== into components and sub-components. Group all the entities into components and sub-components using overlaps/commonalities in their entity action from field entity_action_claim from json  ####entity_actions_rewritten#### and from output of step 6.  Ensure all the entities for all the claims from ==system_Claims== are grouped. Print the output in a json format with title: ==component_entities== where every component/ sub-component is in a separate row. The output json ==component_entities== will contain the following fields: component/sub-component type, component/sub-component name, entity_claim, entity_numerical_identifier, entities_inv, claim numbers. Print the json ==component_entities== in this format:
{"component_entities": [ { "component/sub-component type":..., "component/sub-component name ": ...,  "entity_claim":...., "entity_numerical_identifier":..., "entities_inv":..., "claim numbers":...}, ..]}. Do not print process in the output.

Step 8.1 - Ensure all the entities from field entity_claim and from field entity_invention  from json ####entity_actions_rewritten#### for all the claims from ==system_Claims== are used in the grouping of components and sub-components in Step 8 and referred in the output from Step 8.

Step 9: For all the entities from the field entity_claim from JSON ####entity_actions_rewritten####, verify that the field entity_numerical_identifier is empty/null/does not have any value. If this condition is satisfied for every entity, indicating that no entity has a numerical identifier, then proceed to Steps 10 and 11. If any entity has a numerical identifier, do not proceed further and provide an appropriate message indicating that the condition is not met. Output in json format with fields 
exp - explain the condition
flag - true/false based on is the condition.â€¨Output json in the below format: {"check": {"exp": ..., "flag": ...}}â€¨
Step 10 : Check the naming of components from Step 8 to determine which components are named like method components. Re-name only the components and sub-components from output of Step 8 to sound like system components/parts of a system if they sound like method components. When renaming, ensure the names are small/pithy/catchy titles with at most 2-5 words. Ensure the new names are unique and capture the essence of the component and sub-component entity action as mapped in output of Step 8. Do not number the components in this output. Print the output in json format with title ==renamed_component_entities==. The json ==renamed_component_entities== will contain the following fields: Component/Sub-component, Renaming required(Y/N), Renamed Component/Sub-component. Print the json ==renamed_component_entities== in this format:
{"renamed_component_entities": [ { "Component/Sub-component":..., "Renaming required(Y/N)": ..., "Renamed Component/Sub-component":...}, ..]}. Do not print process in the output.

Step 11: Number the system, component and sub-component from field  Component/Sub-component from json ==renamed_component_entities==, in an even numbering series with increment of 2 for each component as follows - if the system is numbered 200, the component should be numbered 202 and it''s sub-component should be numbered 202-a, 202-b etc. The next component will be numbered 204 and itâ€™s sub-component will be numbered 204-a, 204-b etc. Print the output json format with title ==component_sub-component==. The json ==component_sub-component== will contain following fields: Component type - system/component/sub-component, system/component/sub-component number,  system/component/sub-component name, explanation, entity_claim, entities_inv, claim numbers. Print the json ==component_sub-component== in this format:
{"component_sub-component": [ { "Component type - system/component/sub-component":..., "system/component/sub-component number": "...", "system/component/sub-component name":..., "explanation":..., "entity_claim":..., "entities_inv":..., "claim numbers":...}, ..]}. Do not print process in the output.', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(352, 2, 46, 'block_diagram_common', 'user', 'Claims: ####{{claims}}####
Current Invention: ####{{invention}}####
entity_actions_rewritten: ####{{entity_actions_rewritten}}####', NULL, '{"project": ["claims", "invention", "entity_actions_rewritten"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(353, 3, 46, 'block_diagram_common', 'user', 'Step 5, Step 5.1', NULL, NULL, '{"project": ["block_diagram_claim_nums"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(354, 4, 46, 'block_diagram_common', 'user', 'Step 6', NULL, NULL, '{"project": []}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(355, 5, 46, 'block_diagram_common', 'user', 'Step 7', NULL, NULL, '{"project": []}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(356, 6, 46, 'block_diagram_common', 'user', 'Step 8, Step 8.1', NULL, NULL, '{"project": ["block_diagram_common"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, 't', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(357, 7, 46, 'block_diagram_common', 'user', 'Step 9', NULL, NULL, '{"project": ["block_diagram_check"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(358, 8, 46, 'block_diagram_common', 'user', 'Step 10', NULL, NULL, '{"project": []}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(359, 9, 46, 'block_diagram_common', 'user', 'Step 11', NULL, NULL, '{"project": ["block_diagram_common"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, 't', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(360, 1, 45, 'flowchart_common', 'system', 'I am providing you the following inputs to perform steps 5 to 10. 
####Claims####
####Current Invention####
####entity_actions_rewritten####in json format

Step 5:  Identify all the respective method independent claims and other claims dependent on it from the text ####Claims####. Output of this step in the following format: ==method_claims== Claim numbers. 
Print the json ==method_claims== in this format:
{"method_claims": [1, ...]}.

Step 5.1: Please continue the process of Step 5 to identify all the method claims (both Independent and dependent)  are identified. Do not print output for this step 

Step 6:  For the claims identified from the output of step 5, use the entity actions from field entity_action_claim from json ####entity_actions_rewritten#### to identify which dependent claim depends on which entity action of the independent claim or the entity action in other dependent claims in context of text ####Claims####. Provide the mapping between the dependent claims and the claim entity actions of the independent claim or the entity actions of other dependent claims on which it depends. Output format: Dependent claim --> Independent claim --> reason etc. 
Print the json ==claim_dependency== in this format:
{"claim_dependency": [{"dependent_claim": ..., "independent_claim": ..., "reason": ...}, ...]}


Step 7: Using the output of Step 6 identify all the main steps/entity actions that occur in a logical sequence to accomplish the method in context of all the claims from Step 5 and the ####current invention####. Using the output of Step 6, for each main step/entity action, identify the sub-steps/parallel steps/entity actions that are optional/additional details for the main steps to accomplish the method in context of claims from Step 5. Ensure all the claims from Step 5 are referred in Step 7 output. Number the step and sub-step, in an even numbering series with increment of 2 for each step, as follows - if step number is 100, it''s sub-step number will be 100-a, 100-b, for step 102 the sub-step will be 102-a, 102-b etc. Print the output in a json format with title: ==Steps_sub-steps== where every step/ sub-step is in a separate row. The output json ==Steps_sub-steps== will contain the following fields: Step/Sub-Step type, Step/Sub-Step number, explanation quote from text ####claims####, claim number, entity_claim(entity_numerical_identifier) and entities_inv.
Print the json ==Steps_sub-steps== in this format:
{"Steps_sub-steps": [ { "Step/Sub-Step type":..., "Step/Sub-Step number": ..., "explanation quote from text ####claims####":..., "claim number":..., "entity_claim(entity_numerical_identifier)":..., "entities_inv":...}, ..]}. Do not print process in the output.

Step 8: Rewrite step 7 by doing the following:
a) keep the step and sub-step numbers the same
b) Re-write the explanation from "explanation quote from text ####Claims####" in a concise form without changing the technical language/vocabulary or alter any of the numerical attributes, specific properties (including physical properties such as state, texture, etc. and particular examples), specific quantities details/parameters/definitions in context of text ####Claims####.
Print the output of this step in json format with title ==Steps_sub-steps Rewrite== The json ==Steps_sub-steps Rewrite== will have the following fieds: Step/Sub-Step number, explanation, claim number. 
Print the json ==Steps_sub-steps Rewrite== in this format:
{"Steps_sub-steps Rewrite": [ { "Step/Sub-Step type":..., "Step/Sub-Step number":..., "explanation": ..., "claim number":...}, ..]}. Do not print process in the output.

Step 9: Identify all the decision making steps from ==Steps_sub-steps Rewrite==. Print the output of this step in json format with title ==decision_steps==. Print the json ==decision_steps== in this format:
{"decision_steps": [ {"Decision step":...}, ..]}. Do not print process in the output.

Step 10: Identity and list all the entities from field ''entities_inv'' from json ####entity_actions_rewritten#### that are not directly mentioned in the claims but are related to the broader context of the invention or the application of the claimed method. Quote them from field ''entities_inv'' as is from json ####entity_actions_rewritten####. Print output in json format with title ==additional_entities_to_describe==. The json ==additional_entities_to_describe==will have the field entities_inv_addl. Print the json ==additional_entities_to_describe== in this format:
{"additional_entities_to_describe": [ { "entities_inv_addl":...}, ..]}. Do not print process in the output.', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 596, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(361, 2, 45, 'flowchart_common', 'user', 'Claims: ####{{claims}}####
Current Invention: ####{{invention}}####
entity_actions_rewritten: ####{{entity_actions_rewritten}}####', NULL, '{"project": ["claims", "invention", "entity_actions_rewritten"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(362, 3, 45, 'flowchart_common', 'user', 'Step 5, Step 5.1', NULL, NULL, '{"project": ["flowchart_claim_nums"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(363, 4, 45, 'flowchart_common', 'user', 'Step 6', NULL, NULL, '{"project": ["claim_dependency"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(364, 5, 45, 'flowchart_common', 'user', 'Step 7', NULL, NULL, '{"project": ["Steps_sub-steps"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(365, 6, 45, 'flowchart_common', 'user', 'Step 8', NULL, NULL, '{"project": ["flowchart_common"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4056, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(366, 7, 45, 'flowchart_common', 'user', 'Step 9', NULL, NULL, '{"project": ["flowchart_decision_step"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(367, 8, 45, 'flowchart_common', 'user', 'Step 10', NULL, NULL, '{"project": ["additional_entities_to_describe"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(368, 1, 49, 'flowchart_description', 'system', 'I am giving you the following inputs to write a detailed explanation for the Step and sub-steps :
1. ####Claims####
2. ####Current invention####
3. ####steps_sub-steps#### 
4. ####entity_actions_rewritten#### in json format
5. ####entity_attributes_rewritten#### in json format


Step 1: Choose the step {{step_num}} and all its sub-steps (if any) from ####steps_sub-steps#### for the explanation. Define all the entity actions pertaining to all entities for the chosen steps and its sub-steps from json ####steps_sub-steps#### by referencing entity actions from json ####entity_actions_rewritten####. The definitions must include what the entity actions are in the real world. They must further include all details of all the entities involved from field entities_claim and from field entities from json ####entity_attributes_rewritten###. In this explanation, quote/cite all the attributes/details/definitions/parameters/mechanism/structure/working/properties/mathematical construct/metrics/measurements/uses/other embodiments of all the entities involved from field specific_attributes_claims,  from field all invention attributes and from field additional_attributes_invention from json ####entity_attributes_rewritten#### without changing the language. 
Include implicit entities/steps/working/components/parts/conditions/ranges that will explain all the entity actions of/by/on the entities involved for the chosen step and all its sub-steps only so that a technical expert can understand the entity actions of all entities in the chosen step and sub-step without having to make any assumptions.  Reference chosen step and all its sub-step numbers from ####steps_sub-steps#### in the explanation without using the word step or sub-step. Do not repeat the step in the output. 

Step 2: Ensure that the explanation from step 1 is only written for the chosen step and all its sub-steps. For the chosen step and all its sub-steps, ensure the explanation from step 1 details the entity actions from ####entity_action_rewritten#### and include all the the entity attributes from json ####entity_attributes_rewritten#### and json  ####missing_attributes_invention#### without changing the language. Ensure the explanation is written in a paragraph format by referencing the step numbers from ####steps_sub-steps####. Ensure the chosen step and all its sub-steps are numbered from ####steps_sub-steps#### in the explanation. Step 2 is only to ensure the proper running of step 1 and should not print an output. Output with header ==Explanation Step {{step_num}}==', NULL, '{"project": ["flowchart_main_element_nums"]}', NULL, NULL, NULL, 'Start', NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'text'),
(369, 2, 49, 'flowchart_description', 'user', 'Claims: ####{{claims}}####â€¨â€¨â€¨Current invention: ####{{invention}}####â€¨â€¨â€¨Steps_sub-steps: ####{{element_explanations}}####â€¨â€¨â€¨entity_actions_rewritten: ####{{entity_actions_rewritten}}####â€¨â€¨entity_attributes_rewritten: ####{{entity_attributes_rewritten}}####', NULL, '{"project": ["claims", "invention", "element_explanations", "entity_actions_rewritten", "entity_attributes_rewritten"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'text'),
(370, 3, 49, 'flowchart_description', 'user', 'Step 1, Step 2', NULL, NULL, '{"project": ["step_description"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, 't', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'text'),
(371, 4, 49, 'flowchart_description', 'system', 'Revise the text ####Explanation Step#### by removing the adjectives/superlatives for all the entities and their actions. Avoid all patent profanity terms like "invention", "current Invention", "patent", "entity", "action", "entities", "alternative of each entity", "layman", "implicit component", "technical write-up" and "entity action", "real-world", "Entity_claims", "Claims", "Current invention", "steps_sub-steps", etc. Also,  avoid use of superlatives like "critical", "most important", "crucial", "important", "integral", "pivotal" etc. Our goal is only to state facts about the entities involved in the step, it''s working, it''s real world manifestation and not use any adjectives/language that deviates from that goal. 

In the revised explanation, ensure the following:
a) reference the step and sub-step numbers without using the words "step", "sub-step", "claim_step_actions", "current Invention", "patent", "entity", "action", "entities", "alternative of each entity", "implicit component", "technical write-up" and "entity action", "real-world", "Entity_claims", "Claims", "Claim number", "Entity_claim", "Entity number from claims". 
b) Reference/Quote all the entities - for example Device (10,40), Object (15, 45) in the revised explanation.
c) The revised explanation does not exclude any detail for the function of the component and its sub-components', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'text'),
(372, 5, 49, 'flowchart_description', 'user', 'Explanation Step: ####{{step_description}}####', NULL, '{"project": ["step_description"]}', '{"project": ["flowchart_description"]}', NULL, NULL, 'End', 't', 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'text'),
(373, 6, 49, 'flowchart_description', 'system', 'I am giving you the following inputs to write a detailed explanation
1. ####Current invention####
2. ####entity_attributes_invention#### in json format
3.####additional_entities_to_describe#### in json format 

Step 1: From the input json ####additional_entities_to_describe####, verify that the field entities_inv_addl has any data. If this condition is satisfied, indicating that the field entities_inv_addl has some data, then proceed to step 2. Output in json format with title: describe_additional_entities with fields 
exp - explain the condition
flag - true/false based on is the condition. Output in json format asâ€¨{"entities_inv_addl": {"exp": ..., "flag": ...}}

Step 2: Co-relate the entities from field entities_inv_addl from json ####additional_entities_to_describe#### with the field entities_inv from json ####entity_attributes_invention####.
The co-relation should be done by going through field entities from json ####entity_attributes_invention#### across the entire field serial number from json ####entity_attributes_invention####. Print the output in json format with title -==a==. The json ==a== contains following fields  entity, serial_number. Print the json ==a== in this format:
{"a": [ { "entity":..., "serial_number":...}, ..]}. Do not print process in the output.

Step 3: Quote the entire text from field all_invention_attributes from json ####entity_attributes_invention#### for the entities from field entity from json "a" from step 2 by doing the following:
a) Co-relate the entities from field entities_inv_addl from json ####additional_entities_to_describe#### with the field entities_inv from json ####entity_attributes_invention####.
The co-relation should be done by going through field entities from json ####entity_attributes_invention#### across the entire field serial number from json ####entity_attributes_invention####. Do not print output. 
b) after co-relation, identify the text associated with the entity from field entities_inv from field all_invention_attributes from json ####entity_attributes_invention####.Do not print output. c) After the text identification, quote and print the entire text from field all_invention_attributes from json ####entity_attributes_invention#### in a paragraph format in the output. Do not change the technical language and do not use  words like "serial number" in the output. Do not repeat the step in the output. 
Output: missing_attribute_description', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'text'),
(374, 7, 49, 'flowchart_description', 'user', 'Current Invention: ####{{invention}}####â€¨additional_entities_to_describe: ####{{additional_entities_to_describe}}####
entity_attributes_invention: ####{{total_attributes_invention}}####', NULL, '{"project": ["additional_entities_to_describe", "invention", "total_attributes_invention"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'text'),
(375, 8, 49, 'flowchart_description', 'user', 'Step 1', NULL, NULL, '{"project": ["additional_entities_flag"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(376, 9, 49, 'flowchart_description', 'user', 'Step 2', NULL, NULL, '{"project": []}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(377, 10, 49, 'flowchart_description', 'user', 'Step 3', NULL, NULL, '{"project": ["flowchart_description"]}', NULL, NULL, NULL, 't', 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'text'),
(378, 1, 47, 'flowchart_diagram', 'system', 'Step 15: Provide the mermaid script/syntax for all steps and sub-steps/parallel steps using ==Steps_sub-steps Rewrite== by doing the following: For the mermaid script/syntax, understand the output of all steps and sub-steps/parallel steps from ==Steps_sub-steps Rewrite== in context of ==Decision_step==. ==Decision_step== identifies the decision making step. Using all the details of all the steps and sub-steps/parallel steps from ==Steps_sub-steps Rewrite== and decision making step from ==Decision_step==, identify nodes, conditions (if any), and different links/paths. Do not print output for this step.

Step 16: Choose the layout for output from Step 15. Use graph TB for a top-down layout or graph LR for a left-right layout. Do not print output for this step.

Step 17: Define the nodes for output from Step 15. Use square brackets for regular nodes e.g., 100["Node A"].  Use curly braces for decision nodes e.g., 102{"Condition B"}. Treat "If" condition nodes as decision nodes. Do not print output for this step.

Step 18: For the Mermaid script/syntax from step 15 define the links/paths between nodes from Step 17 using -->. To add text to the links/paths, use |Link text|. For multiple links/paths between nodes, define each link separately. For decision making link/path, use appropriate messages to handle yes/no cases. For example, a decision node should have two separate links/paths with messages as "yes" and "no". Do not print output for this step.

Step 19: Review and adjust the Mermaid script/syntax as needed. Refer the example given below for following the style of the mermaid. â€¨
mermaid
Copy code
graph TB
100["Determine an initial eye strain context for a user wearing a VR headset."]
102{"Recognize a User Interface (UI) adaptation."}
104["Establish the intensity of the UI adaptation."]
106["Display modified VR content by applying the identified UI adaptation."]
108["Assess an updated eye strain context."]
110{"If the updated eye strain context indicates a decrease in eye strain."}
112["Modify the priority weight for the UI adaptation."]
114["Refresh a user''s profile with the UI adaptation, its intensity, and the modified priority weight."]
100 --> 102
102 -- Yes --> 104
104 --> 106
106 --> 108
108 --> 110
110 -- Yes --> 112
112 --> 114
110 -- No --> 102


Step 20:  Confirm that the yes and no condition from the decision making step from ==Decision_step== has already been considered in the output of Step 19. If no, then re-generate the output from Step 19. Do not print output for this step.', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(379, 2, 47, 'flowchart_diagram', 'user', 'Steps_sub-steps: ####{{element_explanations}}####â€¨â€¨Decision_step: ####{{decision_steps}}####', NULL, '{"project": ["element_explanations", "decision_steps"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(380, 3, 47, 'flowchart_diagram', 'user', 'Step 15, Step 16, Step 17, Step 18, Step 19, Step 20', NULL, NULL, '{"project": []}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'text'),
(381, 4, 47, 'flowchart_diagram', 'user', 'Step 22: Using output from step 19, generate one mermaid for all the steps, without the sub-steps, which together encompass the method in context of ==Steps_sub-steps Rewrite== and ==Decision_step==. Output only mermaid script/syntax without explanation or introduction. Output in json format â€¨{"mermaid": "mermaid script/syntax..."}â€¨
Sample Mermaid:
graph TB
100["Determine an initial eye strain context for a user wearing a VR headset."]
102{"Recognize a User Interface (UI) adaptation."}
104["Establish the intensity of the UI adaptation."]
106["Display modified VR content by applying the identified UI adaptation."]
108["Assess an updated eye strain context."]
110{"If the updated eye strain context indicates a decrease in eye strain."}
112["Modify the priority weight for the UI adaptation."]
114["Refresh a user''s profile with the UI adaptation, its intensity, and the modified priority weight."]
100 --> 102
102 -- Yes --> 104
104 --> 106
106 --> 108
108 --> 110
110 -- Yes --> 112
112 --> 114
110 -- No --> 102', NULL, NULL, '{"project": ["mermaid"]}', NULL, NULL, NULL, 't', 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(382, 5, 47, 'flowchart_diagram', 'user', 'Step 25: Split the mermaid from Step 19 into multiple mermaids based on the sub-steps grouping where each sub-step group contains a step and it''s respective sub-step from ==Steps_sub-steps Rewrite==. For any step with sub-step from ==Steps_sub-steps Rewrite==, ensure that the mermaid is made only for the step and all it''s sub-steps. Using ==Steps_sub-steps Rewrite==, avoid mermaids in Step 25 for steps that do not contain sub-steps. Ensure each of the mermaid splits are meaningful in context of ==Steps_sub-steps Rewrite== and ==Decision_step==. Print the output in json format with title ==mermaids== with mermaids as array. Do not repeat the step in the output. 
Print the json ==mermaid== in this format:
{"mermaids": [{"mermaid": "mermaid script/syntax ..."} , ...]}
Sample Mermaid:
graph TB
100["Determine an initial eye strain context for a user wearing a VR headset."]
102{"Recognize a User Interface (UI) adaptation."}
104["Establish the intensity of the UI adaptation."]
106["Display modified VR content by applying the identified UI adaptation."]
108["Assess an updated eye strain context."]
110{"If the updated eye strain context indicates a decrease in eye strain."}
112["Modify the priority weight for the UI adaptation."]
114["Refresh a user''s profile with the UI adaptation, its intensity, and the modified priority weight."]
100 --> 102
102 -- Yes --> 104
104 --> 106
106 --> 108
108 --> 110
110 -- Yes --> 112
112 --> 114
110 -- No --> 102', NULL, NULL, '{"project": ["mermaids"]}', NULL, NULL, NULL, 't', 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(383, 6, 47, 'flowchart_diagram', 'system', 'Step 23: Using the inputs ####mermaid####, identify the goal of the steps in fewer than 20 words.', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(384, 7, 47, 'flowchart_diagram', 'user', 'mermaid: ####{{mermaid}}####â€¨mermaids: ####{{mermaids}}####', NULL, '{"project": ["mermaid", "mermaids"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(385, 8, 47, 'flowchart_diagram', 'user', 'Step 23', NULL, NULL, '{"project": []}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'text'),
(386, 9, 47, 'flowchart_diagram', 'user', 'Step 24: The output of step 23 is for a flow chart named as figure 1. Generate a brief description of the figure in 1 line. Output in json format {"breif_description": ...} Consider the writing style of sample given below:

FIG. 1 illustrates, in a flowchart, operations for using a user profile in accordance with certain embodiments. 

Brief Description;', NULL, NULL, '{"project": ["breif_description"]}', NULL, NULL, NULL, 't', 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(387, 10, 47, 'flowchart_diagram', 'user', 'Step 26: Using the ####mermaids#### , identify the goal of the steps for each mermaid separately in fewer than 20 words.', NULL, NULL, '{"project": []}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'text'),
(388, 11, 47, 'flowchart_diagram', 'user', 'Step 27: The output of step 26 is for a flow chart named as figure 1A, 1B, 1C and so on. Generate a brief description of each figure in 1 line. â€¨Output in json format with field "breif_descriptions".â€¨ Print the output for this step in json format:
{"breif_descriptions": [{"title": "...", "brief_description": ...}]}â€¨â€¨Consider the writing style of sample given below:

FIG. 1 illustrates, in a flowchart, operations for using a user profile in accordance with certain embodiments. 

Brief Description;', NULL, NULL, '{"project": ["breif_descriptions"]}', NULL, NULL, NULL, 't', 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(389, 1, 48, 'block_diagram_description', 'system', 'I am giving you the following inputs to write a detailed explanation for the component and its sub-components:
1. ####Claims####
2. ####Current invention####
3. ####components_entities#### in json format
4. ####entity_actions_rewritten#### in json format
5. ####entity_attributes_rewritten#### in json format

Step 1: Choose the component {{component_num}} and all Sub-components for component {{component_num}} from ####components_entities#### for the explanation. Please provide a detailed explanation of the chosen Component and all of its sub-components from the text ####components_entities####. Reference/Quote the entities and their numbers either from field entity_numerical_identifier from json ####entity_actions_rewritten#### or from field system/component/sub-component number from json ####components_entities#### if available.  For example Device (10,40), Object (15, 45). The explanation should include the following points:

a) Introduce chosen component  and its significance

b) Define and explain all the entities that comprise the component and its sub-component from ####components_entities#### in context of text ####Claims#### and ####Current Invention####. Quote/cite all the specific numerical attributes, all the specific properties (including physical properties such as state, texture, etc. and particular examples), all the specific quantities/number of the entity/entites, all alternatives and all embodiments/uses/applications for all the entities from ####components_entities#### by referencing the entity attributes from field specific_attributes_claims,  from field all invention attributes and from field additional_attributes_invention from json ####entity_attributes_rewritten#### and explain how they contribute to the component''s function. Cite/quote all the entity attributes from field specific_attributes_claims,  from field all invention attributes and from field additional_attributes_invention from json ####entity_attributes_rewritten#### without generalising/changing the language of the entity attributes in the explanation. Avoid use of quotations in the explanation.

c) Use the mapping between entities from the field entity_claim and entities from the invention from the field entity_invention from the json ####entity_actions_rewritten#### to explain all the alternative manifestations of the entities in context of ####current invention#### and ####claims####. Do not include the column names or headers in the explanation. 

Do not use the word component or sub-component in the explanation, instead use the component/sub-component name while explaining about it. Also do not use the component/sub-component numbers in the explanation. Do not refer to words like "entity", "entities", "entity action", "crucial", "critical" etc. Just state facts from the inputs provided and avoid use of adjectives in the explanation. Avoid use of quotations in the explanation.
Do not reference claim numbers from field claim_number from json ####entity_actions_rewritten#### in the explanation. Output format: ==introduction_component {{component_num}}===

Step 2: Re-run step 1 till 
a) all the entities are cited with their numbers either from field entity_numerical_identifier from json ####entity_actions_rewritten#### or from field system/component/sub-component number from json ####components_entities#### in the explanation if available - for example Device (10,40), Object (15, 45).
b) Cite/quote all the entity attributes from field specific_attributes_claims,  from field all invention attributes and from field additional_attributes_invention from json ####entity_attributes_rewritten####.
c) no claim numbers are referenced from field claim_number from json ####entity_actions_rewritten#### 
d) words like "entity", "entities", "entity action", "crucial", "critical" etc are not used in the explanation', NULL, '{"project": ["flowchart_main_element_nums"]}', NULL, NULL, NULL, 'Start', NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(390, 2, 48, 'block_diagram_description', 'user', 'Claims: ####{{claims}}####â€¨â€¨Current invention: ####{{invention}}####â€¨â€¨components_entities: ####{{element_explanations}}####â€¨â€¨entity_actions_rewritten: ####{{entity_actions_rewritten}}####â€¨â€¨â€¨entity_attributes_rewritten: ####{{entity_attributes_rewritten}}####â€¨â€¨', NULL, '{"project": ["claims", "invention", "element_explanations", "entity_actions_rewritten", "entity_attributes_rewritten"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(391, 3, 48, 'block_diagram_description', 'user', 'Step 1, Step 2', NULL, NULL, '{"project": ["introduction_description"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'text'),
(392, 4, 48, 'block_diagram_description', 'user', 'Explain the Working of the chosen component and it''s sub-component above by referencing text ####components_entities#### with the json ####entity_action_rewritten####. Ensure that the working/entity actions of the component and sub-component is structured coherently, with each entity action explanation flowing logically into the next. The language should be technical yet clear, catering to a professional audience with the aim of providing a thorough understanding of the component''s workings. :
(a) Reference, define and describe in detail all the entity actions associated with all the entities of the chosen component and its sub-components from text ####components_entities#### by mapping component entities with the corresponding entities from json ####entity_action_rewritten####so that a technical person can understand without making any assumptions.  (do not refer to the entity action explicitly)
(b) For each entity action, explain its nature (what), purpose (why), context (when and under what conditions), and method (how). 
(c) Use your knowledge base to include any implicit entities, components, actions, or details not explicitly mentioned in field entity_action_claim or in field entity_action_invention in json #### entity_action_rewritten#### but crucial for a complete understanding of all the entity actions and how they flow logically into one another for the working of the system. 

Make sure to all the entities are cited with  their numbers either from field entity_numerical_identifier from json ####entity_actions_rewritten#### or from field system/component/sub-component number from json ####components_entities#### associated with each component/sub-component in the explanation if the number is available.- for example Device (10,40), Object (15, 45). Do not number entities in absence of entity_numerical_identifier or refer to words like "entity", "entities", "entity action", "crucial", "critical" etc. Do not repeat anything from the explanation that explains the entities comprising the component and sub-component from above. Output format: ==explanation_component {{component_num}}==', NULL, '{"project": ["flowchart_main_element_nums"]}', '{"project": ["explanation_description"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'text'),
(393, 5, 48, 'block_diagram_description', 'system', 'Step 3: Revise the text ####Introduction_Component 1#### and text ####explanation_component 1#### by using the following guidelines:
a) Do not change the technical language/vocabulary or alter any of the numerical attributes, specific properties (including physical properties such as state, texture, etc. and particular examples), specific quantities details/parameters/definitions 
(b) Remove any adjectives or superlatives that describe the entities and their actions.
(c) Avoid explicit references to any specific claims associated with the component or sub-components.
(d) Exclude patent profanity terms such as "step", "sub-step", "claim_step_actions", "current Invention", "patent", "entity", "action", "entities", "alternative of each entity", "implicit component", "technical write-up" and "entity action", "real-world", "Entity_claims", "Claims", "Claim number", "Entity_claim", "Entity number from claims", etc. and avoid using superlatives like "critical", "most important", "crucial", "important".
(e) Do not include the headers i.e "==Introduction_Component {{component_num}}==" and "==explanation_component {{component_num}}==" in the explanation
f) Reference/Quote all the entities for example Device (10,40), Object (15, 45) in the revised explanation.', NULL, '{"project": ["flowchart_main_element_nums"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'text'),
(394, 6, 48, 'block_diagram_description', 'user', 'Introduction_Component: ####{{introduction_description}}####â€¨explanation_description: ####{{explanation_description}}####', NULL, '{"project": ["introduction_description", "explanation_description"]}', '{"project": ["block_diagram_description"]}', NULL, NULL, 'End', 't', 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'text'),
(395, 1, 51, 'block_diagram', 'system', 'Step 16: Provide the mermaid script/syntax for json component_sub-component. Do not print output for this step.

Step 17: Choose the layout for output from step 16. Use graph TB for a top-down layout or graph LR for a left-right layout. Do not print output for this step.

Step 18: Define the nodes for output from step 16. Use square brackets for regular nodes (e.g., 200["Host System"]). Do not print output for this step.

Step 19: For the Mermaid script/syntax from step 16, use the word "subgraph" to start a subgraph and the word "end" to close it. Define all nodes that belong to the subgraph. Define the links for  all the nodes at the end. Do not print output for this step.

Step 20: Review and adjust the Mermaid script/syntax as needed. Refer the example given below for following the style of the mermaid. This sample is for reference only, do not follow numbering of the sample given below. Keep the numbering same as given in the json component_sub-component and also, do not mention claim numbers in the mermaid codes. 

For example, 
graph LR
subgraph 200["Host System"]
  210["Host Interface Unit"]
end
subgraph 204["Memory Controller"]
  212["Memory Interface Unit"]
  214["Processing Unit"]
end
subgraph 206["Non-Volatile Memory"]
  202["Memory Devices"]
  208["Host Memory"]
  216["Information Units"]
end
200 --- 204
204 --- 206
Print the output for this step in mermaid script/syntax. Do not print process/step in the output.

Step 22: Ensure that a valid mermaid syntax has been generated in step 20.  Do not print the output for this step.', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(396, 2, 51, 'block_diagram', 'user', 'component_sub-component:: ####{{element_explanations}}####â€¨â€¨', NULL, '{"project": ["element_explanations"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(397, 3, 51, 'block_diagram', 'user', 'Step 16, Step 17, Step 18, Step 19, Step 20, Step 22', NULL, NULL, '{"project": []}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'text'),
(398, 4, 51, 'block_diagram', 'user', 'Step 26: Using output from step 20, generate one mermaid for all the main components, without the sub-components, which together enable/manifest all the entity actions from json component_sub-componentâ€¨â€¨Only output mermaid script/syntax without explanation or introduction                                     Output in json format as belowâ€¨{"mermaid": "mermaid script/syntax..."}â€¨', NULL, NULL, '{"project": ["mermaid"]}', NULL, NULL, NULL, 't', 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(399, 5, 51, 'block_diagram', 'user', 'Step 27: Using the output of step 26, identify the goal of the steps in fewer than 20 words.', NULL, NULL, '{"project": []}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'text'),
(400, 6, 51, 'block_diagram', 'user', 'Step 28: The output of step 27 is for a flow chart named as figure 2. Generate a brief description of the figure in 1 line. Output in json format {"breif_description": ...} . Consider the writing style of sample given below:

FIG. 2 illustrates, in a block diagram, a computing environment of a VR headset in accordance with certain embodiments.

Brief Description;', NULL, NULL, '{"project": ["breif_description"]}', NULL, NULL, NULL, 't', 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(401, 7, 51, 'block_diagram', 'user', 'Step 29: Split the mermaid from Step 20 into multiple mermaids based on the main components-sub-components grouping. For any main component with sub-component, ensure that the mermaid is made for that main component and all it''s sub-components. Avoid mermaids in Step 29 that do not contain sub-components. Also, ensure each of the mermaid splits are meaningful in context of json component_sub-component. Print the output in json format with title ==mermaids== with mermaids as array. Do not repeat the step in the output. Print the json ==mermaid== in this format:
{"mermaids": [{"title":"", "mermaid": "mermaid script/syntax ..."} , ...]}', NULL, NULL, '{"project": ["mermaids"]}', NULL, NULL, NULL, 't', 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(402, 8, 51, 'block_diagram', 'user', 'Step 30: Using the output of step 29, identify the goal of the steps for each mermaid separately in fewer than 20 words.', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'text'),
(403, 9, 51, 'block_diagram', 'user', 'Step 31: The output of step 30 is for a flow chart named as figure 2A, 2B, 2C and so on. Generate a brief description of each figure in 1 line. Print the output for this step in json format:
{"breif_descriptions": [{"title": "...", "brief_description": ...}]}. Consider the writing style of sample given below:

FIG. 2 illustrates, in a block diagram, a computing environment of a VR headset in accordance with certain embodiments.

Brief Description of mermaids; ".  ', NULL, NULL, '{"project": ["breif_descriptions"]}', NULL, NULL, NULL, 't', 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(404, 1, 52, 'extra_diagram_common', 'system', 'I have provided following inputs to perform steps 5 to 8.1
####Claims####
####Current Invention####
####entity_actions_rewritten####in json format


Step 5:  Identify the respective apparatus/device/composition/formulation/product/machine independent claim and other claims dependent on it from the text ####Claims####. Output of this step in the following format: ==apparatus/device/composition/formulation/product/machine_Claims== Claim numbers
Print the json ==apparatus/device/composition/formulation/product/machine_Claims== in this format:
{"claim_nums":{"apparatus_claims": [1, ...],"device_claims": [1, ...],"composition_claims": [1, ...],"formulation_claims": [1, ...],"product_claims": [1, ...],"machine_claims": [1, ...]}}â€¨
Step 5.1: Please continue the process of Step 5 to identify all the apparatus/device/composition/formulation/product/machine claims (both Independent and dependent)  are identified. Do not print output for this step 

step 6:  For the claims identified from ==apparatus/device/composition/formulation/product/machine_Claims==, use the entity actions from field {entity_action_claim} from json ####entity_actions_rewritten#### to identify which dependent claim depends on which entity action of the independent claim or the entity action in other dependent claims in context of text ####Claims####. Provide the mapping between the dependent claims and the claim entity actions of the independent claim or the entity actions of other dependent claims on which it depends. Output format: Dependent claim --> Independent claim --> reason etc. 
Print the json ==claim_dependency== in this format:
{"claim_dependency": [{"dependent_claim": ..., "independent_claim": ..., "reason": ...}, ...]}â€¨
Step 8: Group all the entities from field entity_claim  from json ####entity_actions_rewritten####  for all the claims identified from ==apparatus/device/composition/formulation/product/machine_Claims== into components and sub-components. Group all the entities into components and sub-components using overlaps/commonalities in their entity action from field entity_action_claim from json  ####entity_actions_rewritten#### and from output of step 6.  Ensure all the entities for all the claims from ==apparatus/device/composition/formulation/product/machine_Claims== are grouped. Print the output in a json format with title: ==component_entities== where every component/ sub-component is in a separate row.  Number the component with an integer and its subcomponents with a decimal followed by the integer - for example if the component number is 1 its sub-component number will be 1.1, 1.2, etc. The output json ==component_entities== will contain the following fields: component/sub-component type, component/sub-component name, component/sub-component number, entity_claim,  entities_inv, entity_numerical_identifier, claim numbers. Print the json ==component_entities== in this format:
{"component_entities": [ { "component/sub-component type":..., "component/sub-component name ": ...,  "component/sub-component number":..., "entity_claim":...., "entity_numerical_identifier":..., "entities_inv":..., "claim numbers":...}, ..]}. Do not print process in the output

Step 8.1 - Ensure all the entities from field entity_claim and from field entity_invention  from json ####entity_actions_rewritten#### for all the claims from ==apparatus/device/composition/formulation/product/machine_Claims== are used in the grouping of components and sub-components in Step 8 and referred in the output from Step 8.
', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(405, 2, 52, 'extra_diagram_common', 'user', 'Claims:####{{claims}}#### â€¨â€¨Current invention:
####{{invention}}####â€¨â€¨entity_actions_rewritten:
####{{entity_actions_rewritten}}####', NULL, '{"project": ["claims", "invention", "entity_actions_rewritten"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(406, 3, 52, 'extra_diagram_common', 'user', 'Step 5, Step 5.1', NULL, NULL, '{"project": ["extra_diagram_claim_nums"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(407, 4, 52, 'extra_diagram_common', 'user', 'Step 6', NULL, NULL, '{"project": ["claim_dependency"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(408, 5, 52, 'extra_diagram_common', 'user', 'Step 8, Step 8.1', NULL, NULL, '{"project": ["extra_diagram_common"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(409, 1, 53, 'extra_description', 'system', 'I am giving you the following inputs to write a detailed explanation for the component and its sub-components:
1. ####Claims####
2. ####Current invention####
3. ####components_entities#### in json format
4. ####entity_actions_rewritten#### in json format
5. ####entity_attributes_rewritten#### in json format

Step 1: Choose the component {{component_num}} and all Sub-components for component {{component_num}} from ####components_entities#### for the explanation. Please provide a detailed explanation of the chosen Component and all of its sub-components from the text ####components_entities####. Reference/Quote the entities and their numbers either from field entity_numerical_identifier from json ####entity_actions_rewritten#### or from field system/component/sub-component number from json ####components_entities#### if available - for example Device (10,40), Object (15, 45). The explanation should include the following points:

a) Introduce chosen component  and its significance

b) Define and explain all the entities that comprise the component and its sub-component from ####components_entities#### in context of text ####Claims#### and ####Current Invention####. Quote/cite all the specific numerical attributes, all the specific properties (including physical properties such as state, texture, etc. and particular examples), all the specific quantities/number of the entity/entites, all alternatives and all embodiments/uses/applications for all the entities from ####components_entities#### by referencing the entity attributes from field specific_attributes_claims,  from field all invention attributes and from field additional_attributes_invention from json ####entity_attributes_rewritten#### and explain how they contribute to the component''s function. Cite/quote all the entity attributes from field specific_attributes_claims,  from field all invention attributes and from field additional_attributes_invention from json ####entity_attributes_rewritten#### without generalising/changing the language of the entity attributes in the explanation. Avoid use of quotations in the explanation.

c) Use the mapping between entities from the field entity_claim and entities from the invention from the field entity_invention from the json ####entity_actions_rewritten#### to explain all the alternative manifestations of the entities in context of ####current invention#### and ####claims####. Do not include the column names or headers in the explanation. 

Do not use the word component or sub-component in the explanation, instead use the component/sub-component name while explaining about it. Also do not use the component/sub-component numbers in the explanation. Do not refer to words like "entity", "entities", "entity action", "crucial", "critical" etc. Just state facts from the inputs provided and avoid use of adjectives in the explanation. Avoid use of quotations in the explanation.
Do not reference claim numbers from field claim_number from json ####entity_actions_rewritten#### in the explanation. Output format: ==introduction_component {{component_num}}===

Step 2: Re-run step 1 till 
a) all the entities are cited with their numbers from field entity_numerical_identifier from json ####entity_actions_rewritten#### in the explanation if available - for example Device (10,40), Object (15, 45).
b) Cite/quote all the entity attributes from field specific_attributes_claims,  from field all invention attributes and from field additional_attributes_invention from json ####entity_attributes_rewritten####.
c) no claim numbers are referenced from field claim_number from json ####entity_actions_rewritten#### 
d) words like "entity", "entities", "entity action", "crucial", "critical" etc are not used in the explanation', NULL, '{"project": ["flowchart_main_element_nums"]}', NULL, NULL, NULL, 'Start', NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'text'),
(410, 2, 53, 'extra_description', 'user', 'Claims:####{{claims}}#### â€¨â€¨Current invention:
####{{invention}}####â€¨â€¨components_entities:
####{{element_explanations}}####â€¨â€¨entity_actions_rewritten:
####{{entity_actions_rewritten}}####â€¨â€¨entity_attributes_rewritten:
####{{entity_attributes_rewritten}}####â€¨', NULL, '{"project": ["claims", "invention", "element_explanations", "entity_actions_rewritten", "entity_attributes_rewritten"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'text'),
(411, 3, 53, 'extra_description', 'user', 'Step 1, Step 2', NULL, NULL, '{"project": ["introduction_method"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, 't', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'text'),
(412, 4, 53, 'extra_description', 'system', 'Step 3: Revise the text ####Introduction_Component#### by using the following guidelines:
a) Do not change the technical language/vocabulary or alter any of the numerical attributes, specific properties (including physical properties such as state, texture, etc. and particular examples), specific quantities details/parameters/definitions 
(b) Remove any adjectives or superlatives that describe the entities and their actions.
(c) Avoid explicit references to any specific claims associated with the component or sub-components.
(d) Exclude patent profanity terms such as "step", "sub-step", "claim_step_actions", "current Invention", "patent", "entity", "action", "entities", "alternative of each entity", "implicit component", "technical write-up" and "entity action", "real-world", "Entity_claims", "Claims", "Claim number", "Entity_claim", "Entity number from claims", etc. and avoid using superlatives like "critical", "most important", "crucial", "important".
(e) Do not include the headers i.e "==Introduction_Component 1==" in the explanation
f) Reference/Quote all the entities for example Device (10,40), Object (15, 45) in the revised explanation.', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'text'),
(413, 5, 53, 'extra_description', 'user', 'Introduction_Component:
####{{introduction_method}}####', NULL, '{"project": ["introduction_method"]}', '{"project": ["extra_description"]}', NULL, NULL, 'End', 't', 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'text'),
(414, 13, 44, 'regenerate_claim', 'system', 'I am providing you the following inputs:
####Claims####
####Current Invention
####claim_entity_actions###  in json format
####invention_entity_actions#### in json format 

Step 7:  Co-relate the entity actions for each claim from field entity_action_claim from json ####claim_entity_actions#### with the corresponding entity actions from field entity_action_invention from json  ####Invention_entity_actions####.  This is basically reverse mapping claim language of the entity actions in claims from text ####Claims#### with the entity actions as given in the text ####Current Invention####. Print the output of this step in json format with title ==entity_actions_rewritten== where each entity from field entity_claim is in a separate row. The json ==entity_actions_rewritten== will contain the following fields: claim_number, entity_claim, entity_numerical_identifier, entities_inv, entity_action_claim, entity_action_invention. Print the json ==entity_actions_rewritten== in this format:
{"entity_actions_rewritten": [ {"claim_number": .., "entity_claim": ..., "entity_numerical_identifier":..., "entities_inv":..., "entity_action_claim":..., "entity_action_invention":...}, ..]}

Step 7.1: Please continue the process of Step 7 for all the claims referenced from field claim_number} from json ####claim_entity_actions####. The json ==entity_actions_rewritten== should include all claims from field claim_number, and each row should contain the claim_number, entity_claim, entity_numerical_identifier, entity_numerical_identifier, entities_inv, entity_action_claim, entity_action_invention. Ensure the response is generated in one go. 
', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(415, 14, 44, 'regenerate_claim', 'user', 'Claims:####{{claims}}####â€¨â€¨â€¨Current Invention:####{{invention}}####â€¨â€¨â€¨claim_entity_actions:####{{claim_entity_actions}}####â€¨â€¨â€¨invention_entity_actions:####{{entity_action}}####', NULL, '{"project": ["claims", "invention", "claim_entity_actions", "entity_action"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(416, 15, 44, 'regenerate_claim', 'user', 'Step 7, Step 7.1', NULL, NULL, '{"project": ["entity_actions_rewritten"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(417, 16, 44, 'regenerate_claim', 'system', 'I am providing you the following inputs to compare:
####invention_entity_actions#### in json format 
####entity_actions_rewritten#### in json format 

Step 8: Identify the details from field entity_action_invention from json ####invention_entity_actions#### that are not correlated with any of the details from field entity_action_claim from json ####entity_actions_rewritten####. Print output in json format with title ==missing_entity_actions==.  The json ==missing_entity_actions== will contain the following fields: entities_inv, entity_action_invention. Print the json ==missing_entity_actions== in this format:
{"missing_entity_actions": [ {"entities_inv": .., "entity_action_invention": ...}, ..]}. Do not print the process in the output.

', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(418, 17, 44, 'regenerate_claim', 'user', 'invention_entity_actions:####{{entity_action}}####â€¨entity_actions_rewritten: ####{{entity_actions_rewritten}}####', NULL, '{"project": ["entity_action", "entity_actions_rewritten"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(419, 18, 44, 'regenerate_claim', 'user', 'Step 8', NULL, NULL, '{"project": ["missing_entity_actions"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(420, 19, 44, 'regenerate_claim', 'system', 'I am providing you the following inputs to co-relate:
####claim_entity_actions#### in json format 
####missing_entity_actions#### in json format 

Step 9: Co-relate the missing entity action from field entity_action invention from  json ####missing_entity_actions#### with the most close entity from field entity_claim from json ####claim_entity_actions#### based on it''s purpose. Print the output in json format with title ==missing_entity_action_rewritten==. The json ==missing_entity_action_rewritten== will contain the following fields: entity_claim, entities_inv and entity_action_invention.
Print the json ==missing_entity_action_rewritten== in this format:
{"missing_entity_action_rewritten": [ {"entity_claim":....,"entities_inv": .., "entity_action_invention": ...}, ..]}. Do not print the process in the output.', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(421, 20, 44, 'regenerate_claim', 'user', 'claim_entity_actions: ####{{claim_entity_actions}}####â€¨missing_entity_actions: ####{{missing_entity_actions}}####', NULL, '{"project": ["claim_entity_actions", "missing_entity_actions"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(422, 21, 44, 'regenerate_claim', 'user', 'Step 9', NULL, NULL, '{"project": ["missing_entity_action_rewritten"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(423, 22, 44, 'regenerate_claim', 'system', 'I am providing you text ####Current Invention#### and ####grouped_entity_invention####. 

Step 7: Identify all the specific numerical attributes, specific properties (including physical properties such as state, texture, etc. and particular examples), specific quantities, every/each alternative and every/each embodiment, every/each use and every applications  from text ####Current invention#### associated with each/every entity from field entities_inv from json ####grouped_entity_invention####. Quote the entire paragraph from text ####Current invention#### that describes the entity actions/attributes/properties/uses. Remember, there maybe multiple paragraphs that describes the entity actions/attributes/properties or uses. Some paragraphs may have the explicit reference to the entity and others may have implicit references to the entity.  While quoting from text ####current invention####, do not change the language and quote as is. Print output in json format with title ==specific_attributes_invention==where each attribute is in a separate row. The json  ==specific_attributes_invention== will contain the following fields: serial_number, specific_attributes_inv, entities_inv.  Print the json ==specific_attributes_invention== in this format:
{"specific_attributes_invention": [ {"serial_number": .., "specific_attributes_inv": ..., "entities_inv":...}, ..]}', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(424, 23, 44, 'regenerate_claim', 'user', 'Current Invention: ####{{invention}}####â€¨
grouped_entity_invention: ####{{grouped_entity_invention}}####', NULL, '{"project": ["invention", "grouped_entity_invention"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(425, 24, 44, 'regenerate_claim', 'user', 'Step 7', NULL, NULL, '{"project": ["specific_attributes_invention"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(426, 25, 44, 'regenerate_claim', 'system', 'I am providing you the following inputs: 
####Current Invention####  as text
####specific_attributes_invention#### as json. 

Step 8: Identify the details from text ####Current Invention#### that are missing from field specific_attributes_inv in json ####specific_attributes_invention#### and include the details in the output.
Print the output of this step in json format with title ==additional_attributes_invention== where each attribute is in a separate row and will contain the field:  additional_attributes_inv. Print the json ==additional_attributes_invention== in this format:
{"additional_attributes_invention": [ {"additional_attributes_inv": ...}, ..]}. Do not print the process in the output.', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(427, 26, 44, 'regenerate_claim', 'user', 'Current Invention: ####{{invention}}####â€¨
specific_attributes_invention: ####{{specific_attributes_invention}}####', NULL, '{"project": ["invention", "specific_attributes_invention"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(428, 27, 44, 'regenerate_claim', 'user', 'Step 8', NULL, NULL, '{"project": ["additional_attributes_invention"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(429, 28, 44, 'regenerate_claim', 'system', 'I am providing you the following inputs: 
####additional_attributes_invention####  as json
####grouped_entity_invention#### as json. 

Step 9: Co-relate each/every additional entity attributes in field additional_attributes_inv from json ####additional_attributes_invention#### with the most appropriate entity from field entities_inv from json ####grouped_entity_invention#### based on the implied use/benefit of the attribute. Print the output of this step in json format with title ==additional_entity_attributes_invention==The json ==additional_entity_attributes_invention== will contain the following fields:serial number, entities_inv,  additional_attributes_inv. Print the json ==additional_entity_attributes_invention== in this format:
{"additional_entity_attributes_invention": [ {"serial_number": .., "entities_inv": ..., "additional_attributes_inv":...}, ..]}. Do not print process in the output.

Step 9.1: Re-run step 9 till each/every additional entity attributes in json ####additional_attributes_invention#### is correlated with the most appropriate entity from field entities_inv from json ####grouped_entity_invention#### based on the implied use/benefit of the attribute. Do not print process in the output.', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(430, 29, 44, 'regenerate_claim', 'user', 'additional_attributes_invention: ####{{additional_attributes_invention}}####â€¨
grouped_entity_invention: ####{{grouped_entity_invention}}####', NULL, '{"project": ["additional_attributes_invention", "grouped_entity_invention"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(431, 30, 44, 'regenerate_claim', 'user', 'Step 9, Step 9.1', NULL, NULL, '{"project": ["additional_entity_attributes_invention"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(432, 31, 440, 'regenerate_claim', 'system', 'I am providing you the following inputs to combine

1)####specific_attributes_invention####   in json format
2)####additional_entity_attributes_invention#### in json format . 


Step 10: Combine all the attributes for all the entities from the field  specific_attributes_inv from json ####specific_attributes_invention#### with all the corresponding attributes from the field additional_attributes_inv from json ####additional_entity_attributes_invention#### into a single field all_invention_attributes without changing the language. Quote all the attributes as is without missing any attribute associated with the entities. Print the output in json format with title ==total_attributes_invention==.
The json ==total_attributes_invention== will contain the following fields: Serial number, entities_inv, all_invention_attributes. Print the json ==total_attributes_invention== in this format:
{""total_attributes_invention"": [ {""serial_number"": .., ""entities_inv"": ..., ""all_invention_attributes"":...}, ..]}. Do not print process in the output.', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(433, 32, 440, 'regenerate_claim', 'user', 'specific_attributes_invention: ####{{specific_attributes_invention}}####â€¨
additional_entity_attributes_invention: ####{{additional_entity_attributes_invention}}####', NULL, '{"project": ["specific_attributes_invention", "additional_entity_attributes_invention"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(434, 33, 440, 'regenerate_claim', 'user', 'Step 10', NULL, NULL, '{"project": ["total_attributes_invention"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(435, 34, 44, 'regenerate_claim', 'system', 'I am providing you the following inputs:
####Claims####
####Current Invention
####specific_attributes_claims#### in json format
####total_attributes_invention#### in json format
to perform the following steps. 

Step 7: Co-relate all the specific attributes for each claim from field specific_attributes_claim from json ####specific_attributes_claims####  with the corresponding related specific attributes from field all_invention_attributes from json  ####total_attributes_invention####.  

Print the output of this step in json format with title ==entity_attributes_rewritten== where each entity is in a separate row. The json ==entity_attributes_rewritten== will contain the following fields: entities_claim, entities_inv, specific_attributes_claims, all_invention_attributes, Claim_numbers. Print the json ==entity_attributes_rewritten== in this format:
{"entity_attributes_rewritten": [ {"entities_claim": .., "entities_inv": ..., "specific_attributes_claims":..., "all_invention_attributes": ..., "Claim_numbers":...}, ..]}. Do not print the process in the output.

Step 7.1: Please continue the process of Step 7 for all the claims referenced from field  claim_number from json ####specific_attributes_claims#### in the output. The json ==entity_attributes_rewritten== should include all claims, and each row should contain the entities_claim, entities_inv, specific_attributes_claims,  all_invention_attributes, Claim_numbers. Ensure the response is generated in one go.', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(436, 35, 44, 'regenerate_claim', 'user', 'Claims: ####{{claims}}####
Current Invention: ####{{invention}}####
specific_attributes_claims: ####{{claim_specific_attributes}}####
total_attributes_invention: ####{{specific_attributes}}####', NULL, '{"project": ["claims", "invention", "claim_specific_attributes", "specific_attributes"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(437, 36, 44, 'regenerate_claim', 'user', 'Step 7, Step 7.1', NULL, NULL, '{"project": ["entity_attributes_rewritten"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(438, 37, 44, 'regenerate_claim', 'system', 'I am providing you the following inputs:
####entity_attributes_rewritten#### in json format
####total_attributes_invention#### in json format
to perform the following steps. 

Step 8: Identify and quote all the details from field all_invention_attributes from json ####total_attributes_invention#### that are not correlated with any of the details from field  specific_attributes_claims in json ####entity_attributes_rewritten#### and include all the details in the output without changing the language.
Print the output of this step in json format with title ==additional_entity_attributes_rewritten== where entities_inv is in a separate row. The json ==additional_entity_attributes_rewritten== will contain the following fields: entities_inv,  additional_attributes_invention. Print the json ==additional_entity_attributes_rewritten== in this format:
{"additional_entity_attributes_rewritten": [ { "entities_inv": ..., "additional_attributes_invention":...}, ..]}. Do not print process in the output.', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(439, 38, 44, 'regenerate_claim', 'user', 'entity_attributes_rewritten: ####{{entity_attributes_rewritten}}####
total_attributes_invention: ####{{total_attributes_invention}}####', NULL, '{"project": ["entity_attributes_rewritten", "total_attributes_invention"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(440, 39, 44, 'regenerate_claim', 'user', 'Step 8', NULL, NULL, '{"project": ["additional_entity_attributes_rewritten"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(441, 40, 44, 'regenerate_claim', 'system', 'I am providing you the following inputs:
####specific_attributes_claims#### in json format
####additional_entity_attributes_rewritten#### in json format
to perform the following steps. 


Step 9: Co-relate each/every additional entity attributes identified in json ####additional_entity_attributes_rewritten#### with the most appropriate entity from field entities_claim from json ####specific_attributes_claims#### based on the implied use/benefit of the attribute. Print the output of this step in json format with title ==missing_entity_attributes_rewritten== where each entity from field entities_inv is in a separate row. The json ==missing_entity_attributes_rewritten== will contain the following fields: entities_claim, entities_inv,  additional_attributes_invention Print the json ==missing_entity_attributes_rewritten== in this format:
{"missing_entity_attributes_rewritten": [ { "entities_claim":..., "entities_inv": ..., "additional_attributes_invention":...}, ..]}. Do not print process in the output.

Step 9.1: Re-run step 9 till each/every additional entity attributes identified in json ####additional_entity_attributes_rewritten#### is correlated with the most appropriate entity from field entities_claim from json ####specific_attributes_claims#### based on the implied use/benefit of the attribute. Do not print process in the output.
', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(442, 41, 44, 'regenerate_claim', 'user', 'specific_attributes_claims: ####{{claim_specific_attributes}}####
additional_entity_attributes_rewritten: ####{{additional_entity_attributes_rewritten}}####', NULL, '{"project": ["claim_specific_attributes", "additional_entity_attributes_rewritten"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(443, 42, 44, 'regenerate_claim', 'user', 'Step 9, Step 9.1', NULL, NULL, '{"project": ["missing_entity_attributes_rewritten"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(444, 43, 440, 'regenerate_claim', 'system', 'I am providing you the following inputs to combine

1)####entity_attributes_rewritten####   in json format
2)####missing_entity_attributes_rewritten####. 

Step 10: Both json ####entity_attributes_rewritten#### and json ####missing_entity_attributes_rewritten#### have a common field entities_claim. 
Use this common field entities_claim to do the following:
a) Combine the field entities_inv from json ####entity_attributes_rewritten#### and json ####missing_entity_attributes_rewritten#### and
b)Combine and quote all the attributes from field additional_attributes_invention with the field all_invention_attributes from json ####entity_attributes_rewritten#### and json ####missing_entity_attributes_rewritten####. Print the output in json format with title ==total_entity_attributes_rewritten==.
The json ==total_entity_attributes_rewritten== contains the following fields: Serial number, entities_claim, entities_inv, specific_attributes_claims, all_invention_attributes, additional_attributes_invention.  Print the json ==total_entity_attributes_rewritten== in this format:
{"total_entity_attributes_rewritten": [ {"Serial number":..., "entities_claim": .., "entities_inv":..., "specific_attributes_claims":..., "all_invention_attributes": ..., "additional_attributes_invention":...}, ..]}. Do not print the process in the output.', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(445, 44, 440, 'regenerate_claim', 'user', 'entity_attributes_rewritten: ####{{entity_attributes_rewritten}}####
missing_entity_attributes_rewritten: ####{{missing_entity_attributes_rewritten}}####', NULL, '{"project": ["entity_attributes_rewritten", "missing_entity_attributes_rewritten"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(446, 45, 440, 'regenerate_claim', 'user', 'Step 10', NULL, NULL, '{"project": ["total_entity_attributes_rewritten"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(447, 46, 44, 'regenerate_claim', 'system', 'I am giving you text ####Claims#### to determine type of claims.

Step 1:  Identify all the respective method/system/other claims from the text ####Claims####. All the system claims will be classified as system claims, all the method claims are classified under method claims and all the device/apparatus/product/computer program product/composition/formulation/machine claims go into others. The output of the claim type should be flagged either as true or as False
Print the output in json format with title ==claim_types==. The json ==claim_types== will contain the following field  claim_type (system - True/False, method - True/False, other - True/False). Print the json ==claim_types== in this format:
{"claim_types": {"method": ..., "system": ..., "other": ..}}. Do not print the process in the output
', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(448, 47, 44, 'regenerate_claim', 'user', 'Claims: {{claims}}', NULL, '{"project": ["claims"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(449, 48, 44, 'regenerate_claim', 'user', 'Step 1', NULL, NULL, '{"project": ["claim_types"]}', NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'json'),
(450, 1, 50, 'claim_invention', 'system', 'I have provided you a set of patent claims in text ####claims####. 

Step 1: Please write an invention input that covers all the details from all the claims from text ####claims#### explicitly in a paragraph format. It''s recommended to start with the  independent claim and a detailed summary of it. Independent claim summary must be followed by a detailed explanation of each dependent claim that depends on that independent claim. This process should be repeated till all the embodiments from all the independent and all the dependent claims are covered in the invention input. It is critical to ensure that the invention input covers all the embodiments from all the claims from text ####claims#### in the output. Do not repeat or include claim numbers in the output.Output format: current invention:', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(451, 2, 50, 'claim_invention', 'user', 'Claims:
####{{claims}}####', NULL, '{"project": ["claims"]}', '{"project": ["claims"]}', NULL, NULL, NULL, 't', 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'text');


UPDATE "prompt"."prompt" SET "is_selected"=FALSE WHERE "prompt_id"=21;

DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id"=329 OR "prompt_seq_id"=330 OR "prompt_seq_id"=331 OR "prompt_seq_id"=332 OR "prompt_seq_id"=333 OR "prompt_seq_id"=334 OR "prompt_seq_id"=335 OR "prompt_seq_id"=336 OR "prompt_seq_id"=337 OR "prompt_seq_id"=338 OR "prompt_seq_id"=339 OR "prompt_seq_id"=340 OR "prompt_seq_id"=341 OR "prompt_seq_id"=342 OR "prompt_seq_id"=343 OR "prompt_seq_id"=344 OR "prompt_seq_id"=345 OR "prompt_seq_id"=346 OR "prompt_seq_id"=347 OR "prompt_seq_id"=348 OR "prompt_seq_id"=349 OR "prompt_seq_id"=350 OR "prompt_seq_id"=432 OR "prompt_seq_id"=433 OR "prompt_seq_id"=434 OR "prompt_seq_id"=444 OR "prompt_seq_id"=445 OR "prompt_seq_id"=446;



DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id"=404 OR "prompt_seq_id"=405 OR "prompt_seq_id"=406 OR "prompt_seq_id"=407 OR "prompt_seq_id"=408 OR "prompt_seq_id"=409 OR "prompt_seq_id"=410 OR "prompt_seq_id"=411 OR "prompt_seq_id"=412 OR "prompt_seq_id"=413;


INSERT INTO "prompt"."prompt_seq"("prompt_seq_id","seq","prompt_id","short_name","role","instructions","fun_def","inputs","outputs","created_at","modified_at","repeat","is_stream","model","multicalls","max_tokens","prompt_actions","claim_nums","decision_step","step_description","revised_step_description","claim_component_entities","claim_component_actions","skip_append","output_format")
VALUES
(404,1,52,E'extra_diagram_common',E'system',E'I have provided following inputs to perform steps 5 to 7\n####Claims####\n####Current Invention####\n####entity_actions_rewritten####in json format\n\n\nStep 5:  Identify the respective apparatus/device/composition/formulation/product/machine independent claims and claims that are dependent on them from the text ####Claims####. Output of this step in the following format: ==apparatus/device/composition/formulation/product/machine_Claims== Claim numbers\nPrint the json ==apparatus/device/composition/formulation/product/machine_Claims== in this format:\n{"claim_nums":{"apparatus_claims": [1, ...],"device_claims": [1, ...],"composition_claims": [1, ...],"formulation_claims": [1, ...],"product_claims": [1, ...],"machine_claims": [1, ...]}}â€¨\n\nStep 5.1: Please continue the process of Step 5 to identify all the apparatus/device/composition/formulation/product/machine claims (both Independent and dependent)  are identified. Do not print output for this step.\n\nStep 6: a) Co-relate the identified claims from field claim_numbers from json claim_type with the field claim_number from json #### entity_actions_rewritten####. \nb) After co-relation, only for the co-related claim numbers from field claim_number from json #### entity_actions_rewritten#### identify all the entities from field entity_claim and entities_inv from json #### entity_actions_rewritten####, \nC) Then group all the identified entities from field entity_claim and from field entities_inv from json  #### entity_actions_rewritten#### into logical groups. The logical groups must be made on the basis similarity/commonality in entity actions from either a) field entity_action_claim or from b) field entity_action_invention. These logical groups should be grouped such that when working together they manifest the invention from text ####Claims#### and text ####Current invention####. Ensure the logical groups are such that the entities from entitiy_claim and entities_inv are represented/written/referenced only in one row/sr. no. Ensure that entities from both field entity_claim and from field entities_inv are quoted/cited in the column grouped entities in the output. \nPrint the json ==grouped entities== in this format: {"grouped entities": [ { "Sr.no":...., "grouped entities":[.,.,.,], "entity actions": ...,  "entity actions purpose":..., "Claim number":....}, ..]}\n\n\nStep 7: Re-Group all the entities from field  Grouped Entities from json ==grouped entities== into logical groups such that all redundancies/overlaps are avoided. The logical groups must be regrouped on the basis similarity/commonality in entity actions from  field Entity Actions from json ==grouped entities==. These logical groups should be re-grouped such that when working together they manifest the invention from text ####Claims#### and text ####Current invention####. Ensure the logical groups are such that all the entities from field Grouped Entities are represented/written/referenced only in one row/sr. no . Ensure that entities from Grouped Entities are quoted/cited in the column Re-grouped Entities in the output.Print the json ==components_entities== in this format: {"components_entities": { "Component Number":...., "re-grouped entities":[.,.,.,], "entity actions": ...,  "entity actions purpose":...}, ..]}\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(405,2,52,E'extra_diagram_common',E'user',E'Claims:####{{claims}}#### â€¨â€¨Current invention:\n####{{invention}}####â€¨â€¨entity_actions_rewritten:\n####{{entity_actions_rewritten}}####',NULL,E'{"project": ["claims", "invention", "entity_actions_rewritten"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(406,3,52,E'extra_diagram_common',E'user',E'Step 5, Step 5.1',NULL,NULL,E'{"project": ["extra_diagram_claim_nums"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(407,4,52,E'extra_diagram_common',E'user',E'Step 6',NULL,NULL,E'{"project": ["claim_dependency"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(408,5,52,E'extra_diagram_common',E'user',E'Step 7',NULL,NULL,E'{"project": ["extra_diagram_common"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(409,1,53,E'extra_description',E'system',E'I am giving you the following inputs to write a detailed explanation for the component and its sub-components:\n1. ####Claims####\n2. ####Current invention####\n3. ####components_entities#### in table format\n4. ####entity_attributes_rewritten#### in json format\n\nStep 1: Choose the component number 1 from table ####components_entities#### for the explanation. \nThe explanation should be written by following the instructions in a, b and c below:\n\na) Define and explain all the entities for the chosen component number from field Re-grouped Entities from table ####components_entities####. For the definition, Co-relate the entities from field Re-grouped Entities from table ####components_entities#### with the entities from field entities_claim and from field entities_inv from json ####entity_attributes_rewritten#### to identify all their cited attributes. After making the co-relation do the following: Quote/cite all the attributes for all the entities without changing the technical details/language from field 1) specific_attributes_claims and 2) from field all invention attributes and 3) from field additional_attributes_invention and explain how they contribute to the invention from text ####Claims#### and text ####Current invention####. Avoid use of quotations in the explanation.\n\nDo not refer to words like "entity", "entities", "entity action", "crucial", "critical" etc. Just quote facts from the inputs provided and avoid use of adjectives in the explanation. Avoid use of quotations in the explanation.\nOutput format: ==introduction component number 1===\n\nStep 2: Re-run step 1 till \na) Quote/cite all the attributes for all the entities without changing the technical details/language from field 1) specific_attributes_claims and 2) from field all invention attributes and 3) from field additional_attributes_invention.\nb) no claim numbers are referenced from field claim_number from json ####entity_actions_rewritten#### \nc) words like "entity", "entities", "entity action", "crucial", "critical" etc are not used in the explanation\n',NULL,E'{"project": ["flowchart_main_element_nums"]}',NULL,NULL,NULL,E'Start',NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(410,2,53,E'extra_description',E'user',E'Claims:####{{claims}}#### â€¨â€¨Current invention:\n####{{invention}}####â€¨â€¨components_entities:\n####{{element_explanations}}####â€¨â€¨entity_attributes_rewritten:\n####{{entity_attributes_rewritten}}####â€¨',NULL,E'{"project": ["claims", "invention", "element_explanations", "entity_attributes_rewritten"]}',NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(411,3,53,E'extra_description',E'user',E'Step 1, Step 2',NULL,NULL,E'{"project": ["introduction_method"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,TRUE,E'text'),
(412,4,53,E'extra_description',E'system',E'Step 3: Revise the text ####Introduction_Component#### by using the following guidelines:\na) Do not change the technical language/vocabulary or alter any of the numerical attributes, specific properties (including physical properties such as state, texture, etc. and particular examples), specific quantities details/parameters/definitions \n(b) Remove any adjectives or superlatives that describe the entities and their actions.\n(c) Avoid explicit references to any specific claims associated with the component or sub-components.\n(d) Exclude patent profanity terms such as "step", "sub-step", "claim_step_actions", "current Invention", "patent", "entity", "action", "entities", "alternative of each entity", "implicit component", "technical write-up" and "entity action", "real-world", "Entity_claims", "Claims", "Claim number", "Entity_claim", "Entity number from claims", etc. and avoid using superlatives like "critical", "most important", "crucial", "important".\n(e) Do not include the headers i.e "==Introduction_Component 1==" in the explanation\nf) Reference/Quote all the entities for example Device (10,40), Object (15, 45) in the revised explanation.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),

(413,5,53,E'extra_description',E'user',E'Introduction_Component:\n####{{introduction_method}}####',NULL,E'{"project": ["introduction_method"]}',E'{"project": ["extra_description"]}',NULL,NULL,E'End',TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text');


DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id"=360 OR "prompt_seq_id"=364 OR "prompt_seq_id"=378 OR "prompt_seq_id"=381 OR "prompt_seq_id"=382 OR "prompt_seq_id"=383 OR "prompt_seq_id"=386 OR "prompt_seq_id"=387 OR "prompt_seq_id"=388;

INSERT INTO "prompt"."prompt_seq"("prompt_seq_id","seq","prompt_id","short_name","role","instructions","fun_def","inputs","outputs","created_at","modified_at","repeat","is_stream","model","multicalls","max_tokens","prompt_actions","claim_nums","decision_step","step_description","revised_step_description","claim_component_entities","claim_component_actions","skip_append","output_format")
VALUES
(360,1,45,E'flowchart_common',E'system',E'I am providing you the following inputs to perform steps 5 to 10. \n####Claims####\n####Current Invention####\n####entity_actions_rewritten####in json format\n\nStep 5: An independent claim does not reference any other claim. However, a dependent claim always references another claim on which it depends. Using the above logic do the following: \na) Identify only the method independent and dependent claims from the text ####Claims####. \nb) Map the dependency between the independent claim and/or all the dependent claims that directly or indirectly reference it in the same claim group. Also, map the dependency between the dependent claims in the same claim group. For instance, if claim 1 is independent and claims 2 and 3 are directly dependent on claim 1, they should be grouped in the same claim group. If there are further dependent claims such as claim 4 that depend on dependent claim 3, and dependent claim 5 that depends on dependent claim 4, they should also be included in the group of claim 1, as they indirectly reference it. \nc) No two independent claims can be grouped in the same claim group. \nPrint the output in a json format. \nPrint the json ==claim_groups== in this format:\n{"claim_groups": [ { "claims_group_number":..., "independent_claim/dependent_claim": ...,  "claim_type":..., "dependent_claim":....}, ..]}. Ensure no dependent claim is considered as a distinct claim_group. Do not print the process in the output.\n\nStep 5.1: Please continue the process of Step 5 to identify all the method claims (both Independent and dependent). Do not print output for this step. \n\nStep 6:  For the claims identified from the output of step 5, use the entity actions from field entity_action_claim from json ####entity_actions_rewritten#### to identify which dependent claim depends on which entity action of the independent claim or the entity action in other dependent claims in context of text ####Claims####. Provide the mapping between the dependent claims and the claim entity actions of the independent claim or the entity actions of other dependent claims on which it depends. Output format: Dependent claim --> Independent claim --> reason etc. \nPrint the json ==claim_dependency== in this format:\n{"claim_dependency": [{"claims_group_number":..., "dependent_claim": ..., "independent_claim": ..., "reason": ...}, ...]}\n\nStep 7: For each claim group from field claims_group_number from json ==claim_groups==, use the output of Step 6 to identify all the main steps/entity actions that occur in a logical sequence to accomplish the method in context of all the claims from Step 5 and the ####current invention####. Using the output of Step 6, for each main step/entity action, identify the sub-steps/parallel steps/entity actions that are optional/additional details for the main steps to accomplish the method in context of claims from json ==claim_groups==. Ensure all the claims for each claim group from json ==claim_groups== are referred in Step 7 output.  For each claim group use a unique numbering series. Number the step and sub-step, in an even numbering series with increment of 2 for each step, as follows - if step number is 100, it\'s sub-step number will be 100-a, 100-b, for step 102 the sub-step will be 102-a, 102-b etc. Print the output in a json format with title: ==Steps_sub-steps== where every step/ sub-step is in a separate row. The output json ==Steps_sub-steps== will contain the following fields: claims_group_number, Step/Sub-Step type, Step/Sub-Step number, explanation quote from text ####claims####, claim number, entity_claim(entity_numerical_identifier) and entities_inv.\nPrint the json ==Steps_sub-steps== in this format:\n{"Steps_sub-steps": [ { "claims_group_number":..., "Step/Sub-Step type":..., "Step/Sub-Step number": ..., "explanation quote from text ####claims####":..., "claim number":..., "entity_claim":..., "entity_numerical_identifier":..., "entities_inv":...}, ..]}. Do not print process in the output.\n\nStep 7.1: Ensure all the claims for each claim group from json ==claim_groups== are referred in Step 7 output.\n\nStep 8: Rewrite step 7 by doing the following:\na) keep the step and sub-step numbers the same\nb) Re-write the explanation from "explanation quote from text ####Claims####" in a concise form without changing the technical language/vocabulary or alter any of the numerical attributes, specific properties (including physical properties such as state, texture, etc. and particular examples), specific quantities details/parameters/definitions in context of text ####Claims####.\nPrint the output of this step in json format with title ==Steps_sub-steps Rewrite== The json ==Steps_sub-steps Rewrite== will have the following fieds: claims_group_number, Step/Sub-Step number, explanation, claim number. \nPrint the json ==Steps_sub-steps Rewrite== in this format:\n{"Steps_sub-steps Rewrite": [ {"claims_group_number":..., "Step/Sub-Step type":..., "Step/Sub-Step number":..., "explanation": ..., "claim number":...}, ..]}. Do not print process in the output.\n\nStep 9: For each claim group from field claims_group_number from json ==claim_dependency==, identify all the decision making steps for each claim from ==Steps_sub-steps Rewrite==. Print the output of this step in json format with title ==decision_steps==. Print the json ==decision_steps== in this format:\n{"decision_steps": [ {"claims_group_number":..., "Decision step":...}, ..]}. Do not print process in the output.\n\nStep 10: Identity and list all the entities from field \'entities_inv\' from json ####entity_actions_rewritten#### that are not directly mentioned in the claims but are related to the broader context of the invention or the application of the claimed method. Quote them from field \'entities_inv\' as is from json ####entity_actions_rewritten####. Print output in json format with title ==additional_entities_to_describe==. The json ==additional_entities_to_describe==will have the field entities_inv_addl. Print the json ==additional_entities_to_describe== in this format:\n{"additional_entities_to_describe": [ { "entities_inv_addl":...}, ..]}. Do not print process in the output.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,596,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(364,5,45,E'flowchart_common',E'user',E'Step 7, Step 7.1',NULL,NULL,E'{"project": ["Steps_sub-steps"]}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(378,1,47,E'flowchart_diagram',E'system',E'Step 15: For each claim group from field claims_group_number from json ==Steps_sub-steps Rewrite==, provide the mermaid script/syntax for all steps and sub-steps/parallel steps using ==Steps_sub-steps Rewrite== by doing the following: For the mermaid script/syntax, understand the output of all steps and sub-steps/parallel steps from ==Steps_sub-steps Rewrite== in context of ==Decision_step==. ==Decision_step== identifies the decision making step. Using all the details of all the steps and sub-steps/parallel steps from ==Steps_sub-steps Rewrite== and decision making step from ==Decision_step==, identify nodes, conditions (if any), and different links/paths. Do not print output for this step.\n\nStep 16: Choose the layout for output from Step 15. Use graph TB for a top-down layout or graph LR for a left-right layout. Do not print output for this step.\n\nStep 17: Define the nodes for output from Step 15. Use square brackets for regular nodes e.g., 100["Node A"].  Use curly braces for decision nodes e.g., 102{"Condition B"}. Treat "If" condition nodes as decision nodes. Do not print output for this step.\n\nStep 18: For the Mermaid script/syntax from step 15 define the links/paths between nodes from Step 17 using -->. To add text to the links/paths, use |Link text|. For multiple links/paths between nodes, define each link separately. For decision making link/path, use appropriate messages to handle yes/no cases. For example, a decision node should have two separate links/paths with messages as "yes" and "no". Do not print output for this step.\n\nStep 19: For each claim group from field claims_group_number from json ==Steps_sub-steps Rewrite==, review and adjust the Mermaid script/syntax as needed. Refer the example given below for following the style of the mermaid. Print the output for this step.\n\nmermaid\nCopy code\ngraph TB\n100["Determine an initial eye strain context for a user wearing a VR headset."]\n102{"Recognize a User Interface (UI) adaptation."}\n104["Establish the intensity of the UI adaptation."]\n106["Display modified VR content by applying the identified UI adaptation."]\n108["Assess an updated eye strain context."]\n110{"If the updated eye strain context indicates a decrease in eye strain."}\n112["Modify the priority weight for the UI adaptation."]\n114["Refresh a user\'s profile with the UI adaptation, its intensity, and the modified priority weight."]\n100 --> 102\n102 -- Yes --> 104\n104 --> 106\n106 --> 108\n108 --> 110\n110 -- Yes --> 112\n112 --> 114\n110 -- No --> 102\n\n\nStep 20:  Confirm that the yes and no condition from the decision making step from ==Decision_step== has already been considered in the output of Step 19. If no, then re-generate the output from Step 19. Do not print output for this step.\n\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(381,4,47,E'flowchart_diagram',E'user',E'Step 22: Use the output from step 19 to generate one mermaid for each claim group. For each claim group, the mermaid will contain all the steps without the sub-steps, which together encompass the method in context of ==Steps_sub-steps Rewrite== and ==Decision_step==. Steps can be identified from their whole number whereas sub-steps can be identified by the whole number hyphenated with an alphabet. Output in json format â€¨{"mermaid": "Claims_group number":..., "mermaid script/syntax..."}\n\nSample Mermaid:\ngraph TB\n100["Determine an initial eye strain context for a user wearing a VR headset."]\n102{"Recognize a User Interface (UI) adaptation."}\n104["Establish the intensity of the UI adaptation."]\n106["Display modified VR content by applying the identified UI adaptation."]\n108["Assess an updated eye strain context."]\n110{"If the updated eye strain context indicates a decrease in eye strain."}\n112["Modify the priority weight for the UI adaptation."]\n114["Refresh a user\'s profile with the UI adaptation, its intensity, and the modified priority weight."]\n100 --> 102\n102 -- Yes --> 104\n104 --> 106\n106 --> 108\n108 --> 110\n110 -- Yes --> 112\n112 --> 114\n110 -- No --> 102',NULL,NULL,E'{"project": ["mermaid"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(382,5,47,E'flowchart_diagram',E'user',E'Step 25: Split the mermaids from Step 19, for each claim group, into multiple mermaids based on the sub-steps grouping where each sub-step group contains a step and it\'s respective sub-step from ==Steps_sub-steps Rewrite==. For any step with sub-step from ==Steps_sub-steps Rewrite==, ensure that the mermaid is made only for the step and all it\'s sub-steps. Using ==Steps_sub-steps Rewrite==, avoid mermaids in Step 25 for steps that do not contain sub-steps. Ensure each of the mermaid splits are meaningful in context of ==Steps_sub-steps Rewrite== and ==Decision_step==. Print the output in json format with title ==mermaids== with mermaids as array. Do not repeat the step in the output. \n\nSample Mermaid:\ngraph TB\n100["Determine an initial eye strain context for a user wearing a VR headset."]\n102{"Recognize a User Interface (UI) adaptation."}\n104["Establish the intensity of the UI adaptation."]\n106["Display modified VR content by applying the identified UI adaptation."]\n108["Assess an updated eye strain context."]\n110{"If the updated eye strain context indicates a decrease in eye strain."}\n112["Modify the priority weight for the UI adaptation."]\n114["Refresh a user\'s profile with the UI adaptation, its intensity, and the modified priority weight."]\n100 --> 102\n102 -- Yes --> 104\n104 --> 106\n106 --> 108\n108 --> 110\n110 -- Yes --> 112\n112 --> 114\n110 -- No --> 102',NULL,NULL,E'{"project": ["mermaids"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(383,6,47,E'flowchart_diagram',E'system',E'Step 23: Using the output of step 22, identify the goal of the steps for each claim group in fewer than 20 words. Output in json format â€¨{"Goal_claim_group": "Claims_group number":..., "goal..."}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(386,9,47,E'flowchart_diagram',E'user',E'Step 24: The output of step 23 is for a flow chart named as figure 1. Generate a brief description of the figure for each claim group from json Goal_claim_group in 1 line without using the word claim group. Output in json format {"breif_description": ...}\nConsider the writing style of sample given below:\n\nFIG. 1 illustrates, in a flowchart, operations for using a user profile in accordance with certain embodiments. \n\nBrief Description;',NULL,NULL,E'{"project": ["breif_description"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(387,10,47,E'flowchart_diagram',E'user',E'Step 26: Using the {mermaids} , identify the goal of the steps for each mermaid for each claim group separately in fewer than 20 words. Output in json format â€¨{"Goal_claim_group_mermaids": "Claims_group number":..., "mermaid number":..., "goal..."}',NULL,NULL,E'{"project": []}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(388,11,47,E'flowchart_diagram',E'user',E'Step 27: The output of step 26 is for a flow chart named as figure 1A, 1B, 1C and so on. Generate a brief description of each figure for each claim group from json Goal_claim_group_mermaids in 1 line without using the word claim group. Output in json format with field "breif_descriptions".â€¨ Print the output for this step in json format:\n{"breif_descriptions": [{"title": "...", "brief_description": ...}]}â€¨\n\nConsider the writing style of sample given below:\n\nFIG. 1 illustrates, in a flowchart, operations for using a user profile in accordance with certain embodiments. \n\nBrief Description;',NULL,NULL,E'{"project": ["breif_descriptions"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json');

DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id"=351 OR "prompt_seq_id"=395 OR "prompt_seq_id"=398 OR "prompt_seq_id"=399 OR "prompt_seq_id"=400 OR "prompt_seq_id"=401 OR "prompt_seq_id"=402 OR "prompt_seq_id"=403;

INSERT INTO "prompt"."prompt_seq"("prompt_seq_id","seq","prompt_id","short_name","role","instructions","fun_def","inputs","outputs","created_at","modified_at","repeat","is_stream","model","multicalls","max_tokens","skip_append","prompt_actions","claim_nums","decision_step","step_description","revised_step_description","claim_component_entities","claim_component_actions","output_format")
VALUES
(351,1,46,E'block_diagram_common',E'system',E'I have provided following inputs to perform steps 5 to 11\n####Claims####\n####Current Invention####\n####entity_actions_rewritten####in json format\n\n\nStep 5: An independent claim does not reference any other claim. However, a dependent claim always references another claim on which it depends. Using the above logic do the following: \na) Identify all the system type  independent and dependent claims from the text ####Claims####. \nb) Map the dependency between the independent claim and/or all the dependent claims that directly or indirectly reference it in the same claim group. Also, map the dependency between the dependent claims in the same claim group. For instance, if claim 1 is independent and claims 2 and 3 are directly dependent on claim 1, they should be grouped in the same claim group. If there are further dependent claims such as claim 4 that depend on dependent claim 3, and dependent claim 5 that depends on dependent claim 4, they should also be included in the group of claim 1, as they indirectly reference it. Even if there is no dependent claim for an independent claim it should be classified into a separate group.\nc) No two independent claims can be grouped in the same claim group. \nd) Only the system type claims must be referenced in the output.\nPrint the output in a json format. \nPrint the json ==claim_groups== in this format:\n{"claim_groups": [ { "claims_group_number":..., "independent_claim/dependent_claim": ...,  "claim_type":..., "dependent_claim":....}, ..]}. Ensure no dependent claim is considered as a distinct claim_group. Do not print the process in the output.\n\nStep 5.1: Rerun the step till each system claim(independent and/or dependent) is referenced in json claim_groups. Do not print output for this step.\n\n\nStep 6:  For the claims identified from ==system_Claims==, use the entity actions from field {entity_action_claim} from json ####entity_actions_rewritten#### to identify which dependent claim depends on which entity action of the independent claim or the entity action in other dependent claims in context of text ####Claims####. Provide the mapping between the dependent claims and the claim entity actions of the independent claim or the entity actions of other dependent claims on which it depends. Output format: Dependent claim --> Independent claim --> reason etc. \nPrint the json ==claim_dependency== in this format:\n{"claim_dependency": [{"claims_group_number":..., "dependent_claim": ..., "independent_claim": ..., "reason": ...}, ...]}â€¨\n\nStep 7: Identify and name the system that encompasses the specific entity actions associated with ####current invention#### from field entity action_invention from json ####entity_actions_rewritten#### and all the claims from ==system_Claims==. Output format: ==System==\nPrint the json ==System== in this format:\n{"system": ...}â€¨\n\nStep 8: a) Co-relate the identified claims for each claim group from field independent_claim, from field dependent_claim from json claim_groups with the field claim_number from json ####entity_actions_rewritten####.\nb) Identify all the entities from field entity_claim and entities_inv from json #### entity_actions_rewritten#### for the co-related claim numbers for each claim group.\nc) For each claim group, group all the identified entities from field entity_claim and from field entities_inv from json  #### entity_actions_rewritten#### into components and sub-components using overlaps/commonalities in their entity action from either 1) from field entity_action_claim or from 2) field entity_action_invention from json ####entity_actions_rewritten#### and from output of step 6. These components and sub-components should be grouped such that when working together they manifest the invention from text ####Claims#### and text ####Current invention####. \nd) Ensure that entities from both field entity_claim and from field entities_inv are quoted/cited in the output. Ensure all the claims (both independent and dependent claims) identified for each claim group in the output of step 5 are referenced in the output. Print the output in json format with title ==component_entities== where every component/ sub-component is in a separate row. The json ==component_entities== will be in this format:\n{"component_entities": [ {"claims_group_number":...., "component/sub-component type":..., "component/sub-component name ": ...,  "entity_claim":...., "entity_numerical_identifier":..., "entities_inv":..., "claim numbers":...}, ..]}. Do not print process in the output.\n\nStep 8.1 - Ensure that entities from both field entity_claim and from field entities_inv are quoted/cited in the column grouped entities in the output. Ensure all the claims (both independent and dependent claims) identified in each claim group in the output of step 5 are referenced in the output.\n\nStep 9: For all the entities from the field entity_claim from JSON ####entity_actions_rewritten####, verify that the field entity_numerical_identifier is empty/null/does not have any value. If this condition is satisfied for every entity, indicating that no entity has a numerical identifier, then proceed to Steps 10 and 11. If any entity has a numerical identifier, do not proceed further and provide an appropriate message indicating that the condition is not met. Output in json format with fields \nexp - explain the condition\nflag - true/false based on is the condition.â€¨Output json in the below format: {"check": {"exp": ..., "flag": ...}}â€¨\n\nStep 10 : Check the naming of components for each claim group from field claims_group_number from Step 8 to determine which components are named like method components. Re-name only the components and sub-components from output of Step 8 to sound like system components/parts of a system if they sound like method components. When renaming, ensure the names are small/pithy/catchy titles with at most 2-5 words. Ensure the new names are unique and capture the essence of the component and sub-component entity action as mapped in output of Step 8. Do not number the components in this output. Print the output in json format with title ==renamed_component_entities==. The json ==renamed_component_entities==will be in this format:\n{"renamed_component_entities": [ {"claims_group_number":...., "Component/Sub-component":..., "Renaming required(Y/N)": ..., "Renamed Component/Sub-component":...}, ..]}. Do not print process in the output.\n\nStep 11: Number the system, component and sub-component from field  Component/Sub-component for each claim group from json ==renamed_component_entities==, in an unique numbering series with increment of 2 for each component as follows - if the system is numbered 500, the component should be numbered 502 and it\'s sub-component should be numbered 502-a, 502-b etc. The next component will be numbered 504 and itâ€™s sub-component will be numbered 504-a, 504-b etc. Print the output json format with title ==component_sub-component==. The json ==component_sub-component== will contain following fields: Component type - system/component/sub-component, system/component/sub-component number,  system/component/sub-component name, explanation, entity_claim, entities_inv, claim numbers. Print the json ==component_sub-component== in this format:\n{"component_sub-component": [{"claims_group_number":...., "Component type - system/component/sub-component":..., "system/component/sub-component number": "...", "system/component/sub-component name":..., "explanation":..., "entity_claim":..., "entities_inv":..., "claim numbers":...}, ..]}. Do not print process in the output.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(395,1,51,E'block_diagram',E'system',E'Step 16: Provide the mermaid script/syntax for each claim group from json component_sub-component. Do not print output for this step.\n\nStep 17: Choose the layout for output from step 16. Use graph TB for a top-down layout or graph LR for a left-right layout. Do not print output for this step.\n\nStep 18: Define the nodes for each claim group for the output from step 16. Use square brackets for regular nodes (e.g., 200["Host System"]). Do not print output for this step.\n\nStep 19: For the Mermaid script/syntax from step 16, use the word "subgraph" to start a subgraph and the word "end" to close it. Define all nodes that belong to the subgraph. Define the links for  all the nodes at the end. Do not print output for this step.\n\nStep 20: Review and adjust the Mermaid script/syntax for each claim group as needed. Refer the example given below for following the style of the mermaid. This sample is for reference only, do not follow numbering of the sample given below. Keep the numbering same as given in the json component_sub-component and also, do not mention claim numbers in the mermaid codes. \n\nFor example, \ngraph LR\nsubgraph 200["Host System"]\n  210["Host Interface Unit"]\nend\nsubgraph 204["Memory Controller"]\n  212["Memory Interface Unit"]\n  214["Processing Unit"]\nend\nsubgraph 206["Non-Volatile Memory"]\n  202["Memory Devices"]\n  208["Host Memory"]\n  216["Information Units"]\nend\n200 --- 204\n204 --- 206\nPrint the output for this step in json format with title ==mermaids==. Do not print process/step in the output.\n\nStep 22: Ensure that a valid mermaid syntax has been generated for each claim group in step 20.  Do not print the output for this step.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(398,4,51,E'block_diagram',E'user',E'Step 26: Use the output from step 20 to generate one mermaid for each claim group for all the main components, without the sub-components, which together enable/manifest all the entity actions from json component_sub-component. Print the output in json format â€¨{"mermaid": "Claims_group number":..., "mermaid script/syntax..."}\n',NULL,NULL,E'{"project": ["mermaid"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(399,5,51,E'block_diagram',E'user',E'Step 27: Using the output of step 26, identify the goal of the steps for each claim group in fewer than 20 words. Output in json format â€¨{"Goal_claim_group": "Claims_group number":..., "goal..."}',NULL,NULL,E'{"project": []}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(400,6,51,E'block_diagram',E'user',E'Step 28: The output of step 27 is for a flow chart named as figure 5. Generate a brief description of the figure in 1 line for each claim group. Output in json format {"breif_description": ...}\nConsider the writing style of sample given below:\n\nFIG. 5 illustrates, in a block diagram, a computing environment of a VR headset in accordance with certain embodiments.\n\nBrief Description;',NULL,NULL,E'{"project": ["breif_description"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(401,7,51,E'block_diagram',E'user',E'Step 29: Split the mermaid from Step 20 for each claim group  into multiple mermaids based on the main components-sub-components grouping. For any main component with sub-component, ensure that the mermaid is made for that main component and all it\'s sub-components. Avoid mermaids in Step 29 that do not contain sub-components. Also, ensure each of the mermaid splits are meaningful in context of json component_sub-component. Print the output in json format with title ==mermaids== with mermaids as array. Do not repeat the step in the output. ',NULL,NULL,E'{"project": ["mermaids"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(402,8,51,E'block_diagram',E'user',E' Step 30: Using the json ####mermaids####, identify the goal of the steps for each mermaid  for each claim group separately in fewer than 20 words. Output in json format â€¨{"Goal_claim_group_mermaids": "Claims_group number":..., "mermaid number":..., "goal..."}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(403,9,51,E'block_diagram',E'user',E'Step 31: The output of step 30 is for a flow chart named as figure 5A, 5B, 5C and so on. Generate a brief description of each figure for each claim group in 1 line. Output in json format with field "breif_descriptions".â€¨ Print the output for this step in json format:\n{"breif_descriptions": [{"title": "...", "brief_description": ...}]}â€¨. Consider the writing style of sample given below:\n\nFIG. 5 illustrates, in a block diagram, a computing environment of a VR headset in accordance with certain embodiments.\n',NULL,NULL,E'{"project": ["breif_descriptions"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json');

DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id"=395;
INSERT INTO "prompt"."prompt_seq"("prompt_seq_id","seq","prompt_id","short_name","role","instructions","fun_def","inputs","outputs","created_at","modified_at","repeat","is_stream","model","multicalls","max_tokens","prompt_actions","claim_nums","decision_step","step_description","revised_step_description","claim_component_entities","claim_component_actions","skip_append","output_format")
VALUES
(395,1,51,E'block_diagram',E'system',E'Step 16: Provide the mermaid script/syntax for each claim group from json component_sub-component. Do not print output for this step.\n\nStep 17: Choose the layout for output from step 16. Use graph TB for a top-down layout or graph LR for a left-right layout. Do not print output for this step.\n\nStep 18: Define the nodes for each claim group for the output from step 16. Use square brackets for regular nodes (e.g., 200["Host System"]). Do not print output for this step.\n\nStep 19: For the Mermaid script/syntax from step 16, use the word "subgraph" to start a subgraph and the word "end" to close it. Define all nodes that belong to the subgraph. Define the links for  all the nodes at the end. Do not print output for this step.\n\nStep 20: Review and adjust the Mermaid script/syntax for each claim group as needed. Refer the example given below for following the style of the mermaid. This sample is for reference only, do not follow numbering of the sample given below. Keep the numbering same as given in the json component_sub-component and also, do not mention claim numbers in the mermaid codes. \n\nFor example, \ngraph LR\nsubgraph 200["Host System"]\n  210["Host Interface Unit"]\nend\nsubgraph 204["Memory Controller"]\n  212["Memory Interface Unit"]\n  214["Processing Unit"]\nend\nsubgraph 206["Non-Volatile Memory"]\n  202["Memory Devices"]\n  208["Host Memory"]\n  216["Information Units"]\nend\n200 --- 204\n204 --- 206\nPrint the output for this step in json format with title ==mermaids==. Do not print process/step in the output.\n\nStep 22: Ensure that a valid mermaid syntax has been generated for each claim group in step 20.  Do not print the output for this step.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);


DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id"=360;

INSERT INTO "prompt"."prompt_seq"("prompt_seq_id","seq","prompt_id","short_name","role","instructions","fun_def","inputs","outputs","created_at","modified_at","repeat","is_stream","model","multicalls","max_tokens","prompt_actions","claim_nums","decision_step","step_description","revised_step_description","claim_component_entities","claim_component_actions","skip_append","output_format")
VALUES
(360,1,45,E'flowchart_common',E'system',E'I am providing you the following inputs to perform steps 5 to 10. \n####Claims####\n####Current Invention####\n####entity_actions_rewritten####in json format\n\nStep 5: An independent claim does not reference any other claim. However, a dependent claim always references another claim on which it depends. Using the above logic do the following: \na) Identify all the method independent and dependent claims from the text ####Claims####. \nb) Map the dependency between the independent claim and/or all the method dependent claims that directly or indirectly reference it in the same claim group. Also, map the dependency between the dependent claims in the same claim group. For instance, if claim 1 is independent and claims 2 and 3 are directly dependent on claim 1, they should be grouped in the same claim group. If there are further dependent claims such as claim 4 that depend on dependent claim 3, and dependent claim 5 that depends on dependent claim 4, they should also be included in the group of claim 1, as they indirectly reference it. Even if there is no dependent claim for an independent claim it should be classified into a separate group.\nc) No two independent claims can be grouped in the same claim group. \nd) Only the method type claims must be referenced in the output.\nPrint the output in a json format. \nPrint the json ==claim_groups== in this format:\n{"claim_groups": [ { "claims_group_number":..., "independent_claim/dependent_claim": ...,  "claim_type":..., "dependent_claim":....}, ..]}. Ensure no dependent claim is considered as a distinct claim_group. Do not print the process in the output.\n\nStep 5.1: Rerun the step till each method claim(independent and/or dependent) is referenced in json claim_groups. Do not print output for this step. \n\nStep 6:  For the claims identified from the output of step 5, use the entity actions from field entity_action_claim from json ####entity_actions_rewritten#### to identify which dependent claim depends on which entity action of the independent claim or the entity action in other dependent claims in context of text ####Claims####. Provide the mapping between the dependent claims and the claim entity actions of the independent claim or the entity actions of other dependent claims on which it depends. Output format: Dependent claim --> Independent claim --> reason etc. \nPrint the json ==claim_dependency== in this format:\n{"claim_dependency": [{"claims_group_number":..., "dependent_claim": ..., "independent_claim": ..., "reason": ...}, ...]}\n\nStep 7: For each claim group from field claims_group_number from json ==claim_groups==, use the output of Step 6 to identify all the main steps/entity actions that occur in a logical sequence to accomplish the method in context of all the claims from Step 5 and the ####current invention####. Using the output of Step 6, for each main step/entity action, identify the sub-steps/parallel steps/entity actions that are optional/additional details for the main steps to accomplish the method in context of claims from json ==claim_groups==. Ensure all the claims for each claim group from json ==claim_groups== are referred in Step 7 output. Number the step and sub-step, in an even numbering series with increment of 2 for each step, as follows - if step number is 100, it\'s sub-step number will be 100-a, 100-b, for step 102 the sub-step will be 102-a, 102-b etc. Print the output in a json format with title: ==Steps_sub-steps== where every step/ sub-step is in a separate row. The output json ==Steps_sub-steps== will contain the following fields: claims_group_number, Step/Sub-Step type, Step/Sub-Step number, explanation quote from text ####claims####, claim number, entity_claim(entity_numerical_identifier) and entities_inv.\nPrint the json ==Steps_sub-steps== in this format:\n{"Steps_sub-steps": [ { "claims_group_number":..., "Step/Sub-Step type":..., "Step/Sub-Step number": ..., "explanation quote from text ####claims####":..., "claim number":..., "entity_claim":..., "entity_numerical_identifier":..., "entities_inv":...}, ..]}. Do not print process in the output.\n\nStep 7.1: Rerun step 7 all the claims from field independent_claim and from field dependent_claims for each claim group from json ==claim_groups== are referred in the output.\n\nStep 8: Rewrite step 7 by doing the following:\na) keep the step and sub-step numbers the same\nb) Re-write the explanation from "explanation quote from text ####Claims####" in a concise form without changing the technical language/vocabulary or alter any of the numerical attributes, specific properties (including physical properties such as state, texture, etc. and particular examples), specific quantities details/parameters/definitions in context of text ####Claims####.\nPrint the output of this step in json format with title ==Steps_sub-steps Rewrite== The json ==Steps_sub-steps Rewrite== will have the following fieds: claims_group_number, Step/Sub-Step number, explanation, claim number. \nPrint the json ==Steps_sub-steps Rewrite== in this format:\n{"Steps_sub-steps Rewrite": [ {"claims_group_number":..., "Step/Sub-Step type":..., "Step/Sub-Step number":..., "explanation": ..., "claim number":...}, ..]}. Do not print process in the output.\n\nStep 9: For each claim group from field claims_group_number from json ==claim_dependency==, identify all the decision making steps for each claim from ==Steps_sub-steps Rewrite==. Print the output of this step in json format with title ==decision_steps==. Print the json ==decision_steps== in this format:\n{"decision_steps": [ {"claims_group_number":..., "Decision step":...}, ..]}. Do not print process in the output.\n\nStep 10: Identity and list all the entities from field \'entities_inv\' from json ####entity_actions_rewritten#### that are not directly mentioned in the claims but are related to the broader context of the invention or the application of the claimed method. Quote them from field \'entities_inv\' as is from json ####entity_actions_rewritten####. Print output in json format with title ==additional_entities_to_describe==. The json ==additional_entities_to_describe==will have the field entities_inv_addl. Print the json ==additional_entities_to_describe== in this format:\n{"additional_entities_to_describe": [ { "entities_inv_addl":...}, ..]}. Do not print process in the output.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,596,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);


DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id"=351 OR "prompt_seq_id"=360 OR "prompt_seq_id"=381 OR "prompt_seq_id"=382 OR "prompt_seq_id"=386 OR "prompt_seq_id"=388 OR "prompt_seq_id"=398 OR "prompt_seq_id"=400 OR "prompt_seq_id"=401 OR "prompt_seq_id"=403 OR "prompt_seq_id"=404;

INSERT INTO "prompt"."prompt_seq"("prompt_seq_id","seq","prompt_id","short_name","role","instructions","fun_def","inputs","outputs","created_at","modified_at","repeat","is_stream","model","multicalls","max_tokens","prompt_actions","claim_nums","decision_step","step_description","revised_step_description","claim_component_entities","claim_component_actions","skip_append","output_format")
VALUES
(351,1,46,E'block_diagram_common',E'system',E'I have provided following inputs to perform steps 5 to 11\n####Claims####\n####Current Invention####\n####entity_actions_rewritten####in json format\n\n\nStep 5: An independent claim does not reference any other claim. However, a dependent claim always references another claim on which it depends. Using the above logic do the following: \na) Identify all the system type  independent and dependent claims from the text ####Claims#### based on the preamble of the claims only. \nb) Map the dependency between the independent claim and/or all the dependent claims that directly or indirectly reference it in the same claim group. Also, map the dependency between the dependent claims in the same claim group. For instance, if claim 1 is independent and claims 2 and 3 are directly dependent on claim 1, they should be grouped in the same claim group. If there are further dependent claims such as claim 4 that depend on dependent claim 3, and dependent claim 5 that depends on dependent claim 4, they should also be included in the group of claim 1, as they indirectly reference it. Even if there is no dependent claim for an independent claim it should be classified into a separate group.\nc) No two independent claims can be grouped in the same claim group. \nd) Only the system type claims must be referenced in the output. Do not include component/apparatus/product/device/machine claims under system claim category in the output.\nPrint the output in a json format. \nPrint the json ==claim_groups== in this format:\n{"claim_groups": [ { "claims_group_number":..., "system_independent_claim": ...,  "claim_type":..., "system_dependent_claim":....}, ..]}. Ensure no dependent claim is considered as a distinct claim_group. Do not print the process in the output.  \n \nStep 5.1: Rerun the step till each system claim(independent and/or dependent) is referenced in json claim_groups. Do not include component/apparatus/product/device/machine type claims under system claim category in the output. Do not print output for this step.\n\n\nStep 6:  For the claims identified from ==system_Claims==, use the entity actions from field {entity_action_claim} from json ####entity_actions_rewritten#### to identify which dependent claim depends on which entity action of the independent claim or the entity action in other dependent claims in context of text ####Claims####. Provide the mapping between the dependent claims and the claim entity actions of the independent claim or the entity actions of other dependent claims on which it depends. Output format: Dependent claim --> Independent claim --> reason etc. \nPrint the json ==claim_dependency== in this format:\n{"claim_dependency": [{"claims_group_number":..., "dependent_claim": ..., "independent_claim": ..., "reason": ...}, ...]}â€¨\n\nStep 7: Identify and name the system that encompasses the specific entity actions associated with ####current invention#### from field entity action_invention from json ####entity_actions_rewritten#### and all the claims from ==system_Claims==. Output format: ==System==\nPrint the json ==System== in this format:\n{"system": ...}â€¨\n\nStep 8: a) Co-relate the identified claims for each claim group from field independent_claim, from field dependent_claim from json claim_groups with the field claim_number from json ####entity_actions_rewritten####.\nb) Identify all the entities from field entity_claim and entities_inv from json #### entity_actions_rewritten#### for the co-related claim numbers for each claim group.\nc) For each claim group, group all the identified entities from field entity_claim and from field entities_inv from json  #### entity_actions_rewritten#### into components and sub-components using overlaps/commonalities in their entity action from either 1) from field entity_action_claim or from 2) field entity_action_invention from json ####entity_actions_rewritten#### and from output of step 6. These components and sub-components should be grouped such that when working together they manifest the invention from text ####Claims#### and text ####Current invention####. \nd) Ensure that entities from both field entity_claim and from field entities_inv are quoted/cited in the output. Ensure all the claims (both independent and dependent claims) identified for each claim group in the output of step 5 are referenced in the output. Print the output in json format with title ==component_entities== where every component/ sub-component is in a separate row. The json ==component_entities== will be in this format:\n{"component_entities": [ {"claims_group_number":...., "component/sub-component type":..., "component/sub-component name ": ...,  "entity_claim":...., "entity_numerical_identifier":..., "entities_inv":..., "claim numbers":...}, ..]}. Do not repeat the process in the output.\n\nStep 8.1 - Ensure that entities from both field entity_claim and from field entities_inv are quoted/cited in the column grouped entities in the output. Ensure all the claims (both independent and dependent claims) identified in each claim group in the output of step 5 are referenced in the output.\n\nStep 9: For all the entities from the field entity_claim from JSON ####entity_actions_rewritten####, verify that the field entity_numerical_identifier is empty/null/does not have any value. If this condition is satisfied for every entity, indicating that no entity has a numerical identifier, then proceed to Steps 10 and 11. If any entity has a numerical identifier, do not proceed further and provide an appropriate message indicating that the condition is not met. Output in json format with fields \nexp - explain the condition\nflag - true/false based on is the condition.â€¨Output json in the below format: {"check": {"exp": ..., "flag": ...}}â€¨\n\nStep 10 : Check the naming of components for each claim group from field claims_group_number from Step 8 to determine which components are named like method components. Re-name only the components and sub-components from output of Step 8 to sound like system components/parts of a system if they sound like method components. When renaming, ensure the names are small/pithy/catchy titles with at most 2-5 words. Ensure the new names are unique and capture the essence of the component and sub-component entity action as mapped in output of Step 8. Do not number the components in this output. Print the output in json format with title ==renamed_component_entities==. The json ==renamed_component_entities==will be in this format:\n{"renamed_component_entities": [ {"claims_group_number":...., "Component/Sub-component":..., "Renaming required(Y/N)": ..., "Renamed Component/Sub-component":...}, ..]}. Do not print process in the output.\n\nStep 11: Number the system, component and sub-component from field  Component/Sub-component for each claim group from json ==renamed_component_entities==, in an unique numbering series with increment of 2 for each component as follows - if the system is numbered 500, the component should be numbered 502 and it\'s sub-component should be numbered 502-a, 502-b etc. The next component will be numbered 504 and itâ€™s sub-component will be numbered 504-a, 504-b etc. Print the output json format with title ==component_sub-component==. The json ==component_sub-component== will be in this format:\n{"component_sub-component": [{"claims_group_number":...., "Component type - system/component/sub-component":..., "system/component/sub-component number": "...", "system/component/sub-component name":..., "explanation":..., "entity_claim":..., "entities_inv":..., "claim numbers":...}, ..]}. Do not print process in the output.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(360,1,45,E'flowchart_common',E'system',E'I am providing you the following inputs to perform steps 5 to 10. \n####Claims####\n####Current Invention####\n####entity_actions_rewritten####in json format\n\nStep 5: An independent claim does not reference any other claim. However, a dependent claim always references another claim on which it depends. Using the above logic do the following: \na) Identify all the method type independent and dependent claims from the text ####Claims####. If there are no method claims, output no method claims.\nb) Map the dependency between the independent claim and/or all the method dependent claims that directly or indirectly reference it in the same claim group. Also, map the dependency between the dependent claims in the same claim group. For instance, if claim 1 is independent and claims 2 and 3 are directly dependent on claim 1, they should be grouped in the same claim group. If there are further dependent claims such as claim 4 that depend on dependent claim 3, and dependent claim 5 that depends on dependent claim 4, they should also be included in the group of claim 1, as they indirectly reference it. Even if there is no dependent claim for an independent claim it should be classified into a separate group.\nc) No two independent claims can be grouped in the same claim group. \nd) Only the method type claims(if any) must be referenced in the output.\nPrint the output in a json format. \nPrint the json ==claim_groups== in this format:\n{"claim_groups": [ { "claims_group_number":..., "Method_independent_claim": ...,  "Method_dependent_claim":....}, ..]}. Ensure no dependent claim is considered as a distinct claim_group. Do not print the process in the output.\n\nStep 5.1: Rerun the step till each method claim(independent and/or dependent) is referenced in json claim_groups. Do not print output for this step. \n\nStep 6:  For the claims identified from the output of step 5, use the entity actions from field entity_action_claim from json ####entity_actions_rewritten#### to identify which dependent claim depends on which entity action of the independent claim or the entity action in other dependent claims in context of text ####Claims####. Provide the mapping between the dependent claims and the claim entity actions of the independent claim or the entity actions of other dependent claims on which it depends. Output format: Dependent claim --> Independent claim --> reason etc. \nPrint the json ==claim_dependency== in this format:\n{"claim_dependency": [{"claims_group_number":..., "dependent_claim": ..., "independent_claim": ..., "reason": ...}, ...]}\n\nStep 7: For each claim group from field claims_group_number from json ==claim_groups==, use the output of Step 6 to identify all the main steps/entity actions that occur in a logical sequence to accomplish the method in context of all the claims from Step 5 and the ####current invention####. Using the output of Step 6, for each main step/entity action, identify the sub-steps/parallel steps/entity actions that are optional/additional details for the main steps to accomplish the method in context of claims from json ==claim_groups==. Ensure all the claims for each claim group from json ==claim_groups== are referred in Step 7 output. Number the step and sub-step, in an even numbering series with increment of 2 for each step, as follows - if step number is 100, it\'s sub-step number will be 100-a, 100-b, for step 102 the sub-step will be 102-a, 102-b etc. Print the output in a json format with title: ==Steps_sub-steps== where every step/ sub-step is in a separate row. The output json ==Steps_sub-steps== will contain the following fields: claims_group_number, Step/Sub-Step type, Step/Sub-Step number, explanation quote from text ####claims####, claim number, entity_claim(entity_numerical_identifier) and entities_inv.\nPrint the json ==Steps_sub-steps== in this format:\n{"Steps_sub-steps": [ { "claims_group_number":..., "Step/Sub-Step type":..., "Step/Sub-Step number": ..., "explanation quote from text ####claims####":..., "claim number":..., "entity_claim":..., "entity_numerical_identifier":..., "entities_inv":...}, ..]}. Do not print process in the output.\n\nStep 7.1: Rerun step 7 all the claims from field independent_claim and from field dependent_claims for each claim group from json ==claim_groups== are referred in the output.\n\nStep 8: Rewrite step 7 by doing the following:\na) keep the step and sub-step numbers the same\nb) Re-write the explanation from "explanation quote from text ####Claims####" in a concise form without changing the technical language/vocabulary or alter any of the numerical attributes, specific properties (including physical properties such as state, texture, etc. and particular examples), specific quantities details/parameters/definitions in context of text ####Claims####.\nPrint the output of this step in json format with title ==Steps_sub-steps Rewrite== The json ==Steps_sub-steps Rewrite== will have the following fieds: claims_group_number, Step/Sub-Step number, explanation, claim number. \nPrint the json ==Steps_sub-steps Rewrite== in this format:\n{"Steps_sub-steps Rewrite": [ {"claims_group_number":..., "Step/Sub-Step type":..., "Step/Sub-Step number":..., "explanation": ..., "claim number":...}, ..]}. Do not print process in the output.\n\nStep 9: For each claim group from field claims_group_number from json ==claim_dependency==, identify all the decision making steps for each claim from ==Steps_sub-steps Rewrite==. Print the output of this step in json format with title ==decision_steps==. Print the json ==decision_steps== in this format:\n{"decision_steps": [ {"claims_group_number":..., "Decision step":...}, ..]}. Do not print process in the output.\n\nStep 10: Identity and list all the entities from field \'entities_inv\' from json ####entity_actions_rewritten#### that are not directly mentioned in the claims but are related to the broader context of the invention or the application of the claimed method. Quote them from field \'entities_inv\' as is from json ####entity_actions_rewritten####. Print output in json format with title ==additional_entities_to_describe==. The json ==additional_entities_to_describe==will have the field entities_inv_addl. Print the json ==additional_entities_to_describe== in this format:\n{"additional_entities_to_describe": [ { "entities_inv_addl":...}, ..]}. Do not print process in the output.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,596,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(381,4,47,E'flowchart_diagram',E'user',E'Step 22: Use the output from step 19 to generate one mermaid for each claim group. For each claim group, the mermaid will contain all the steps without the sub-steps, which together encompass the method in context of ==Steps_sub-steps Rewrite== and ==Decision_step==. Steps can be identified from their whole number whereas sub-steps can be identified by the whole number hyphenated with an alphabet. Print the output in json format with title ==mermaids==. The json ==mermaids== will be in this format: â€¨{"main_mermaids": [{"Claims_group number":..., "mermaid": "mermaid script/syntax"...}, ....]}\n\nSample Mermaid:\ngraph TB\n100["Determine an initial eye strain context for a user wearing a VR headset."]\n102{"Recognize a User Interface (UI) adaptation."}\n104["Establish the intensity of the UI adaptation."]\n106["Display modified VR content by applying the identified UI adaptation."]\n108["Assess an updated eye strain context."]\n110{"If the updated eye strain context indicates a decrease in eye strain."}\n112["Modify the priority weight for the UI adaptation."]\n114["Refresh a user\'s profile with the UI adaptation, its intensity, and the modified priority weight."]\n100 --> 102\n102 -- Yes --> 104\n104 --> 106\n106 --> 108\n108 --> 110\n110 -- Yes --> 112\n112 --> 114\n110 -- No --> 102',NULL,NULL,E'{"project": ["mermaid"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(382,5,47,E'flowchart_diagram',E'user',E'Step 25: Split the mermaids from Step 19, for each claim group, into multiple mermaids based on the sub-steps grouping where each sub-step group contains a step and it\'s respective sub-step from ==Steps_sub-steps Rewrite==. For any step with sub-step from ==Steps_sub-steps Rewrite==, ensure that the mermaid is made only for the step and all it\'s sub-steps. Using ==Steps_sub-steps Rewrite==, avoid mermaids in Step 25 for steps that do not contain sub-steps. Ensure each of the mermaid splits are meaningful in context of ==Steps_sub-steps Rewrite== and ==Decision_step==. Print the output in json format with title ==mermaids== The json ==mermaids== will be in this format: {"mermaids": [{"claims_group_number":..., "mermaid" : "mermaid script/syntax ..."}, ....]}. Do not repeat the step in the output. \n\nSample Mermaid:\ngraph TB\n100["Determine an initial eye strain context for a user wearing a VR headset."]\n102{"Recognize a User Interface (UI) adaptation."}\n104["Establish the intensity of the UI adaptation."]\n106["Display modified VR content by applying the identified UI adaptation."]\n108["Assess an updated eye strain context."]\n110{"If the updated eye strain context indicates a decrease in eye strain."}\n112["Modify the priority weight for the UI adaptation."]\n114["Refresh a user\'s profile with the UI adaptation, its intensity, and the modified priority weight."]\n100 --> 102\n102 -- Yes --> 104\n104 --> 106\n106 --> 108\n108 --> 110\n110 -- Yes --> 112\n112 --> 114\n110 -- No --> 102',NULL,NULL,E'{"project": ["mermaids"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(386,9,47,E'flowchart_diagram',E'user',E'Step 24: The output of step 23 is for a flow chart named as figure 1. Generate a brief description of the figure for each claim group from json Goal_claim_group in 1 line without using the word claim group with figure numbers as figure 1,figure 2, etc. .. Print the output in json format with title ==main_breif_descriptions==. The json ==main_breif_descriptions== will be in this format : {"main_breif_descriptions": [{"title": "...", "brief_description": ...}]}\nConsider the writing style of sample given below:\n\nFIG. 1 illustrates, in a flowchart, operations for using a user profile in accordance with certain embodiments. \n\nBrief Description;',NULL,NULL,E'{"project": ["breif_description"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(388,11,47,E'flowchart_diagram',E'user',E'Step 27: The output of step 26 is for a flow chart named as figure 1A, 1B, 1C and so on. Generate a brief description of each figure for each claim group from json Goal_claim_group_mermaids in 1 line without using the word claim group. Print the output for this step in json format with title ==breif_descriptions==. The json ==breif_descriptions== will be in this format:\n{"breif_descriptions": [{"title": "...", "brief_description": ...}]}â€¨\n\nConsider the writing style of sample given below:\n\nFIG. 1 illustrates, in a flowchart, operations for using a user profile in accordance with certain embodiments. \n\nBrief Description;',NULL,NULL,E'{"project": ["breif_descriptions"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(398,4,51,E'block_diagram',E'user',E'Step 26: Use the output from step 20 to generate one mermaid for each claim group for all the main components, without the sub-components, which together enable/manifest all the entity actions from json component_sub-component. Print the output in json format with title ==mermaids==. The json ==mermaids== will be in this format: â€¨{"main_mermaids": [{"Claims_group number":..., "mermaid": "mermaid script/syntax"...}, ....]}\n',NULL,NULL,E'{"project": ["mermaid"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(400,6,51,E'block_diagram',E'user',E'Step 28: The output of step 27 is for a flow chart named as figure 5. Generate a brief description of the figure in 1 line for each claim group. Print the output in json format with title ==main_breif_descriptions==. The json ==main_breif_descriptions== will be in this format : {"main_breif_descriptions": [{"title": "...", "brief_description": ...}]}\nConsider the writing style of sample given below:\n\nFIG. 5 illustrates, in a block diagram, a computing environment of a VR headset in accordance with certain embodiments.\n\nBrief Description;',NULL,NULL,E'{"project": ["breif_description"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(401,7,51,E'block_diagram',E'user',E'Step 29: Split the mermaid from Step 20 for each claim group  into multiple mermaids based on the main components-sub-components grouping. For any main component with sub-component, ensure that the mermaid is made for that main component and all it\'s sub-components. Avoid mermaids in Step 29 that do not contain sub-components. Also, ensure each of the mermaid splits are meaningful in context of json component_sub-component. Print the output in json format with title ==mermaids== The json ==mermaids== will be in this format: {"mermaids": [{"claims_group_number":..., "mermaid" : "mermaid script/syntax ..."}, ....]}. Do not repeat the step in the output. ',NULL,NULL,E'{"project": ["mermaids"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(403,9,51,E'block_diagram',E'user',E'Step 31: The output of step 30 is for a flow chart named as figure 5A, 5B, 5C and so on. Generate a brief description of each figure for each claim group in 1 line. Print the output for this step in json format with title ==breif_descriptions==. The json ==breif_descriptions== will be in this format:\n{"breif_descriptions": [{"title": "...", "brief_description": ...}]}â€¨. Consider the writing style of sample given below:\n\nFIG. 5 illustrates, in a block diagram, a computing environment of a VR headset in accordance with certain embodiments.\n',NULL,NULL,E'{"project": ["breif_descriptions"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(404,1,52,E'extra_diagram_common',E'system',E'I have provided following inputs to perform steps 5 to 7\n####Claims####\n####Current Invention####\n####entity_actions_rewritten####in json format\n\n\nStep 5:  Identify all the respective apparatus/device/composition/formulation/product/machine/medium type independent and dependent claims from the text ####Claims#### based on the preamble of the claims only. Do not include system claims under any category in the output. Print the output in json format with title ==apparatus/device/composition/formulation/product/machine/medium_Claims==. The json ==apparatus/device/composition/formulation/product/machine/medium_Claims== will be in this format \n{"claim_numbers":{"apparatus_claims": [ ...],"device_claims": [...],"composition_claims": [ ...],"formulation_claims": [...],"product_claims": [...],"machine_claims": [...], "medium_claims":[....]}}â€¨. Do not print the process in the output. \n\nExamples of medium type claims is as below:\nMedium type claims: A non-transitory computer readable medium for storing computer instructions.....\n\nStep 5.1: Rerun the step till all the apparatus/device/composition/formulation/product/machine/medium (both independent and dependent) claims are referenced in json claim_groups. Do not include the system claims under any category in the output. Do not print output for this step.\n\n\nStep 6: a) Co-relate only the identified claims from field claim_numbers from json apparatus/device/composition/formulation/product/machine/medium_Claims with the field claim_number from json #### entity_actions_rewritten####. \nb) After co-relation, only for the co-related claim numbers from field claim_number from json #### entity_actions_rewritten#### identify all the entities from field entity_claim and entities_inv from json #### entity_actions_rewritten####, \nC) Then group all the identified entities from field entity_claim and from field entities_inv from json  #### entity_actions_rewritten#### into logical groups. The logical groups must be made on the basis similarity/commonality in entity actions from either a) field entity_action_claim or from b) field entity_action_invention. These logical groups should be grouped such that when working together they manifest the invention from text ####Claims#### and text ####Current invention####. Ensure the logical groups are such that the entities from entitiy_claim and entities_inv are represented/written/referenced only in one row/sr. no. Ensure that entities from both field entity_claim and from field entities_inv are quoted/cited in the column grouped entities in the output. \nPrint the json ==grouped entities== in this format: {"grouped entities": [ { "Sr.no":...., "grouped entities":[.,.,.,], "entity actions": ...,  "entity actions purpose":..., "Claim number":....}, ..]}\n\n\nStep 7: Re-Group all the entities from field  Grouped Entities from json ==grouped entities== into logical groups such that all redundancies/overlaps are avoided. The logical groups must be regrouped on the basis similarity/commonality in entity actions from  field Entity Actions from json ==grouped entities==. These logical groups should be re-grouped such that when working together they manifest the invention from text ####Claims#### and text ####Current invention####. Ensure the logical groups are such that all the entities from field Grouped Entities are represented/written/referenced only in one row/sr. no . Ensure that entities from Grouped Entities are quoted/cited in the column Re-grouped Entities in the output. Print the output in a Json format with title of the json ==component_entities==. The json ==component_entities== must be in \nthis format: {"component_entities": [{ "component/sub-component number": ..., "re-grouped entities":[..., ..., ...], "entity actions": ...,  "entity actions purpose": ...}]}\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);

DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id" in (435, 436, 437);

INSERT INTO "prompt"."prompt_seq" ("prompt_seq_id", "seq", "prompt_id", "short_name", "role", "instructions", "fun_def", "inputs", "outputs", "created_at", "modified_at", "repeat", "is_stream", "model", "multicalls", "max_tokens", "skip_append", "prompt_actions", "claim_nums", "decision_step", "step_description", "revised_step_description", "claim_component_entities", "claim_component_actions", "output_format") VALUES
(435, 34, 44, 'regenerate_claim', 'system', 'I am providing you the following inputs:
####Claims####
####Current Invention
####specific_attributes_claims#### in json format
####total_attributes_invention#### in json format
to perform the following steps. 

Step 7: Co-relate all the specific attributes for each claim from field specific_attributes_claim from json ####specific_attributes_claims####  with the corresponding related specific attributes from field all_invention_attributes from json  ####total_attributes_invention####.  

Print the output of this step in json format with title ==entity_attributes_rewritten== where each entity is in a separate row. The json ==entity_attributes_rewritten== will contain the following fields: entities_claim, entities_inv, specific_attributes_claims, all_invention_attributes, Claim_numbers. Print the json ==entity_attributes_rewritten== in this format:
{"entity_attributes_rewritten": [ {"entities_claim": .., "entities_inv": ..., "specific_attributes_claims":..., "all_invention_attributes": ..., "Claim_numbers":...}, ..]}. Do not print the process in the output.

Step 7.1: Please continue the process of Step 7 for all the claims referenced from field  claim_number from json ####specific_attributes_claims#### in the output. The json ==entity_attributes_rewritten== should include all claims, and each row should contain the entities_claim, entities_inv, specific_attributes_claims,  all_invention_attributes, Claim_numbers. Ensure the response is generated in one go.', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(436, 35, 44, 'regenerate_claim', 'user', 'Claims: ####{{claims}}####
Current Invention: ####{{invention}}####
specific_attributes_claims: ####{{claim_specific_attributes}}####
total_attributes_invention: ####{{specific_attributes}}####', NULL, '{"project": ["claims", "invention", "claim_specific_attributes", "specific_attributes"]}', NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(437, 36, 44, 'regenerate_claim', 'user', 'Step 7, Step 7.1', NULL, NULL, '{"project": ["entity_attributes_rewritten"]}', NULL, NULL, NULL, NULL, NULL, NULL, 8192, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'jsonb');


DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id" in (409);

INSERT INTO "prompt"."prompt_seq" ("prompt_seq_id", "seq", "prompt_id", "short_name", "role", "instructions", "fun_def", "inputs", "outputs", "created_at", "modified_at", "repeat", "is_stream", "model", "multicalls", "max_tokens", "skip_append", "prompt_actions", "claim_nums", "decision_step", "step_description", "revised_step_description", "claim_component_entities", "claim_component_actions", "output_format") VALUES
(409, 1, 53, 'extra_description', 'system', 'I am giving you the following inputs to write a detailed explanation for the component and its sub-components:
1. ####Claims####
2. ####Current invention####
3. ####components_entities#### in table format
4. ####entity_attributes_rewritten#### in json format

Step 1: Choose the component number {{component_num}} from table ####components_entities#### for the explanation. 
The explanation should be written by following the instructions in a, b and c below:

a) Define and explain all the entities for the chosen component number from field Re-grouped Entities from table ####components_entities####. For the definition, Co-relate the entities from field Re-grouped Entities from table ####components_entities#### with the entities from field entities_claim and from field entities_inv from json ####entity_attributes_rewritten#### to identify all their cited attributes. After making the co-relation do the following: Quote/cite all the attributes for all the entities without changing the technical details/language from field 1) specific_attributes_claims and 2) from field all invention attributes and 3) from field additional_attributes_invention and explain how they contribute to the invention from text ####Claims#### and text ####Current invention####. Avoid use of quotations in the explanation.

Do not refer to words like "entity", "entities", "entity action", "crucial", "critical" etc. Just quote facts from the inputs provided and avoid use of adjectives in the explanation. Avoid use of quotations in the explanation.
Output format: ==introduction component number {{component_num}}===

Step 2: Re-run step 1 till 
a) Quote/cite all the attributes for all the entities without changing the technical details/language from field 1) specific_attributes_claims and 2) from field all invention attributes and 3) from field additional_attributes_invention.
b) no claim numbers are referenced from field claim_number from json ####entity_actions_rewritten#### 
c) words like "entity", "entities", "entity action", "crucial", "critical" etc are not used in the explanation', NULL, '{"project": ["flowchart_main_element_nums"]}', NULL, NULL, NULL, 'Start', NULL, 'gpt-4-1106-preview', 't', 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'text');

DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id"=398;

INSERT INTO "prompt"."prompt_seq"("prompt_seq_id","seq","prompt_id","short_name","role","instructions","fun_def","inputs","outputs","created_at","modified_at","repeat","is_stream","model","multicalls","max_tokens","skip_append","prompt_actions","claim_nums","decision_step","step_description","revised_step_description","claim_component_entities","claim_component_actions","output_format")
VALUES
(398,4,51,E'block_diagram',E'user',E'Step 26: Use the output from step 20 to generate one mermaid for each claim group for all the main components, without the sub-components, which together enable/manifest all the entity actions from json component_sub-component. Print the output in json format:\n{"main_mermaids": [{"Claims_group number":..., "mermaid": "mermaid script/syntax"...}, ....]}',NULL,NULL,E'{"project": ["mermaid"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json');

DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id" in (381, 382, 386, 388, 398, 400, 401, 403);

INSERT INTO "prompt"."prompt_seq" ("prompt_seq_id", "seq", "prompt_id", "short_name", "role", "instructions", "fun_def", "inputs", "outputs", "created_at", "modified_at", "repeat", "is_stream", "model", "multicalls", "max_tokens", "skip_append", "prompt_actions", "output_format", "claim_nums", "decision_step", "step_description", "revised_step_description", "claim_component_entities", "claim_component_actions") VALUES
(381, 4, 47, 'flowchart_diagram', 'user', 'Step 22: Use the output from step 19 to generate one mermaid for each claim group. For each claim group, the mermaid will contain all the steps without the sub-steps, which together encompass the method in context of ==Steps_sub-steps Rewrite== and ==Decision_step==. Steps can be identified from their whole number whereas sub-steps can be identified by the whole number hyphenated with an alphabet. Print the output in json format with title ==mermaids==. The json ==mermaids== will be in this format: â€¨{"main_mermaids": [{"claims_group_number":..., "mermaid": "mermaid script/syntax"...}, ....]}

Sample Mermaid:
graph TB
100["Determine an initial eye strain context for a user wearing a VR headset."]
102{"Recognize a User Interface (UI) adaptation."}
104["Establish the intensity of the UI adaptation."]
106["Display modified VR content by applying the identified UI adaptation."]
108["Assess an updated eye strain context."]
110{"If the updated eye strain context indicates a decrease in eye strain."}
112["Modify the priority weight for the UI adaptation."]
114["Refresh a user''s profile with the UI adaptation, its intensity, and the modified priority weight."]
100 --> 102
102 -- Yes --> 104
104 --> 106
106 --> 108
108 --> 110
110 -- Yes --> 112
112 --> 114
110 -- No --> 102', NULL, NULL, '{"project": ["mermaid"]}', NULL, NULL, NULL, 't', 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, 'json', NULL, NULL, NULL, NULL, NULL, NULL),
(382, 5, 47, 'flowchart_diagram', 'user', 'Step 25: Split the mermaids from Step 19, for each claim group, into multiple mermaids based on the sub-steps grouping where each sub-step group contains a step and it''s respective sub-step from ==Steps_sub-steps Rewrite==. For any step with sub-step from ==Steps_sub-steps Rewrite==, ensure that the mermaid is made only for the step and all it''s sub-steps. Using ==Steps_sub-steps Rewrite==, avoid mermaids in Step 25 for steps that do not contain sub-steps. Ensure each of the mermaid splits are meaningful in context of ==Steps_sub-steps Rewrite== and ==Decision_step==. Print the output in json format with title ==mermaids== The json ==mermaids== will be in this format: {"mermaids": [{"claims_group_number":..., "mermaid" : "mermaid script/syntax ..."}, ....]}. Do not repeat the step in the output. 

Sample Mermaid:
graph TB
100["Determine an initial eye strain context for a user wearing a VR headset."]
102{"Recognize a User Interface (UI) adaptation."}
104["Establish the intensity of the UI adaptation."]
106["Display modified VR content by applying the identified UI adaptation."]
108["Assess an updated eye strain context."]
110{"If the updated eye strain context indicates a decrease in eye strain."}
112["Modify the priority weight for the UI adaptation."]
114["Refresh a user''s profile with the UI adaptation, its intensity, and the modified priority weight."]
100 --> 102
102 -- Yes --> 104
104 --> 106
106 --> 108
108 --> 110
110 -- Yes --> 112
112 --> 114
110 -- No --> 102', NULL, NULL, '{"project": ["mermaids"]}', NULL, NULL, NULL, 't', 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, 'json', NULL, NULL, NULL, NULL, NULL, NULL),

(386, 9, 47, 'flowchart_diagram', 'user', 'Step 24: The output of step 23 is for a flow chart named as figure 1. Generate a brief description of the figure for each claim group from json Goal_claim_group in 1 line without using the word claim group with figure numbers as figure 1,figure 2, etc. .. Print the output in json format with title ==main_breif_descriptions==. The json ==main_breif_descriptions== will be in this format : {"main_breif_descriptions": [{"title": "...", "brief_description": ...}]}
Consider the writing style of sample given below:

FIG. 1 illustrates, in a flowchart, operations for using a user profile in accordance with certain embodiments. 

Brief Description;', NULL, NULL, '{"project": ["breif_description"]}', NULL, NULL, NULL, 't', 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, 'json', NULL, NULL, NULL, NULL, NULL, NULL),
(388, 11, 47, 'flowchart_diagram', 'user', 'Step 27: The output of step 26 is for a flow chart named as figure 1A, 1B, 1C and so on. Generate a brief description of each figure for each claim group from json Goal_claim_group_mermaids in 1 line without using the word claim group. Print the output for this step in json format with title ==breif_descriptions==. The json ==breif_descriptions== will be in this format:
{"breif_descriptions": [{"title": "...", "brief_description": ...}]}â€¨

Consider the writing style of sample given below:

FIG. 1 illustrates, in a flowchart, operations for using a user profile in accordance with certain embodiments. 

Brief Description;', NULL, NULL, '{"project": ["breif_descriptions"]}', NULL, NULL, NULL, 't', 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, 'json', NULL, NULL, NULL, NULL, NULL, NULL),
(398, 4, 51, 'block_diagram', 'user', 'Step 26: Use the output from step 20 to generate one mermaid for each claim group for all the main components, without the sub-components, which together enable/manifest all the entity actions from json component_sub-component. Print the output in json format:
{"main_mermaids": [{"claims_group_number":..., "mermaid": "mermaid script/syntax"...}, ....]}', NULL, NULL, '{"project": ["mermaid"]}', NULL, NULL, NULL, 't', 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, 'json', NULL, NULL, NULL, NULL, NULL, NULL),
(400, 6, 51, 'block_diagram', 'user', 'Step 28: The output of step 27 is for a flow chart named as figure 5. Generate a brief description of the figure in 1 line for each claim group. Print the output in json format with title ==main_breif_descriptions==. The json ==main_breif_descriptions== will be in this format : {"main_breif_descriptions": [{"title": "...", "brief_description": ...}]}
Consider the writing style of sample given below:

FIG. 5 illustrates, in a block diagram, a computing environment of a VR headset in accordance with certain embodiments.

Brief Description;', NULL, NULL, '{"project": ["breif_description"]}', NULL, NULL, NULL, 't', 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, 'json', NULL, NULL, NULL, NULL, NULL, NULL),
(401, 7, 51, 'block_diagram', 'user', 'Step 29: Split the mermaid from Step 20 for each claim group  into multiple mermaids based on the main components-sub-components grouping. For any main component with sub-component, ensure that the mermaid is made for that main component and all it''s sub-components. Avoid mermaids in Step 29 that do not contain sub-components. Also, ensure each of the mermaid splits are meaningful in context of json component_sub-component. Print the output in json format with title ==mermaids== The json ==mermaids== will be in this format: {"mermaids": [{"claims_group_number":..., "mermaid" : "mermaid script/syntax ..."}, ....]}. Do not repeat the step in the output. ', NULL, NULL, '{"project": ["mermaids"]}', NULL, NULL, NULL, 't', 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, 'json', NULL, NULL, NULL, NULL, NULL, NULL),
(403, 9, 51, 'block_diagram', 'user', 'Step 31: The output of step 30 is for a flow chart named as figure 5A, 5B, 5C and so on. Generate a brief description of each figure for each claim group in 1 line. Print the output for this step in json format with title ==breif_descriptions==. The json ==breif_descriptions== will be in this format:
{"breif_descriptions": [{"title": "...", "brief_description": ...}]}â€¨. Consider the writing style of sample given below:

FIG. 5 illustrates, in a block diagram, a computing environment of a VR headset in accordance with certain embodiments.
', NULL, NULL, '{"project": ["breif_descriptions"]}', NULL, NULL, NULL, 't', 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, 'json', NULL, NULL, NULL, NULL, NULL, NULL);

DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id"=401;

INSERT INTO "prompt"."prompt_seq"("prompt_seq_id","seq","prompt_id","short_name","role","instructions","fun_def","inputs","outputs","created_at","modified_at","repeat","is_stream","model","multicalls","max_tokens","skip_append","prompt_actions","claim_nums","decision_step","step_description","revised_step_description","claim_component_entities","claim_component_actions","output_format")
VALUES
(401,7,51,E'block_diagram',E'user',E'Step 29: Split the mermaid from Step 20 for each claim group  into multiple mermaids based on the main components-sub-components grouping. For any main component with sub-component, ensure that the mermaid is made for that main component and all it\'s sub-components. Avoid mermaids in Step 29 that do not contain sub-components. Also, ensure each of the mermaid splits are meaningful in context of json component_sub-component. Print the output in json format: {"mermaids": [{"claims_group_number":..., "mermaid" : "mermaid script/syntax ..."}, ....]}. Do not repeat the step in the output. ',NULL,NULL,E'{"project": ["mermaids"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json');

DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id"=403 OR "prompt_seq_id"=402 OR "prompt_seq_id"=400 OR "prompt_seq_id"=388 OR "prompt_seq_id"=387 OR "prompt_seq_id"=386 OR "prompt_seq_id"=382 OR "prompt_seq_id"=381;

INSERT INTO "prompt"."prompt_seq"("prompt_seq_id","seq","prompt_id","short_name","role","instructions","fun_def","inputs","outputs","created_at","modified_at","repeat","is_stream","model","multicalls","max_tokens","skip_append","prompt_actions","claim_nums","decision_step","step_description","revised_step_description","claim_component_entities","claim_component_actions","output_format")
VALUES
(403,9,51,E'block_diagram',E'user',E'Step 31: The output of step 30 is for a flow chart named as figure 5A, 5B, 5C and so on. Generate a brief description of each figure for each claim group in 1 line. Print the output in json format:\n{"breif_descriptions": [{"title": "...", "brief_description": ...}]}\n. Consider the writing style of sample given below:\n\nFIG. 5 illustrates, in a block diagram, a computing environment of a VR headset in accordance with certain embodiments.\n',NULL,NULL,E'{"project": ["breif_descriptions"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(402,8,51,E'block_diagram',E'user',E' Step 30: Using the json ####mermaids####, identify the goal of the steps for each mermaid  for each claim group separately in fewer than 20 words. Output in json format \n{"Goal_claim_group_mermaids": [{"Claims_group number":..., "mermaid number":..., "goal..."},...]}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(400,6,51,E'block_diagram',E'user',E'Step 28: The output of step 27 is for a flow chart named as figure 5. Generate a brief description of the figure in 1 line for each claim group. Print the output in json format: {"main_breif_descriptions": [{"title": "...", "brief_description": ...}]}\nConsider the writing style of sample given below:\n\nFIG. 5 illustrates, in a block diagram, a computing environment of a VR headset in accordance with certain embodiments.\n\nBrief Description;',NULL,NULL,E'{"project": ["breif_description"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(388,11,47,E'flowchart_diagram',E'user',E'Step 27: The output of step 26 is for a flow chart named as figure 1A, 1B, 1C and so on. Generate a brief description of each figure for each claim group from json Goal_claim_group_mermaids in 1 line without using the word claim group. Print the output in json format:\n{"breif_descriptions": [{"title": "...", "brief_description": ...}]}\n\n\nConsider the writing style of sample given below:\n\nFIG. 1 illustrates, in a flowchart, operations for using a user profile in accordance with certain embodiments. \n\nBrief Description;',NULL,NULL,E'{"project": ["breif_descriptions"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(387,10,47,E'flowchart_diagram',E'user',E'Step 26: Using the {mermaids} , identify the goal of the steps for each mermaid for each claim group separately in fewer than 20 words. Output in json format \n{"Goal_claim_group_mermaids": [{"Claims_group number":..., "mermaid number":..., "goal..."},...]}',NULL,NULL,E'{"project": []}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(386,9,47,E'flowchart_diagram',E'user',E'Step 24: The output of step 23 is for a flow chart named as figure 1. Generate a brief description of the figure for each claim group from json Goal_claim_group in 1 line without using the word claim group with figure numbers as figure 1,figure 2, etc. Print the output in json format: {"main_breif_descriptions": [{"title": "...", "brief_description": ...}]}\nConsider the writing style of sample given below:\n\nFIG. 1 illustrates, in a flowchart, operations for using a user profile in accordance with certain embodiments. \n\nBrief Description;',NULL,NULL,E'{"project": ["breif_description"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(382,5,47,E'flowchart_diagram',E'user',E'Step 25: Split the mermaids from Step 19, for each claim group, into multiple mermaids based on the sub-steps grouping where each sub-step group contains a step and it\'s respective sub-step from ==Steps_sub-steps Rewrite==. For any step with sub-step from ==Steps_sub-steps Rewrite==, ensure that the mermaid is made only for the step and all it\'s sub-steps. Using ==Steps_sub-steps Rewrite==, avoid mermaids in Step 25 for steps that do not contain sub-steps. Ensure each of the mermaid splits are meaningful in context of ==Steps_sub-steps Rewrite== and ==Decision_step==. Print the output in json format: {"mermaids": [{"claims_group_number":..., "mermaid" : "mermaid script/syntax ..."}, ....]}. Do not repeat the step in the output. \n\nSample Mermaid:\ngraph TB\n100["Determine an initial eye strain context for a user wearing a VR headset."]\n102{"Recognize a User Interface (UI) adaptation."}\n104["Establish the intensity of the UI adaptation."]\n106["Display modified VR content by applying the identified UI adaptation."]\n108["Assess an updated eye strain context."]\n110{"If the updated eye strain context indicates a decrease in eye strain."}\n112["Modify the priority weight for the UI adaptation."]\n114["Refresh a user\'s profile with the UI adaptation, its intensity, and the modified priority weight."]\n100 --> 102\n102 -- Yes --> 104\n104 --> 106\n106 --> 108\n108 --> 110\n110 -- Yes --> 112\n112 --> 114\n110 -- No --> 102',NULL,NULL,E'{"project": ["mermaids"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(381,4,47,E'flowchart_diagram',E'user',E'Step 22: Use the output from step 19 to generate one mermaid for each claim group. For each claim group, the mermaid will contain all the steps without the sub-steps, which together encompass the method in context of ==Steps_sub-steps Rewrite== and ==Decision_step==. Steps can be identified from their whole number whereas sub-steps can be identified by the whole number hyphenated with an alphabet. Print the output in json format: \n{"main_mermaids": [{"claims_group_number":..., "mermaid": "mermaid script/syntax"...}, ....]}\n\nSample Mermaid:\ngraph TB\n100["Determine an initial eye strain context for a user wearing a VR headset."]\n102{"Recognize a User Interface (UI) adaptation."}\n104["Establish the intensity of the UI adaptation."]\n106["Display modified VR content by applying the identified UI adaptation."]\n108["Assess an updated eye strain context."]\n110{"If the updated eye strain context indicates a decrease in eye strain."}\n112["Modify the priority weight for the UI adaptation."]\n114["Refresh a user\'s profile with the UI adaptation, its intensity, and the modified priority weight."]\n100 --> 102\n102 -- Yes --> 104\n104 --> 106\n106 --> 108\n108 --> 110\n110 -- Yes --> 112\n112 --> 114\n110 -- No --> 102',NULL,NULL,E'{"project": ["mermaid"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json');

DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id"=389 OR "prompt_seq_id"=371;

INSERT INTO "prompt"."prompt_seq"("prompt_seq_id","seq","prompt_id","short_name","role","instructions","fun_def","inputs","outputs","created_at","modified_at","repeat","is_stream","model","multicalls","max_tokens","skip_append","prompt_actions","claim_nums","decision_step","step_description","revised_step_description","claim_component_entities","claim_component_actions","output_format")
VALUES
(389,1,48,E'block_diagram_description',E'system',E'I am giving you the following inputs to write a detailed explanation for the component and its sub-components:\n1. ####Claims####\n2. ####Current invention####\n3. ####components_entities#### in json format\n4. ####entity_actions_rewritten#### in json format\n5. ####entity_attributes_rewritten#### in json format\n\nStep 1: Choose the component {{component_num}} and all Sub-components for component {{component_num}} from ####components_entities#### for the explanation. Please provide a detailed explanation of the chosen Component and all of its sub-components from the text ####components_entities####. Reference/Quote the entities and their numbers either from field entity_numerical_identifier from json ####entity_actions_rewritten#### or from field system/component/sub-component number from json ####components_entities#### if available.  For example Device (10,40), Object (15, 45). The explanation should include the following points:\n\na) Introduce chosen component  and its significance\n\nb) Define and explain all the entities that comprise the component and its sub-component from ####components_entities#### in context of text ####Claims#### and ####Current Invention####. Quote/cite all the specific numerical attributes, all the specific properties (including physical properties such as state, texture, etc. and particular examples), all the specific quantities/number of the entity/entites, all alternatives and all embodiments/uses/applications for all the entities from ####components_entities#### by referencing the entity attributes from field specific_attributes_claims,  from field all invention attributes and from field additional_attributes_invention from json ####entity_attributes_rewritten#### and explain how they contribute to the component\'s function. Cite/quote all the entity attributes from field specific_attributes_claims,  from field all invention attributes and from field additional_attributes_invention from json ####entity_attributes_rewritten#### without generalising/changing the language of the entity attributes in the explanation. Avoid use of quotations in the explanation.\n\nc) Use the mapping between entities from the field entity_claim and entities from the invention from the field entity_invention from the json ####entity_actions_rewritten#### to explain all the alternative manifestations of the entities in context of ####current invention#### and ####claims####. Do not include the column names or headers in the explanation. \n\nDo not use the word component or sub-component in the explanation, instead use the component/sub-component name while explaining about it. Do not refer to words like "entity", "entities", "entity action", "crucial", "critical" etc. Just state facts from the inputs provided and avoid use of adjectives in the explanation. Avoid use of quotations in the explanation.\nDo not reference claim numbers from field claim_number from json ####entity_actions_rewritten#### in the explanation. Output format: ==introduction_component {{component_num}}===\n\nStep 2: Re-run step 1 till \na) all the entities are cited with their numbers either from field entity_numerical_identifier from json ####entity_actions_rewritten#### or from field system/component/sub-component number from json ####components_entities#### in the explanation if available - for example Device (10,40), Object (15, 45).\nb) Cite/quote all the entity attributes from field specific_attributes_claims,  from field all invention attributes and from field additional_attributes_invention from json ####entity_attributes_rewritten####.\nc) no claim numbers are referenced from field claim_number from json ####entity_actions_rewritten#### \nd) words like "entity", "entities", "entity action", "crucial", "critical" etc are not used in the explanation',NULL,E'{"project": ["flowchart_main_element_nums"]}',NULL,NULL,NULL,E'Start',NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(371,4,49,E'flowchart_description',E'system',E'Revise the text ####Explanation Step#### by removing the adjectives/superlatives for all the entities and their actions. Avoid all patent profanity terms like "invention", "current Invention", "patent", "entity", "action", "entities", "alternative of each entity", "layman", "attributes", "specific attributes", "implicit component", "technical write-up" and "entity action", "real-world", "Entity_claims", "Claims", "Current invention", "steps_sub-steps", etc. Also,  avoid use of superlatives like "critical", "most important", "crucial", "important", "integral", "pivotal" etc. Our goal is only to state facts about the entities involved in the step, it\'s working, it\'s real world manifestation and not use any adjectives/language that deviates from that goal. \n\nIn the revised explanation, ensure the following:\na) reference the step and sub-step numbers without using the words "step", "sub-step", "claim_step_actions", "current Invention", "patent", "entity", "action", "entities", "alternative of each entity", "implicit component", "technical write-up" and "entity action", "real-world", "Entity_claims", "Claims", "Claim number", "Entity_claim", "Entity number from claims". \nb) Reference/Quote all the entities along with their identifiers if available. Example - Device (10,40): in this case the entity device has the identifier (10,40).\nc) The revised explanation should not exclude any detail for the function of the Step and its sub-steps.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text');


DELETE FROM "prompt"."prompt_seq" WHERE "prompt_seq_id"=403 OR "prompt_seq_id"=402 OR "prompt_seq_id"=401 OR "prompt_seq_id"=400 OR "prompt_seq_id"=399 OR "prompt_seq_id"=398 OR "prompt_seq_id"=395 OR "prompt_seq_id"=388 OR "prompt_seq_id"=387 OR "prompt_seq_id"=386 OR "prompt_seq_id"=383 OR "prompt_seq_id"=382 OR "prompt_seq_id"=381 OR "prompt_seq_id"=378 OR "prompt_seq_id"=360 OR "prompt_seq_id"=351;

INSERT INTO "prompt"."prompt_seq"("prompt_seq_id","seq","prompt_id","short_name","role","instructions","fun_def","inputs","outputs","created_at","modified_at","repeat","is_stream","model","multicalls","max_tokens","skip_append","prompt_actions","claim_nums","decision_step","step_description","revised_step_description","claim_component_entities","claim_component_actions","output_format")
VALUES
(403,9,51,E'block_diagram',E'user',E'Step 31: Generate a brief description using the goal from field goal for each mermaid from field sub_mermaid_number for each claim group from json Goal_claim_group_mermaids in 1 line without using the word claim group. Print the output in json format:\n{"breif_descriptions": [{"Claims_group_number":..., "sub_mermaid_number": "...", "brief_description": ...}]}\n\n\nConsider the writing style of sample given below:\n\nFIG. 1 illustrates, in a flowchart, operations for using a user profile in accordance with certain embodiments. \n\nBrief Description;',NULL,NULL,E'{"project": ["breif_descriptions"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(402,8,51,E'block_diagram',E'user',E' Step 30: Identify the goal of the steps for each mermaid from field sub_mermaid_number for each claim group separately from json {mermaids} in fewer than 20 words. Print the output in json format â€¨{"Goal_claim_group_mermaids": [{"Claims_group number":..., "sub_mermaid_number":..., "goal..."},...]}',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(401,7,51,E'block_diagram',E'user',E'Step 29: Split the mermaid from Step 20 for each claim group  into multiple mermaids based on the main components-sub-components grouping. For any main component with sub-component from json component_sub-component, ensure that the mermaid is made for that main component and all it\'s sub-components. Avoid mermaids in Step 29 that do not contain sub-components. Also, ensure each of the mermaid splits are meaningful in context of json component_sub-component. Each mermaid in a claim group must be numbered as Fig. 5A, Fig. 5B, etc. For each claim group follow a unique number for the mermaids. Print the output in json format: {"mermaids": [{"claims_group_number":..., "sub_mermaid_number":..., "mermaid" : "mermaid script/syntax ..."}, ....]}. Do not repeat the step in the output. ',NULL,NULL,E'{"project": ["mermaids"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(400,6,51,E'block_diagram',E'user',E'Step 28: Generate a brief description for each mermaid from field main_mermaid_number for each claim group using the goal from field goal from json Goal_claim_group in 1 line without using the word claim group. Print the output in json format: {"main_breif_descriptions": [{"Claims_group_number":..., "main_mermaid_number": "...", "brief_description": ...}]}\nConsider the writing style of sample given below:\n\nFIG. 5 illustrates, in a block diagram, a computing environment of a VR headset in accordance with certain embodiments.\n\nBrief Description;',NULL,NULL,E'{"project": ["breif_description"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(399,5,51,E'block_diagram',E'user',E'Step 27: Using the output of step 26, identify the goal of the steps for each mermaid from field main_mermaid_number for each claim group from field claims_group_number from json main_mermaids in fewer than 20 words. Print the output in json format: â€¨{"Goal_claim_group": [{"Claims_group number":..., "main_mermaid_number":..., "goal..."},...]}\n',NULL,NULL,E'{"project": []}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(398,4,51,E'block_diagram',E'user',E'Step 26: Use the output from step 20 to generate one mermaid for each claim group for all the main components, without the sub-components, which together enable/manifest all the entity actions from json component_sub-component. Each mermaid in a claim group must be numbered from Fig. 5. For each claim group follow a unique number for the mermaids. Print the output in json format: \n{"main_mermaids": [{"claims_group_number":..., "main_mermaid_number": ..., "mermaid": "mermaid script/syntax"...}, ....]}\n',NULL,NULL,E'{"project": ["mermaid"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(395,1,51,E'block_diagram',E'system',E'Step 16: Provide the mermaid script/syntax for each claim group from field claims_group_number from json component_sub-component. Do not print output for this step.\n\nStep 17: Choose the layout for output from step 16. Use graph TB for a top-down layout or graph LR for a left-right layout. Do not print output for this step.\n\nStep 18: Define the nodes for each claim group for the output from step 16. Use square brackets for regular nodes (e.g., 200["Host System"]). Do not print output for this step.\n\nStep 19: For the Mermaid script/syntax from step 16, use the word "subgraph" to start a subgraph and the word "end" to close it. Define all nodes that belong to the subgraph. Define the links for  all the nodes at the end. Do not print output for this step.\n\nStep 20: Review and adjust the Mermaid script/syntax for each claim group as needed. Refer the example given below for following the style of the mermaid. This sample is for reference only, do not follow numbering of the sample given below. Keep the numbering same as given in the json component_sub-component and also, do not mention claim numbers in the mermaid codes. \n\nFor example, \ngraph LR\nsubgraph 200["Host System"]\n  210["Host Interface Unit"]\nend\nsubgraph 204["Memory Controller"]\n  212["Memory Interface Unit"]\n  214["Processing Unit"]\nend\nsubgraph 206["Non-Volatile Memory"]\n  202["Memory Devices"]\n  208["Host Memory"]\n  216["Information Units"]\nend\n200 --- 204\n204 --- 206\nPrint the output for this step in json format with title ==mermaids==. Do not print process/step in the output.\n\nStep 22: Ensure that a valid mermaid syntax has been generated for each claim group in step 20.  Do not print the output for this step.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(388,11,47,E'flowchart_diagram',E'user',E'Step 27: Generate a brief description using the goal from field goal for each mermaid from field sub_mermaid_number for each claim group from json Goal_claim_group_mermaids in 1 line without using the word claim group. Print the output in json format:\n{"breif_descriptions": [{"Claims_group_number":..., "sub_mermaid_number": "...", "brief_description": ...}]}\n\n\nConsider the writing style of sample given below:\n\nFIG. 1 illustrates, in a flowchart, operations for using a user profile in accordance with certain embodiments. \n\nBrief Description;',NULL,NULL,E'{"project": ["breif_descriptions"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(387,10,47,E'flowchart_diagram',E'user',E'Step 26: Identify the goal of the steps for each mermaid from field sub_mermaid_number for each claim group separately from json {mermaids} in fewer than 20 words. Print the output in json format â€¨{"Goal_claim_group_mermaids": [{"Claims_group number":..., "sub_mermaid_number":..., "goal..."},...]}',NULL,NULL,E'{"project": []}',NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'text'),
(386,9,47,E'flowchart_diagram',E'user',E'Step 24: Generate a brief description for each mermaid from field main_mermaid_number for each claim group using the goal from field goal from json Goal_claim_group in 1 line without using the word claim group. Print the output in json format: {"main_breif_descriptions": [{"Claims_group_number":..., "main_mermaid_number": "...", "brief_description": ...}]}\nConsider the writing style of sample given below:\n\nFIG. 1 illustrates, in a flowchart, operations for using a user profile in accordance with certain embodiments. \n\nBrief Description;',NULL,NULL,E'{"project": ["breif_description"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(383,6,47,E'flowchart_diagram',E'system',E'Step 23: Using the output of step 22, identify the goal of the steps for each mermaid from field main_mermaid_number for each claim group from field claims_group_number from json main_mermaids in fewer than 20 words. Print the output in json format: â€¨{"Goal_claim_group": [{"Claims_group number":..., "main_mermaid_number":..., "goal..."},...]}\n\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(382,5,47,E'flowchart_diagram',E'user',E'Step 25: Split the mermaids from Step 19, for each claim group, into multiple mermaids based on the sub-steps grouping where each sub-step group contains a step and it\'s respective sub-step from ==Steps_sub-steps Rewrite==. For any step with sub-step in each claim group from ==Steps_sub-steps Rewrite==, ensure that the mermaid is made only for the step and all it\'s sub-steps. Using ==Steps_sub-steps Rewrite==, avoid mermaids in Step 25 for steps that do not contain sub-steps. Ensure each of the mermaid splits are meaningful in context of ==Steps_sub-steps Rewrite== and ==Decision_step==. Each mermaid in a claim group must be numbered as Fig. 1A, Fig. 1B, etc. For each claim group follow a unique number for the mermaids. Print the output in json format: {"mermaids": [{"claims_group_number":..., "sub_mermaid_number":..., "mermaid" : "mermaid script/syntax ..."}, ....]}. Do not repeat the step in the output. \n\nSample Mermaid:\ngraph TB\n100["Determine an initial eye strain context for a user wearing a VR headset."]\n102{"Recognize a User Interface (UI) adaptation."}\n104["Establish the intensity of the UI adaptation."]\n106["Display modified VR content by applying the identified UI adaptation."]\n108["Assess an updated eye strain context."]\n110{"If the updated eye strain context indicates a decrease in eye strain."}\n112["Modify the priority weight for the UI adaptation."]\n114["Refresh a user\'s profile with the UI adaptation, its intensity, and the modified priority weight."]\n100 --> 102\n102 -- Yes --> 104\n104 --> 106\n106 --> 108\n108 --> 110\n110 -- Yes --> 112\n112 --> 114\n110 -- No --> 102',NULL,NULL,E'{"project": ["mermaids"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(381,4,47,E'flowchart_diagram',E'user',E'Step 22: Use the output from step 19 to generate one mermaid for each claim group. For each claim group, the mermaid will contain all the steps without the sub-steps, which together encompass the method in context of ==Steps_sub-steps Rewrite== and ==Decision_step==. Steps can be identified from their whole number whereas sub-steps can be identified by the whole number hyphenated with an alphabet. Each mermaid in a claim group must be numbered as Fig. 1.  For each claim group follow a unique number for the mermaids. Do not print the process in the output. Print the output in json format: \n{"main_mermaids": [{"claims_group_number":..., "main_mermaid_number": ..., "mermaid": "mermaid script/syntax"...}, ....]}\n\nSample Mermaid:\ngraph TB\n100["Determine an initial eye strain context for a user wearing a VR headset."]\n102{"Recognize a User Interface (UI) adaptation."}\n104["Establish the intensity of the UI adaptation."]\n106["Display modified VR content by applying the identified UI adaptation."]\n108["Assess an updated eye strain context."]\n110{"If the updated eye strain context indicates a decrease in eye strain."}\n112["Modify the priority weight for the UI adaptation."]\n114["Refresh a user\'s profile with the UI adaptation, its intensity, and the modified priority weight."]\n100 --> 102\n102 -- Yes --> 104\n104 --> 106\n106 --> 108\n108 --> 110\n110 -- Yes --> 112\n112 --> 114\n110 -- No --> 102',NULL,NULL,E'{"project": ["mermaid"]}',NULL,NULL,NULL,TRUE,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'json'),
(378,1,47,E'flowchart_diagram',E'system',E'Step 15: Provide the mermaid script/syntax for all steps and sub-steps/parallel steps for each claim group from field claims_group_number using json Steps_sub-steps Rewrite by doing the following: For the mermaid script/syntax, understand the output of all steps and sub-steps/parallel steps from ==Steps_sub-steps Rewrite== in context of ==Decision_step==. ==Decision_step== identifies the decision making step. Using all the details of all the steps and sub-steps/parallel steps from ==Steps_sub-steps Rewrite== and decision making step from ==Decision_step==, identify nodes, conditions (if any), and different links/paths for each claim group. Do not print output for this step.\n\nStep 16: Choose the layout for output from Step 15. Use graph TB for a top-down layout or graph LR for a left-right layout. Do not print output for this step.\n\nStep 17: Define the nodes for output from Step 15. Use square brackets for regular nodes e.g., 100["Node A"].  Use curly braces for decision nodes e.g., 102{"Condition B"}. Treat "If" condition nodes as decision nodes. Do not print output for this step.\n\nStep 18: For the Mermaid script/syntax from step 15 define the links/paths between nodes from Step 17 using -->. To add text to the links/paths, use |Link text| for each claim group. For multiple links/paths between nodes, define each link separately. For decision making link/path, use appropriate messages to handle yes/no cases. For example, a decision node should have two separate links/paths with messages as "yes" and "no". Do not print output for this step.\n\nStep 19:Review and adjust the Mermaid script/syntax for each claim group from field claims_group_number from json ==Steps_sub-steps Rewrite==, as needed. Refer the example given below for following the style of the mermaid. Print the output for this step.\n\nmermaid\nCopy code\ngraph TB\n100["Determine an initial eye strain context for a user wearing a VR headset."]\n102{"Recognize a User Interface (UI) adaptation."}\n104["Establish the intensity of the UI adaptation."]\n106["Display modified VR content by applying the identified UI adaptation."]\n108["Assess an updated eye strain context."]\n110{"If the updated eye strain context indicates a decrease in eye strain."}\n112["Modify the priority weight for the UI adaptation."]\n114["Refresh a user\'s profile with the UI adaptation, its intensity, and the modified priority weight."]\n100 --> 102\n102 -- Yes --> 104\n104 --> 106\n106 --> 108\n108 --> 110\n110 -- Yes --> 112\n112 --> 114\n110 -- No --> 102\n\n\nStep 20:  Confirm that the yes and no condition from the decision making step from ==Decision_step== has already been considered in the output of Step 19. If no, then re-generate the output from Step 19. Do not print output for this step.\n\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(360,1,45,E'flowchart_common',E'system',E'I am providing you the following inputs to perform steps 5 to 10. \n####Claims####\n####Current Invention####\n####entity_actions_rewritten####in json format\n\nStep 5: An independent claim does not reference any other claim. However, a dependent claim always references another claim on which it depends. Using the above logic do the following: \na) Identify all the method type independent and dependent claims from the text ####Claims####. If there are no method claims, output no method claims.\nb) Map the dependency between the independent claim and/or all the method dependent claims that directly or indirectly reference it in the same claim group. Also, map the dependency between the dependent claims in the same claim group. For instance, if claim 1 is independent and claims 2 and 3 are directly dependent on claim 1, they should be grouped in the same claim group. If there are further dependent claims such as claim 4 that depend on dependent claim 3, and dependent claim 5 that depends on dependent claim 4, they should also be included in the group of claim 1, as they indirectly reference it. Even if there is no dependent claim for an independent claim it should be classified into a separate group.\nc) No two independent claims can be grouped in the same claim group. \nd) Only the method type claims(if any) must be referenced in the output.\nPrint the output in a json format. \nPrint the json ==claim_groups== in this format:\n{"claim_groups": [ { "claims_group_number":..., "Method_independent_claim": ...,  "Method_dependent_claim":....}, ..]}. Ensure no dependent claim is considered as a distinct claim_group. Do not print the process in the output.\n\nStep 5.1: Rerun the step till each method claim(independent and/or dependent) is referenced in json claim_groups. Do not print output for this step. \n\nStep 6:  For the claims identified from the output of step 5, use the entity actions from field entity_action_claim from json ####entity_actions_rewritten#### to identify which dependent claim depends on which entity action of the independent claim or the entity action in other dependent claims in context of text ####Claims####. Provide the mapping between the dependent claims and the claim entity actions of the independent claim or the entity actions of other dependent claims on which it depends. Output format: Dependent claim --> Independent claim --> reason etc. \nPrint the json ==claim_dependency== in this format:\n{"claim_dependency": [{"claims_group_number":..., "dependent_claim": ..., "independent_claim": ..., "reason": ...}, ...]}\n\nStep 7: a)Identify all the main steps/entity actions for all the claims for each claim group from field claims_group_number from json ==claim_groups==, using the json claim_dependency  that occur in a logical sequence to accomplish the method in context of all the claims from Step 5 and the ####current invention####. b)  Identify all the the sub-steps/parallel steps/entity actions that are optional/additional details for the main steps, if available,  to accomplish the method in context of claims from json ==claim_groups==. c) Ensure all the claims for each claim group from json ==claim_groups== are referred in Step 7 output. Number the step and sub-step, in an even numbering series with increment of 2 for each step, as follows - if step number is 100, it\'s sub-step number will be 100-a, 100-b, for step 102 the sub-step will be 102-a, 102-b etc. Use unique numbering series for each claim group. d) Print the output in a json format with title: ==Steps_sub-steps== where every step/ sub-step is in a separate row. The output json ==Steps_sub-steps== will contain the following fields: claims_group_number, Step/Sub-Step type, Step/Sub-Step number, explanation quote from text ####claims####, claim number, entity_claim(entity_numerical_identifier) and entities_inv.\nPrint the json ==Steps_sub-steps== in this format:\n{"Steps_sub-steps": [ { "claims_group_number":..., "Step/Sub-Step type":..., "Step/Sub-Step number": ..., "explanation quote from text ####claims####":..., "claim number":..., "entity_claim":..., "entity_numerical_identifier":..., "entities_inv":...}, ..]}. Do not print process in the output.\n\nStep 7.1: Rerun step 7 till all the claims from field independent_claim and from field dependent_claims for each claim group from json ==claim_groups== are referred in the output.\n\nStep 8: Rewrite step 7 by doing the following:\na) keep the step and sub-step numbers the same\nb) Re-write the explanation from "explanation quote from text ####Claims####" in a concise form without changing the technical language/vocabulary or alter any of the numerical attributes, specific properties (including physical properties such as state, texture, etc. and particular examples), specific quantities details/parameters/definitions in context of text ####Claims####.\nPrint the output of this step in json format with title ==Steps_sub-steps Rewrite== The json ==Steps_sub-steps Rewrite== will have the following fieds: claims_group_number, Step/Sub-Step number, explanation, claim number. \nPrint the json ==Steps_sub-steps Rewrite== in this format:\n{"Steps_sub-steps Rewrite": [ {"claims_group_number":..., "Step/Sub-Step type":..., "Step/Sub-Step number":..., "explanation": ..., "claim number":...}, ..]}. Do not print process in the output.\n\nStep 9: Identify all the decision making steps using field explanation for each step/sub-step from field  Step/Sub-Step number from json Steps_sub-steps Rewrite. Identify the decision making steps for each claim group from field claims_group_number.  Print the output of this step in json format with title ==decision_steps==. Print the json ==decision_steps== in this format:\n{"decision_steps": [ {"claims_group_number":..., "Decision step":...}, ..]}. Do not print process in the output.\n\nStep 10: Identity and list all the entities from field \'entities_inv\' from json ####entity_actions_rewritten#### that are not directly mentioned in the claims but are related to the broader context of the invention or the application of the claimed method. Quote them from field \'entities_inv\' as is from json ####entity_actions_rewritten####. Print output in json format with title ==additional_entities_to_describe==. The json ==additional_entities_to_describe==will have the field entities_inv_addl. Print the json ==additional_entities_to_describe== in this format:\n{"additional_entities_to_describe": [ { "entities_inv_addl":...}, ..]}. Do not print process in the output.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',TRUE,596,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
(351,1,46,E'block_diagram_common',E'system',E'I have provided following inputs to perform steps 5 to 11\n####Claims####\n####Current Invention####\n####entity_actions_rewritten####in json format\n\n\nStep 5: An independent claim does not reference any other claim. However, a dependent claim always references another claim on which it depends. Using the above logic do the following: \na) Identify all the system type  independent and dependent claims from the text ####Claims#### based on the preamble of the claims only. If there are no system claims, output no system claims.\n\nb) Map the dependency between the independent claim and/or all the dependent claims that directly or indirectly reference it in the same claim group. Also, map the dependency between the dependent claims in the same claim group. For instance, if claim 1 is independent and claims 2 and 3 are directly dependent on claim 1, they should be grouped in the same claim group. If there are further dependent claims such as claim 4 that depend on dependent claim 3, and dependent claim 5 that depends on dependent claim 4, they should also be included in the group of claim 1, as they indirectly reference it. Even if there is no dependent claim for an independent claim it should be classified into a separate group.\nc) No two independent claims can be grouped in the same claim group. \nd) Only the system type claims(if any) must be referenced in the output. Do not include component/apparatus/product/device/machine claims under system claim category in the output.\nPrint the output in a json format. \nPrint the json ==claim_groups== in this format:\n{"claim_groups": [ { "claims_group_number":..., "system_independent_claim": ...,  "claim_type":..., "system_dependent_claim":....}, ..]}. Ensure no dependent claim is considered as a distinct claim_group. Do not print the process in the output.  \n \nStep 5.1: Rerun the step till each system claim(independent and/or dependent) is referenced in json claim_groups. Do not include component/apparatus/product/device/machine type claims under system claim category in the output. Do not print output for this step.\n\n\nStep 6:  For the claims identified from ==system_Claims==, use the entity actions from field {entity_action_claim} from json ####entity_actions_rewritten#### to identify which dependent claim depends on which entity action of the independent claim or the entity action in other dependent claims in context of text ####Claims####. Provide the mapping between the dependent claims and the claim entity actions of the independent claim or the entity actions of other dependent claims on which it depends. Output format: Dependent claim --> Independent claim --> reason etc. \nPrint the json ==claim_dependency== in this format:\n{"claim_dependency": [{"claims_group_number":..., "dependent_claim": ..., "independent_claim": ..., "reason": ...}, ...]}\n\n\nStep 7: Identify and name the system that encompasses the specific entity actions associated with ####current invention#### from field entity action_invention from json ####entity_actions_rewritten#### and all the claims from ==system_Claims==. Output format: ==System==\nPrint the json ==System== in this format:\n{"system": ...}\n\n\nStep 8: a) Co-relate the identified claims for each claim group from field independent_claim, from field dependent_claim from json claim_groups with the field claim_number from json ####entity_actions_rewritten####.\nb) Identify all the entities from field entity_claim and entities_inv from json #### entity_actions_rewritten#### for the co-related claim numbers for each claim group.\nc) Group all the identified entities for each claim group from field entity_claim and from field entities_inv from json  #### entity_actions_rewritten#### into components and sub-components using overlaps/commonalities in their entity action from either 1) from field entity_action_claim or from 2) field entity_action_invention from json ####entity_actions_rewritten#### and from output of step 6. These components and sub-components should be grouped such that when working together they manifest the invention from text ####Claims#### and text ####Current invention####. \nd) Ensure that entities from both field entity_claim and from field entities_inv are quoted/cited in the output. Ensure all the claims (both independent and dependent claims) identified for each claim group in the output of step 5 are referenced in the output. Print the output in json format with title ==component_entities== where every component/ sub-component is in a separate row. The json ==component_entities== will be in this format:\n{"component_entities": [ {"claims_group_number":...., "component/sub-component type":..., "component/sub-component name ": ...,  "entity_claim":...., "entity_numerical_identifier":..., "entities_inv":..., "claim numbers":...}, ..]}. Do not repeat the process in the output.\n\nStep 8.1: Rerun step 8 till all the entities from both field entity_claim and from field entities_inv are quoted/cited in the column grouped entities in the output and all the claims from field dependent_claims for each claim group from json ==claim_groups== are referred in the output.\n\nStep 9: For all the entities from the field entity_claim from JSON ####entity_actions_rewritten####, verify that the field entity_numerical_identifier is empty/null/does not have any value. If this condition is satisfied for every entity, indicating that no entity has a numerical identifier, then proceed to Steps 10 and 11. If any entity has a numerical identifier, do not proceed further and provide an appropriate message indicating that the condition is not met. Output in json format with fields \nexp - explain the condition\nflag - true/false based on is the condition.\nOutput json in the below format: {"check": {"exp": ..., "flag": ...}}\n\n\nStep 10 : Check the naming of components for each claim group from field claims_group_number from Step 8 to determine which components are named like method components. Re-name only the components and sub-components from output of Step 8 to sound like system components/parts of a system if they sound like method components. When renaming, ensure the names are small/pithy/catchy titles with at most 2-5 words. Ensure the new names are unique and capture the essence of the component and sub-component entity action as mapped in output of Step 8. Do not number the components in this output. Print the output in json format with title ==renamed_component_entities==. The json ==renamed_component_entities==will be in this format:\n{"renamed_component_entities": [ {"claims_group_number":...., "Component/Sub-component":..., "Renaming required(Y/N)": ..., "Renamed Component/Sub-component":...}, ..]}. Do not print process in the output.\n\nStep 11: Number the system, component and sub-component from field  Component/Sub-component for each claim group from json ==renamed_component_entities==, in an unique numbering series with increment of 2 for each component as follows - if the system is numbered 500, the component should be numbered 502 and it\'s sub-component should be numbered 502-a, 502-b etc. The next component will be numbered 504 and itâ€™s sub-component will be numbered 504-a, 504-b etc. Print the output json format with title ==component_sub-component==. The json ==component_sub-component== will be in this format:\n{"component_sub-component": [{"claims_group_number":...., "Component type - system/component/sub-component":..., "system/component/sub-component number": "...", "system/component/sub-component name":..., "explanation":..., "entity_claim":..., "entities_inv":..., "claim numbers":...}, ..]}. Do not print process in the output.\n',NULL,NULL,NULL,NULL,NULL,NULL,NULL,E'gpt-4-1106-preview',NULL,4096,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);

DELETE from "prompt"."prompt_seq" where prompt_seq_id in (351);
INSERT INTO "prompt"."prompt_seq" ("prompt_seq_id", "seq", "prompt_id", "short_name", "role", "instructions", "fun_def", "inputs", "outputs", "created_at", "modified_at", "repeat", "is_stream", "model", "multicalls", "max_tokens", "prompt_actions", "skip_append", "claim_nums", "decision_step", "step_description", "revised_step_description", "claim_component_entities", "claim_component_actions", "output_format") VALUES
(351, 1, 46, 'block_diagram_common', 'system', 'I have provided following inputs to perform steps 5 to 11
####Claims####
####Current Invention####
####entity_actions_rewritten####in json format


Step 5: An independent claim does not reference any other claim. However, a dependent claim always references another claim on which it depends. Using the above logic do the following: 
a) Identify all the system type  independent and dependent claims from the text ####Claims#### based on the preamble of the claims only. If there are no system claims, output no system claims.

b) Map the dependency between the independent claim and/or all the dependent claims that directly or indirectly reference it in the same claim group. Also, map the dependency between the dependent claims in the same claim group. For instance, if claim 1 is independent and claims 2 and 3 are directly dependent on claim 1, they should be grouped in the same claim group. If there are further dependent claims such as claim 4 that depend on dependent claim 3, and dependent claim 5 that depends on dependent claim 4, they should also be included in the group of claim 1, as they indirectly reference it. Even if there is no dependent claim for an independent claim it should be classified into a separate group.
c) No two independent claims can be grouped in the same claim group. 
d) Only the system type claims(if any) must be referenced in the output. Do not include component/apparatus/product/device/machine claims under system claim category in the output.
Print the output in a json format. 
Print the json ==claim_groups== in this format:
{"claim_groups": [ { "claims_group_number":..., "system_independent_claim": ...,  "claim_type":..., "system_dependent_claim":....}, ..]}. Ensure no dependent claim is considered as a distinct claim_group. Do not print the process in the output.  
 
Step 5.1: Rerun the step till each system claim(independent and/or dependent) is referenced in json claim_groups. Do not include component/apparatus/product/device/machine type claims under system claim category in the output. Do not print output for this step.


Step 6:  For the claims identified from ==system_Claims==, use the entity actions from field {entity_action_claim} from json ####entity_actions_rewritten#### to identify which dependent claim depends on which entity action of the independent claim or the entity action in other dependent claims in context of text ####Claims####. Provide the mapping between the dependent claims and the claim entity actions of the independent claim or the entity actions of other dependent claims on which it depends. Output format: Dependent claim --> Independent claim --> reason etc. 
Print the json ==claim_dependency== in this format:
{"claim_dependency": [{"claims_group_number":..., "dependent_claim": ..., "independent_claim": ..., "reason": ...}, ...]}


Step 7: Identify and name the system that encompasses the specific entity actions associated with ####current invention#### from field entity action_invention from json ####entity_actions_rewritten#### and all the claims from ==system_Claims==. Output format: ==System==
Print the json ==System== in this format:
{"system": ...}


Step 8: a) Co-relate the identified claims for each claim group from field independent_claim, from field dependent_claim from json claim_groups with the field claim_number from json ####entity_actions_rewritten####.
b) Identify all the entities from field entity_claim and entities_inv from json ####entity_actions_rewritten#### for the co-related claim numbers for each claim group.
c) Group all the identified entities for each claim group from field entity_claim and from field entities_inv from json  #### entity_actions_rewritten#### into components and sub-components using overlaps/commonalities in their entity action from either 1) from field entity_action_claim or from 2) field entity_action_invention from json ####entity_actions_rewritten#### and from output of step 6. These components and sub-components should be grouped such that when working together they manifest the invention from text ####Claims#### and text ####Current invention####. 
d) The grouped entities should be referred as component/sub-component only in the field component/sub-component type in the output.
e) Ensure that entities from both field entity_claim and from field entities_inv are quoted/cited in the output. Ensure all the claims (both independent and dependent claims) identified for each claim group in the output of step 5 are referenced in the output. Number the components using numerals 1, 2 etc. The sub-components of a component with the decimal number of that component such as 1.1, 1.2, 2.1, 2.2 etc,. Follow a unique number series for each claim group. Print the output in json format with title ==component_entities== where every component/ sub-component is in a separate row. The json ==component_entities== will be in this format:
{"component_entities": [ {"claims_group_number":...., "component/sub-component type":..., "component/sub-component number":..., "component/sub-component name ": ...,  "entity_claim":...., "entity_numerical_identifier":..., "entities_inv":..., "claim numbers":...}, ..]}. Do not repeat the process in the output.

Step 8.1: Rerun step 8 till all the entities from both field entity_claim and from field entities_inv are quoted/cited in the column grouped entities in the output and all the claims from field dependent_claims for each claim group from json ==claim_groups== are referred in the output.

Step 9: Verify whether the field entity_numerical_identifier has only numerical value for all entities from the field entity_claim from JSON ####entity_actions_rewritten####. If this condition is satisfied for every entity in json entity_actions_rewritten, indicating that each entity has a numerical identifier in the form of a number print the flag as "Has Numerical" otherwise "Don''t have Numerical". Output in json format with fields 
exp - explain the condition
flag - Has Numerical / Don''t have Numerical.
Output json in the below format: {"check": {"exp": ..., "flag": ...}}


Step 10 : Check the naming of components for each claim group from field claims_group_number from Step 8 to determine which components are named like method components. Re-name only the components and sub-components from output of Step 8 to sound like system components/parts of a system if they sound like method components. When renaming, ensure the names are small/pithy/catchy titles with at most 2-5 words. Ensure the new names are unique and capture the essence of the component and sub-component entity action as mapped in output of Step 8. Do not number the components in this output. Print the output in json format with title ==renamed_component_entities==. The json ==renamed_component_entities==will be in this format:
{"renamed_component_entities": [ {"claims_group_number":...., "Component/Sub-component":..., "Renaming required(Y/N)": ..., "Renamed Component/Sub-component":...}, ..]}. Do not print process in the output.

Step 11: Number the system, component and sub-component from field  Component/Sub-component for each claim group from json ==renamed_component_entities==, in an unique numbering series with increment of 2 for each component as follows - if the system is numbered 500, the component should be numbered 502 and it''s sub-component should be numbered 502-a, 502-b etc. The next component will be numbered 504 and itâ€™s sub-component will be numbered 504-a, 504-b etc. Print the output json format with title ==component_sub-component==. The json ==component_sub-component== will be in this format:
{"component_sub-component": [{"claims_group_number":...., "Component type - system/component/sub-component":..., "system/component/sub-component number": "...", "system/component/sub-component name":..., "explanation":..., "entity_claim":..., "entities_inv":..., "claim numbers":...}, ..]}. Do not print process in the output.', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'gpt-4-1106-preview', NULL, 4096, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

UPDATE "prompt"."prompt_seq" SET "instructions" = 'I am providing you the following inputs to perform steps 5 to 10. 
####Claims####
####Current Invention####
####entity_actions_rewritten####in json format

Step 5: An independent claim does not reference any other claim. However, a dependent claim always references another claim on which it depends. Using the above logic do the following: 
a) Identify all the method type independent and dependent claims from the text ####Claims#### based on the preamble of the claims only. If there are no method claims, output no method claims.
b) Map the dependency between the independent claim and/or all the method dependent claims that directly or indirectly reference it in the same claim group. Also, map the dependency between the dependent claims in the same claim group. For instance, if claim 1 is independent and claims 2 and 3 are directly dependent on claim 1, they should be grouped in the same claim group. If there are further dependent claims such as claim 4 that depend on dependent claim 3, and dependent claim 5 that depends on dependent claim 4, they should also be included in the group of claim 1, as they indirectly reference it. Even if there is no dependent claim for an independent claim it should be classified into a separate group.
c) No two independent claims can be grouped in the same claim group. 
d) Only the method type claims(if any) must be referenced in the output.
Print the output in a json format. 
Print the json ==claim_groups== in this format:
{"claim_groups": [ { "claims_group_number":..., "Method_independent_claim": ...,  "Method_dependent_claim":....}, ..]}. Ensure no dependent claim is considered as a distinct claim_group. Do not print the process in the output.

Step 5.1: Rerun the step till each method claim(independent and/or dependent) is referenced in json claim_groups. Do not print output for this step. 

Step 6:  For the claims identified from the output of step 5, use the entity actions from field entity_action_claim from json ####entity_actions_rewritten#### to identify which dependent claim depends on which entity action of the independent claim or the entity action in other dependent claims in context of text ####Claims####. Provide the mapping between the dependent claims and the claim entity actions of the independent claim or the entity actions of other dependent claims on which it depends. Output format: Dependent claim --> Independent claim --> reason etc. 
Print the json ==claim_dependency== in this format:
{"claim_dependency": [{"claims_group_number":..., "dependent_claim": ..., "independent_claim": ..., "reason": ...}, ...]}

Step 7: a)Identify all the main steps/entity actions for all the claims for each claim group from field claims_group_number from json ==claim_groups==, using the json claim_dependency  that occur in a logical sequence to accomplish the method in context of all the claims from Step 5 and the ####current invention####. b)  Identify all the the sub-steps/parallel steps/entity actions that are optional/additional details for the main steps, if available,  to accomplish the method in context of claims from json ==claim_groups==. c) Ensure all the claims for each claim group from json ==claim_groups== are referred in Step 7 output. Number the step and sub-step, in an even numbering series with increment of 2 for each step, as follows - if step number is 100, it''s sub-step number will be 100-a, 100-b, for step 102 the sub-step will be 102-a, 102-b etc. Use unique numbering series for each claim group. d) Print the output in a json format with title: ==Steps_sub-steps== where every step/ sub-step is in a separate row. The output json ==Steps_sub-steps== will contain the following fields: claims_group_number, Step/Sub-Step type, Step/Sub-Step number, explanation quote from text ####claims####, claim number, entity_claim(entity_numerical_identifier) and entities_inv.
Print the json ==Steps_sub-steps== in this format:
{"Steps_sub-steps": [ { "claims_group_number":..., "Step/Sub-Step type":..., "Step/Sub-Step number": ..., "explanation quote from text ####claims####":..., "claim number":..., "entity_claim":..., "entity_numerical_identifier":..., "entities_inv":...}, ..]}. Do not print process in the output.

Step 7.1: Rerun step 7 till all the claims from field independent_claim and from field dependent_claims for each claim group from json ==claim_groups== are referred in the output.

Step 8: Rewrite step 7 by doing the following:
a) keep the step and sub-step numbers the same
b) Re-write the explanation from "explanation quote from text ####Claims####" in a concise form without changing the technical language/vocabulary or alter any of the numerical attributes, specific properties (including physical properties such as state, texture, etc. and particular examples), specific quantities details/parameters/definitions in context of text ####Claims####.
Print the output of this step in json format with title ==Steps_sub-steps Rewrite== The json ==Steps_sub-steps Rewrite== will have the following fieds: claims_group_number, Step/Sub-Step number, explanation, claim number. 
Print the json ==Steps_sub-steps Rewrite== in this format:
{"Steps_sub-steps Rewrite": [ {"claims_group_number":..., "Step/Sub-Step type":..., "Step/Sub-Step number":..., "explanation": ..., "claim number":...}, ..]}. Do not print process in the output.

Step 9: Identify all the decision making steps using field explanation for each step/sub-step from field  Step/Sub-Step number from json Steps_sub-steps Rewrite. Identify the decision making steps for each claim group from field claims_group_number.  Print the output of this step in json format with title ==decision_steps==. Print the json ==decision_steps== in this format:
{"decision_steps": [ {"claims_group_number":..., "Decision step":...}, ..]}. Do not print process in the output.

Step 10: Identity and list all the entities from field ''entities_inv'' from json ####entity_actions_rewritten#### that are not directly mentioned in the claims but are related to the broader context of the invention or the application of the claimed method. Quote them from field ''entities_inv'' as is from json ####entity_actions_rewritten####. Print output in json format with title ==additional_entities_to_describe==. The json ==additional_entities_to_describe==will have the field entities_inv_addl. Print the json ==additional_entities_to_describe== in this format:
{"additional_entities_to_describe": [ { "entities_inv_addl":...}, ..]}. Do not print process in the output.' WHERE "prompt_seq_id" = 360;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'I am giving you the following inputs to write a detailed explanation
1. ####Current invention####
2. ####entity_attributes_invention#### in json format
3.####additional_entities_to_describe#### in json format 

Step 1: From the input json ####additional_entities_to_describe####, verify that the field entities_inv_addl has any data. If this condition is satisfied, indicating that the field entities_inv_addl has some data, then proceed to step 2. Output in json format with title: describe_additional_entities with fields 
exp - explain the condition
flag - true/false based on is the condition. Output in json format asâ€¨{"entities_inv_addl": {"exp": ..., "flag": ...}}

Step 2: Co-relate the entities from field entities_inv_addl from json ####additional_entities_to_describe#### with the field entities_inv from json ####entity_attributes_invention####.
The co-relation should be done by going through field entities from json ####entity_attributes_invention#### across the entire field serial number from json ####entity_attributes_invention####. Print the output in json format with title -==a==. The json ==a== contains following fields  entity, serial_number. Print the json ==a== in this format:
{"a": [ { "entity":..., "serial_number":...}, ..]}. Do not print process in the output.

Step 3: Quote the entire text from field all_invention_attributes from json ####entity_attributes_invention#### for the entities from field entity from json "a" from step 2 by doing the following:
a) Co-relate the entities from field entities_inv_addl from json ####additional_entities_to_describe#### with the field entities_inv from json ####entity_attributes_invention####.
The co-relation should be done by going through field entities from json ####entity_attributes_invention#### across the entire field serial number from json ####entity_attributes_invention####. Do not print output. 
b) after co-relation, identify the text associated with the entity from field entities_inv from field all_invention_attributes from json ####entity_attributes_invention####.Do not print output. c) After the text identification, quote and print the entire text from field all_invention_attributes from json ####entity_attributes_invention#### in a paragraph format in the output. Do not change the technical language and do not use  words like "serial number" in the output. Do not repeat the step in the output.' WHERE "prompt_seq_id" = 373;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'I have provided following inputs to perform steps 5 to 7
####Claims####
####Current Invention####
####entity_actions_rewritten####in json format


Step 5:  Identify all the respective apparatus/device/composition/formulation/product/machine/medium type independent and dependent claims from the text ####Claims#### based on the preamble of the claims only. Do not include system claims under any category in the output. Print the output in json format with title ==apparatus/device/composition/formulation/product/machine/medium_Claims==. The json ==apparatus/device/composition/formulation/product/machine/medium_Claims== will be in this format 
{"claim_numbers":{"apparatus_claims": [ ...],"device_claims": [...],"composition_claims": [ ...],"formulation_claims": [...],"product_claims": [...],"machine_claims": [...], "medium_claims":[....]}}â€¨. Do not print the process in the output. 

Examples of medium type claims is as below:
Medium type claims: A non-transitory computer readable medium for storing computer instructions.....

Step 5.1: Rerun the step till all the apparatus/device/composition/formulation/product/machine/medium (both independent and dependent) claims are referenced in json claim_groups. Do not include the system claims under any category in the output. Do not print output for this step.


Step 6: a) Co-relate only the identified claims from field claim_numbers from json apparatus/device/composition/formulation/product/machine/medium_Claims with the field claim_number from json #### entity_actions_rewritten####. 
b) After co-relation, only for the co-related claim numbers from field claim_number from json #### entity_actions_rewritten#### identify all the entities from field entity_claim and entities_inv from json #### entity_actions_rewritten####, 
C) Then group all the identified entities from field entity_claim and from field entities_inv from json  #### entity_actions_rewritten#### into logical groups. The logical groups must be made on the basis similarity/commonality in entity actions from either a) field entity_action_claim or from b) field entity_action_invention. These logical groups should be grouped such that when working together they manifest the invention from text ####Claims#### and text ####Current invention####. Ensure the logical groups are such that the entities from entitiy_claim and entities_inv are represented/written/referenced only in one row/sr. no. Ensure that entities from both field entity_claim and from field entities_inv are quoted/cited in the column grouped entities in the output. 
Print the json ==grouped entities== in this format: {"grouped entities": [ { "Sr.no":...., "grouped entities":[.,.,.,], "entity actions": ...,  "entity actions purpose":..., "Claim number":....}, ..]}


Step 7: Re-Group all the entities from field  Grouped Entities from json ==grouped entities== into logical groups such that all redundancies/overlaps in field grouped entities is avoided. The logical groups from json ==grouped entities== must be regrouped either on the basis of (a) similarity/commonality in entity actions from  field Entity Actions  even if the language of entity actions is different OR (b) Similarity/commonality in purpose of entity actions from field entity actions purpose even if the language is different. These logical groups should be re-grouped such that when working together they manifest the invention from text ####Claims#### and text ####Current invention####. Ensure the logical groups are such that all the entities from field Grouped Entities are represented/written/referenced only in one row/sr. no . Ensure that entities from Grouped Entities are quoted/cited in the field Re-grouped Entities in the output. Print the output in a Json format with title of the json ==component_entities==. The json ==component_entities== must be in 
this format: {"component_entities": [{ "component/sub-component number": ..., "re-grouped entities":[..., ..., ...], "entity actions": ...,  "entity actions purpose": ...}]}
' WHERE "prompt_seq_id" = 404;

UPDATE "prompt"."prompt_seq" SET "instructions" = 'I have provided following inputs to perform steps 5 to 11
####Claims####
####Current Invention####
####entity_actions_rewritten####in json format


Step 5: An independent claim does not reference any other claim. However, a dependent claim always references another claim on which it depends. Using the above logic do the following: 
a) Identify all the system type  independent and dependent claims from the text ####Claims#### based on the preamble of the claims only. If there are no system claims, output no system claims.

b) Map the dependency between the independent claim and/or all the dependent claims that directly or indirectly reference it in the same claim group. Also, map the dependency between the dependent claims in the same claim group. For instance, if claim 1 is independent and claims 2 and 3 are directly dependent on claim 1, they should be grouped in the same claim group. If there are further dependent claims such as claim 4 that depend on dependent claim 3, and dependent claim 5 that depends on dependent claim 4, they should also be included in the group of claim 1, as they indirectly reference it. Even if there is no dependent claim for an independent claim it should be classified into a separate group.
c) No two independent claims can be grouped in the same claim group. 
d) Only the system type claims(if any) must be referenced in the output. Do not include component/apparatus/product/device/machine claims under system claim category in the output.
Print the output in a json format. 
Print the json ==claim_groups== in this format:
{"claim_groups": [ { "claims_group_number":..., "system_independent_claim": ...,  "claim_type":..., "system_dependent_claim":....}, ..]}. Ensure no dependent claim is considered as a distinct claim_group. Do not print the process in the output.  
 
Step 5.1: Rerun the step till each system claim(independent and/or dependent) is referenced in json claim_groups. Do not include component/apparatus/product/device/machine type claims under system claim category in the output. Do not print output for this step.


Step 6:  For the claims identified from ==system_Claims==, use the entity actions from field {entity_action_claim} from json ####entity_actions_rewritten#### to identify which dependent claim depends on which entity action of the independent claim or the entity action in other dependent claims in context of text ####Claims####. Provide the mapping between the dependent claims and the claim entity actions of the independent claim or the entity actions of other dependent claims on which it depends. Output format: Dependent claim --> Independent claim --> reason etc. 
Print the json ==claim_dependency== in this format:
{"claim_dependency": [{"claims_group_number":..., "dependent_claim": ..., "independent_claim": ..., "reason": ...}, ...]}


Step 7: Identify and name the system that encompasses the specific entity actions associated with ####current invention#### from field entity action_invention from json ####entity_actions_rewritten#### and all the claims from ==system_Claims==. Output format: ==System==
Print the json ==System== in this format:
{"system": ...}


Step 8: a) Co-relate the identified claims for each claim group from field independent_claim, from field dependent_claim from json claim_groups with the field claim_number from json ####entity_actions_rewritten####.
b) Identify all the entities from field entity_claim and entities_inv from json ####entity_actions_rewritten#### for the co-related claim numbers for each claim group.
c) Group all the identified entities for each claim group from field entity_claim and from field entities_inv from json  #### entity_actions_rewritten#### into components and sub-components using overlaps/commonalities in their entity action from either 1) from field entity_action_claim or from 2) field entity_action_invention from json ####entity_actions_rewritten#### and from output of step 6. These components and sub-components should be grouped such that when working together they manifest the invention from text ####Claims#### and text ####Current invention####. 
d) The grouped entities should be referred as component/sub-component only in the field component/sub-component type in the output.
e) Ensure that entities from both field entity_claim and from field entities_inv are quoted/cited in the output. Ensure all the claims (both independent and dependent claims) identified for each claim group in the output of step 5 are referenced in the output. Number the components using numerals 1, 2 etc. The sub-components of a component with the decimal number of that component such as 1.1, 1.2, 2.1, 2.2 etc,. Follow a unique number series for each claim group. Print the output in json format with title ==component_entities== where every component/ sub-component is in a separate row. The json ==component_entities== will be in this format:
{"component_entities": [ {"claims_group_number":...., "component/sub-component type":..., "component/sub-component number":..., "component/sub-component name ": ...,  "entity_claim":...., "entity_numerical_identifier":..., "entities_inv":..., "claim numbers":...}, ..]}. Do not repeat the process in the output.

Step 8.1: Rerun step 8 till all the entities from both field entity_claim and from field entities_inv are quoted/cited in the column grouped entities in the output and all the claims from field dependent_claims for each claim group from json ==claim_groups== are referred in the output.

Step 9: Check whether the field entity_numerical_identifier associated with all entities from the field entity_claim from JSON ####component_entities#### has only numerical values. If yes, print "All entities have numerical identifiers". If any of the value in field entity_numerical_identifier is non numerical, print "NO". Output in json format with fields 
flag - All entities have numerical identifiers / No
Output json in the below format: {"check": {"flag": ...}} 


Step 10 : Check the naming of components for each claim group from field claims_group_number from Step 8 to determine which components are named like method components. Re-name only the components and sub-components from output of Step 8 to sound like system components/parts of a system if they sound like method components. When renaming, ensure the names are small/pithy/catchy titles with at most 2-5 words. Ensure the new names are unique and capture the essence of the component and sub-component entity action as mapped in output of Step 8. Do not number the components in this output. Print the output in json format with title ==renamed_component_entities==. The json ==renamed_component_entities==will be in this format:
{"renamed_component_entities": [ {"claims_group_number":...., "Component/Sub-component":..., "Renaming required(Y/N)": ..., "Renamed Component/Sub-component":...}, ..]}. Do not print process in the output.

Step 11: Number the system, component and sub-component from field  Component/Sub-component for each claim group from json ==renamed_component_entities==, in an unique numbering series with increment of 2 for each component as follows - if the system is numbered 500, the component should be numbered 502 and it''s sub-component should be numbered 502-a, 502-b etc. The next component will be numbered 504 and itâ€™s sub-component will be numbered 504-a, 504-b etc. Print the output json format with title ==component_sub-component==. The json ==component_sub-component== will be in this format:
{"component_sub-component": [{"claims_group_number":...., "Component type - system/component/sub-component":..., "system/component/sub-component number": "...", "system/component/sub-component name":..., "explanation":..., "entity_claim":..., "entities_inv":..., "claim numbers":...}, ..]}. Do not print process in the output.
' WHERE "prompt_seq_id" = 351;
